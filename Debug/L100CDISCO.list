
L100CDISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002480  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080025bc  080025bc  000125bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025e0  080025e0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080025e0  080025e0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025e0  080025e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025e0  080025e0  000125e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025e4  080025e4  000125e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080025e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  080025f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  080025f4  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006c84  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000171f  00000000  00000000  00026cb9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c0  00000000  00000000  000283d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005e8  00000000  00000000  00028a98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001517d  00000000  00000000  00029080  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006bbd  00000000  00000000  0003e1fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000806e1  00000000  00000000  00044dba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c549b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001928  00000000  00000000  000c5518  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	080025a4 	.word	0x080025a4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	080025a4 	.word	0x080025a4

0800017c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000182:	4b0c      	ldr	r3, [pc, #48]	; (80001b4 <MX_DMA_Init+0x38>)
 8000184:	69db      	ldr	r3, [r3, #28]
 8000186:	4a0b      	ldr	r2, [pc, #44]	; (80001b4 <MX_DMA_Init+0x38>)
 8000188:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800018c:	61d3      	str	r3, [r2, #28]
 800018e:	4b09      	ldr	r3, [pc, #36]	; (80001b4 <MX_DMA_Init+0x38>)
 8000190:	69db      	ldr	r3, [r3, #28]
 8000192:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000196:	607b      	str	r3, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800019a:	2200      	movs	r2, #0
 800019c:	2100      	movs	r1, #0
 800019e:	2010      	movs	r0, #16
 80001a0:	f000 fb9f 	bl	80008e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80001a4:	2010      	movs	r0, #16
 80001a6:	f000 fbb8 	bl	800091a <HAL_NVIC_EnableIRQ>

}
 80001aa:	bf00      	nop
 80001ac:	3708      	adds	r7, #8
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	40023800 	.word	0x40023800

080001b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b08a      	sub	sp, #40	; 0x28
 80001bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001be:	f107 0314 	add.w	r3, r7, #20
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	605a      	str	r2, [r3, #4]
 80001c8:	609a      	str	r2, [r3, #8]
 80001ca:	60da      	str	r2, [r3, #12]
 80001cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ce:	4b2a      	ldr	r3, [pc, #168]	; (8000278 <MX_GPIO_Init+0xc0>)
 80001d0:	69db      	ldr	r3, [r3, #28]
 80001d2:	4a29      	ldr	r2, [pc, #164]	; (8000278 <MX_GPIO_Init+0xc0>)
 80001d4:	f043 0304 	orr.w	r3, r3, #4
 80001d8:	61d3      	str	r3, [r2, #28]
 80001da:	4b27      	ldr	r3, [pc, #156]	; (8000278 <MX_GPIO_Init+0xc0>)
 80001dc:	69db      	ldr	r3, [r3, #28]
 80001de:	f003 0304 	and.w	r3, r3, #4
 80001e2:	613b      	str	r3, [r7, #16]
 80001e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80001e6:	4b24      	ldr	r3, [pc, #144]	; (8000278 <MX_GPIO_Init+0xc0>)
 80001e8:	69db      	ldr	r3, [r3, #28]
 80001ea:	4a23      	ldr	r2, [pc, #140]	; (8000278 <MX_GPIO_Init+0xc0>)
 80001ec:	f043 0320 	orr.w	r3, r3, #32
 80001f0:	61d3      	str	r3, [r2, #28]
 80001f2:	4b21      	ldr	r3, [pc, #132]	; (8000278 <MX_GPIO_Init+0xc0>)
 80001f4:	69db      	ldr	r3, [r3, #28]
 80001f6:	f003 0320 	and.w	r3, r3, #32
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001fe:	4b1e      	ldr	r3, [pc, #120]	; (8000278 <MX_GPIO_Init+0xc0>)
 8000200:	69db      	ldr	r3, [r3, #28]
 8000202:	4a1d      	ldr	r2, [pc, #116]	; (8000278 <MX_GPIO_Init+0xc0>)
 8000204:	f043 0301 	orr.w	r3, r3, #1
 8000208:	61d3      	str	r3, [r2, #28]
 800020a:	4b1b      	ldr	r3, [pc, #108]	; (8000278 <MX_GPIO_Init+0xc0>)
 800020c:	69db      	ldr	r3, [r3, #28]
 800020e:	f003 0301 	and.w	r3, r3, #1
 8000212:	60bb      	str	r3, [r7, #8]
 8000214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000216:	4b18      	ldr	r3, [pc, #96]	; (8000278 <MX_GPIO_Init+0xc0>)
 8000218:	69db      	ldr	r3, [r3, #28]
 800021a:	4a17      	ldr	r2, [pc, #92]	; (8000278 <MX_GPIO_Init+0xc0>)
 800021c:	f043 0302 	orr.w	r3, r3, #2
 8000220:	61d3      	str	r3, [r2, #28]
 8000222:	4b15      	ldr	r3, [pc, #84]	; (8000278 <MX_GPIO_Init+0xc0>)
 8000224:	69db      	ldr	r3, [r3, #28]
 8000226:	f003 0302 	and.w	r3, r3, #2
 800022a:	607b      	str	r3, [r7, #4]
 800022c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800022e:	2200      	movs	r2, #0
 8000230:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000234:	4811      	ldr	r0, [pc, #68]	; (800027c <MX_GPIO_Init+0xc4>)
 8000236:	f000 fef5 	bl	8001024 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800023a:	2301      	movs	r3, #1
 800023c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800023e:	4b10      	ldr	r3, [pc, #64]	; (8000280 <MX_GPIO_Init+0xc8>)
 8000240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000242:	2300      	movs	r3, #0
 8000244:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000246:	f107 0314 	add.w	r3, r7, #20
 800024a:	4619      	mov	r1, r3
 800024c:	480d      	ldr	r0, [pc, #52]	; (8000284 <MX_GPIO_Init+0xcc>)
 800024e:	f000 fd73 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000252:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000258:	2301      	movs	r3, #1
 800025a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800025c:	2300      	movs	r3, #0
 800025e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000260:	2300      	movs	r3, #0
 8000262:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000264:	f107 0314 	add.w	r3, r7, #20
 8000268:	4619      	mov	r1, r3
 800026a:	4804      	ldr	r0, [pc, #16]	; (800027c <MX_GPIO_Init+0xc4>)
 800026c:	f000 fd64 	bl	8000d38 <HAL_GPIO_Init>

}
 8000270:	bf00      	nop
 8000272:	3728      	adds	r7, #40	; 0x28
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40023800 	.word	0x40023800
 800027c:	40020800 	.word	0x40020800
 8000280:	10110000 	.word	0x10110000
 8000284:	40020000 	.word	0x40020000

08000288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800028e:	f000 f9e2 	bl	8000656 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000292:	f000 f817 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000296:	f7ff ff8f 	bl	80001b8 <MX_GPIO_Init>
  MX_DMA_Init();
 800029a:	f7ff ff6f 	bl	800017c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800029e:	f000 f915 	bl	80004cc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  uint8_t data[3];
  HAL_UART_Receive_DMA(&huart2, &data, 3);
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	2203      	movs	r2, #3
 80002a6:	4619      	mov	r1, r3
 80002a8:	4804      	ldr	r0, [pc, #16]	; (80002bc <main+0x34>)
 80002aa:	f001 fc6f 	bl	8001b8c <HAL_UART_Receive_DMA>

  while(!dataArrived);
 80002ae:	bf00      	nop
 80002b0:	4b03      	ldr	r3, [pc, #12]	; (80002c0 <main+0x38>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d0fb      	beq.n	80002b0 <main+0x28>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 80002b8:	e7fe      	b.n	80002b8 <main+0x30>
 80002ba:	bf00      	nop
 80002bc:	20000070 	.word	0x20000070
 80002c0:	20000028 	.word	0x20000028

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b092      	sub	sp, #72	; 0x48
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0314 	add.w	r3, r7, #20
 80002ce:	2234      	movs	r2, #52	; 0x34
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f002 f95e 	bl	8002594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	463b      	mov	r3, r7
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002e6:	4b1d      	ldr	r3, [pc, #116]	; (800035c <SystemClock_Config+0x98>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80002ee:	4a1b      	ldr	r2, [pc, #108]	; (800035c <SystemClock_Config+0x98>)
 80002f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002f4:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f6:	2302      	movs	r3, #2
 80002f8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fa:	2301      	movs	r3, #1
 80002fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fe:	2310      	movs	r3, #16
 8000300:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000302:	2302      	movs	r3, #2
 8000304:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000306:	2300      	movs	r3, #0
 8000308:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800030a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800030e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000310:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000314:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	f107 0314 	add.w	r3, r7, #20
 800031a:	4618      	mov	r0, r3
 800031c:	f000 fe9a 	bl	8001054 <HAL_RCC_OscConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000326:	f000 f829 	bl	800037c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032a:	230f      	movs	r3, #15
 800032c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032e:	2303      	movs	r3, #3
 8000330:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800033e:	463b      	mov	r3, r7
 8000340:	2101      	movs	r1, #1
 8000342:	4618      	mov	r0, r3
 8000344:	f001 f9b6 	bl	80016b4 <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800034e:	f000 f815 	bl	800037c <Error_Handler>
  }
}
 8000352:	bf00      	nop
 8000354:	3748      	adds	r7, #72	; 0x48
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40007000 	.word	0x40007000

08000360 <HAL_UART_RxCpltCallback>:
	HAL_UART_Transmit(&huart2, (uint8_t*)"\033[2J", strlen("\033[2J"), HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart2, (uint8_t*)TEST, strlen(TEST), HAL_MAX_DELAY);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000360:	b480      	push	{r7}
 8000362:	b083      	sub	sp, #12
 8000364:	af00      	add	r7, sp, #0
 8000366:	6078      	str	r0, [r7, #4]
	dataArrived = 1;
 8000368:	4b03      	ldr	r3, [pc, #12]	; (8000378 <HAL_UART_RxCpltCallback+0x18>)
 800036a:	2201      	movs	r2, #1
 800036c:	701a      	strb	r2, [r3, #0]
}
 800036e:	bf00      	nop
 8000370:	370c      	adds	r7, #12
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr
 8000378:	20000028 	.word	0x20000028

0800037c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr

08000388 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b084      	sub	sp, #16
 800038c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800038e:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <HAL_MspInit+0x5c>)
 8000390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000392:	4a14      	ldr	r2, [pc, #80]	; (80003e4 <HAL_MspInit+0x5c>)
 8000394:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000398:	6253      	str	r3, [r2, #36]	; 0x24
 800039a:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <HAL_MspInit+0x5c>)
 800039c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800039e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80003a2:	60fb      	str	r3, [r7, #12]
 80003a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003a6:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <HAL_MspInit+0x5c>)
 80003a8:	6a1b      	ldr	r3, [r3, #32]
 80003aa:	4a0e      	ldr	r2, [pc, #56]	; (80003e4 <HAL_MspInit+0x5c>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6213      	str	r3, [r2, #32]
 80003b2:	4b0c      	ldr	r3, [pc, #48]	; (80003e4 <HAL_MspInit+0x5c>)
 80003b4:	6a1b      	ldr	r3, [r3, #32]
 80003b6:	f003 0301 	and.w	r3, r3, #1
 80003ba:	60bb      	str	r3, [r7, #8]
 80003bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003be:	4b09      	ldr	r3, [pc, #36]	; (80003e4 <HAL_MspInit+0x5c>)
 80003c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003c2:	4a08      	ldr	r2, [pc, #32]	; (80003e4 <HAL_MspInit+0x5c>)
 80003c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003c8:	6253      	str	r3, [r2, #36]	; 0x24
 80003ca:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <HAL_MspInit+0x5c>)
 80003cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003d2:	607b      	str	r3, [r7, #4]
 80003d4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80003d6:	2007      	movs	r0, #7
 80003d8:	f000 fa78 	bl	80008cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003dc:	bf00      	nop
 80003de:	3710      	adds	r7, #16
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	40023800 	.word	0x40023800

080003e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003ec:	bf00      	nop
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bc80      	pop	{r7}
 80003f2:	4770      	bx	lr

080003f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <HardFault_Handler+0x4>

080003fa <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003fe:	e7fe      	b.n	80003fe <MemManage_Handler+0x4>

08000400 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000404:	e7fe      	b.n	8000404 <BusFault_Handler+0x4>

08000406 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000406:	b480      	push	{r7}
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800040a:	e7fe      	b.n	800040a <UsageFault_Handler+0x4>

0800040c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800040c:	b480      	push	{r7}
 800040e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000410:	bf00      	nop
 8000412:	46bd      	mov	sp, r7
 8000414:	bc80      	pop	{r7}
 8000416:	4770      	bx	lr

08000418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	bc80      	pop	{r7}
 8000422:	4770      	bx	lr

08000424 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	bc80      	pop	{r7}
 800042e:	4770      	bx	lr

08000430 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000434:	f000 f962 	bl	80006fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}

0800043c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000440:	4802      	ldr	r0, [pc, #8]	; (800044c <DMA1_Channel6_IRQHandler+0x10>)
 8000442:	f000 fb9a 	bl	8000b7a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	2000002c 	.word	0x2000002c

08000450 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000454:	4802      	ldr	r0, [pc, #8]	; (8000460 <USART2_IRQHandler+0x10>)
 8000456:	f001 fc19 	bl	8001c8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	20000070 	.word	0x20000070

08000464 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000464:	b480      	push	{r7}
 8000466:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000468:	4b15      	ldr	r3, [pc, #84]	; (80004c0 <SystemInit+0x5c>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	4a14      	ldr	r2, [pc, #80]	; (80004c0 <SystemInit+0x5c>)
 800046e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000472:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000474:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <SystemInit+0x5c>)
 8000476:	689a      	ldr	r2, [r3, #8]
 8000478:	4911      	ldr	r1, [pc, #68]	; (80004c0 <SystemInit+0x5c>)
 800047a:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <SystemInit+0x60>)
 800047c:	4013      	ands	r3, r2
 800047e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000480:	4b0f      	ldr	r3, [pc, #60]	; (80004c0 <SystemInit+0x5c>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a0e      	ldr	r2, [pc, #56]	; (80004c0 <SystemInit+0x5c>)
 8000486:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800048a:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800048e:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000490:	4b0b      	ldr	r3, [pc, #44]	; (80004c0 <SystemInit+0x5c>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	4a0a      	ldr	r2, [pc, #40]	; (80004c0 <SystemInit+0x5c>)
 8000496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800049a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800049c:	4b08      	ldr	r3, [pc, #32]	; (80004c0 <SystemInit+0x5c>)
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	4a07      	ldr	r2, [pc, #28]	; (80004c0 <SystemInit+0x5c>)
 80004a2:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80004a6:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80004a8:	4b05      	ldr	r3, [pc, #20]	; (80004c0 <SystemInit+0x5c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80004ae:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <SystemInit+0x64>)
 80004b0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004b4:	609a      	str	r2, [r3, #8]
#endif
}
 80004b6:	bf00      	nop
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	40023800 	.word	0x40023800
 80004c4:	88ffc00c 	.word	0x88ffc00c
 80004c8:	e000ed00 	.word	0xe000ed00

080004cc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80004d0:	4b11      	ldr	r3, [pc, #68]	; (8000518 <MX_USART2_UART_Init+0x4c>)
 80004d2:	4a12      	ldr	r2, [pc, #72]	; (800051c <MX_USART2_UART_Init+0x50>)
 80004d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80004d6:	4b10      	ldr	r3, [pc, #64]	; (8000518 <MX_USART2_UART_Init+0x4c>)
 80004d8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004de:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <MX_USART2_UART_Init+0x4c>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004e4:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <MX_USART2_UART_Init+0x4c>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ea:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <MX_USART2_UART_Init+0x4c>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004f0:	4b09      	ldr	r3, [pc, #36]	; (8000518 <MX_USART2_UART_Init+0x4c>)
 80004f2:	220c      	movs	r2, #12
 80004f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004f6:	4b08      	ldr	r3, [pc, #32]	; (8000518 <MX_USART2_UART_Init+0x4c>)
 80004f8:	2200      	movs	r2, #0
 80004fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004fc:	4b06      	ldr	r3, [pc, #24]	; (8000518 <MX_USART2_UART_Init+0x4c>)
 80004fe:	2200      	movs	r2, #0
 8000500:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000502:	4805      	ldr	r0, [pc, #20]	; (8000518 <MX_USART2_UART_Init+0x4c>)
 8000504:	f001 faf4 	bl	8001af0 <HAL_UART_Init>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800050e:	f7ff ff35 	bl	800037c <Error_Handler>
  }

}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	20000070 	.word	0x20000070
 800051c:	40004400 	.word	0x40004400

08000520 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b08a      	sub	sp, #40	; 0x28
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000528:	f107 0314 	add.w	r3, r7, #20
 800052c:	2200      	movs	r2, #0
 800052e:	601a      	str	r2, [r3, #0]
 8000530:	605a      	str	r2, [r3, #4]
 8000532:	609a      	str	r2, [r3, #8]
 8000534:	60da      	str	r2, [r3, #12]
 8000536:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	4a2e      	ldr	r2, [pc, #184]	; (80005f8 <HAL_UART_MspInit+0xd8>)
 800053e:	4293      	cmp	r3, r2
 8000540:	d155      	bne.n	80005ee <HAL_UART_MspInit+0xce>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000542:	4b2e      	ldr	r3, [pc, #184]	; (80005fc <HAL_UART_MspInit+0xdc>)
 8000544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000546:	4a2d      	ldr	r2, [pc, #180]	; (80005fc <HAL_UART_MspInit+0xdc>)
 8000548:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054c:	6253      	str	r3, [r2, #36]	; 0x24
 800054e:	4b2b      	ldr	r3, [pc, #172]	; (80005fc <HAL_UART_MspInit+0xdc>)
 8000550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000556:	613b      	str	r3, [r7, #16]
 8000558:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	4b28      	ldr	r3, [pc, #160]	; (80005fc <HAL_UART_MspInit+0xdc>)
 800055c:	69db      	ldr	r3, [r3, #28]
 800055e:	4a27      	ldr	r2, [pc, #156]	; (80005fc <HAL_UART_MspInit+0xdc>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	61d3      	str	r3, [r2, #28]
 8000566:	4b25      	ldr	r3, [pc, #148]	; (80005fc <HAL_UART_MspInit+0xdc>)
 8000568:	69db      	ldr	r3, [r3, #28]
 800056a:	f003 0301 	and.w	r3, r3, #1
 800056e:	60fb      	str	r3, [r7, #12]
 8000570:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000572:	230c      	movs	r3, #12
 8000574:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000576:	2302      	movs	r3, #2
 8000578:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800057a:	2300      	movs	r3, #0
 800057c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800057e:	2303      	movs	r3, #3
 8000580:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000582:	2307      	movs	r3, #7
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	4619      	mov	r1, r3
 800058c:	481c      	ldr	r0, [pc, #112]	; (8000600 <HAL_UART_MspInit+0xe0>)
 800058e:	f000 fbd3 	bl	8000d38 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000592:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <HAL_UART_MspInit+0xe4>)
 8000594:	4a1c      	ldr	r2, [pc, #112]	; (8000608 <HAL_UART_MspInit+0xe8>)
 8000596:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000598:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <HAL_UART_MspInit+0xe4>)
 800059a:	2200      	movs	r2, #0
 800059c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800059e:	4b19      	ldr	r3, [pc, #100]	; (8000604 <HAL_UART_MspInit+0xe4>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <HAL_UART_MspInit+0xe4>)
 80005a6:	2280      	movs	r2, #128	; 0x80
 80005a8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80005aa:	4b16      	ldr	r3, [pc, #88]	; (8000604 <HAL_UART_MspInit+0xe4>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <HAL_UART_MspInit+0xe4>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80005b6:	4b13      	ldr	r3, [pc, #76]	; (8000604 <HAL_UART_MspInit+0xe4>)
 80005b8:	2220      	movs	r2, #32
 80005ba:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80005bc:	4b11      	ldr	r3, [pc, #68]	; (8000604 <HAL_UART_MspInit+0xe4>)
 80005be:	2200      	movs	r2, #0
 80005c0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80005c2:	4810      	ldr	r0, [pc, #64]	; (8000604 <HAL_UART_MspInit+0xe4>)
 80005c4:	f000 f9c4 	bl	8000950 <HAL_DMA_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 80005ce:	f7ff fed5 	bl	800037c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <HAL_UART_MspInit+0xe4>)
 80005d6:	635a      	str	r2, [r3, #52]	; 0x34
 80005d8:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <HAL_UART_MspInit+0xe4>)
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80005de:	2200      	movs	r2, #0
 80005e0:	2100      	movs	r1, #0
 80005e2:	2026      	movs	r0, #38	; 0x26
 80005e4:	f000 f97d 	bl	80008e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80005e8:	2026      	movs	r0, #38	; 0x26
 80005ea:	f000 f996 	bl	800091a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80005ee:	bf00      	nop
 80005f0:	3728      	adds	r7, #40	; 0x28
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	40004400 	.word	0x40004400
 80005fc:	40023800 	.word	0x40023800
 8000600:	40020000 	.word	0x40020000
 8000604:	2000002c 	.word	0x2000002c
 8000608:	4002606c 	.word	0x4002606c

0800060c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800060c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800060e:	e003      	b.n	8000618 <LoopCopyDataInit>

08000610 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000610:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000612:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000614:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000616:	3104      	adds	r1, #4

08000618 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000618:	480a      	ldr	r0, [pc, #40]	; (8000644 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800061c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800061e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000620:	d3f6      	bcc.n	8000610 <CopyDataInit>
  ldr r2, =_sbss
 8000622:	4a0a      	ldr	r2, [pc, #40]	; (800064c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000624:	e002      	b.n	800062c <LoopFillZerobss>

08000626 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000626:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000628:	f842 3b04 	str.w	r3, [r2], #4

0800062c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800062e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000630:	d3f9      	bcc.n	8000626 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000632:	f7ff ff17 	bl	8000464 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000636:	f001 ff89 	bl	800254c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800063a:	f7ff fe25 	bl	8000288 <main>
  bx lr
 800063e:	4770      	bx	lr
  ldr r3, =_sidata
 8000640:	080025e8 	.word	0x080025e8
  ldr r0, =_sdata
 8000644:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000648:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800064c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000650:	200000b4 	.word	0x200000b4

08000654 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000654:	e7fe      	b.n	8000654 <ADC1_IRQHandler>

08000656 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	b082      	sub	sp, #8
 800065a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800065c:	2300      	movs	r3, #0
 800065e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000660:	2003      	movs	r0, #3
 8000662:	f000 f933 	bl	80008cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000666:	2000      	movs	r0, #0
 8000668:	f000 f80e 	bl	8000688 <HAL_InitTick>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d002      	beq.n	8000678 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000672:	2301      	movs	r3, #1
 8000674:	71fb      	strb	r3, [r7, #7]
 8000676:	e001      	b.n	800067c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000678:	f7ff fe86 	bl	8000388 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800067c:	79fb      	ldrb	r3, [r7, #7]
}
 800067e:	4618      	mov	r0, r3
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b084      	sub	sp, #16
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000690:	2300      	movs	r3, #0
 8000692:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000694:	4b16      	ldr	r3, [pc, #88]	; (80006f0 <HAL_InitTick+0x68>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d022      	beq.n	80006e2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800069c:	4b15      	ldr	r3, [pc, #84]	; (80006f4 <HAL_InitTick+0x6c>)
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <HAL_InitTick+0x68>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80006ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f940 	bl	8000936 <HAL_SYSTICK_Config>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d10f      	bne.n	80006dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b0f      	cmp	r3, #15
 80006c0:	d809      	bhi.n	80006d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006c2:	2200      	movs	r2, #0
 80006c4:	6879      	ldr	r1, [r7, #4]
 80006c6:	f04f 30ff 	mov.w	r0, #4294967295
 80006ca:	f000 f90a 	bl	80008e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ce:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <HAL_InitTick+0x70>)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	e007      	b.n	80006e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	73fb      	strb	r3, [r7, #15]
 80006da:	e004      	b.n	80006e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006dc:	2301      	movs	r3, #1
 80006de:	73fb      	strb	r3, [r7, #15]
 80006e0:	e001      	b.n	80006e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006e2:	2301      	movs	r3, #1
 80006e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000008 	.word	0x20000008
 80006f4:	20000000 	.word	0x20000000
 80006f8:	20000004 	.word	0x20000004

080006fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <HAL_IncTick+0x1c>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <HAL_IncTick+0x20>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4413      	add	r3, r2
 800070a:	4a03      	ldr	r2, [pc, #12]	; (8000718 <HAL_IncTick+0x1c>)
 800070c:	6013      	str	r3, [r2, #0]
}
 800070e:	bf00      	nop
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	200000b0 	.word	0x200000b0
 800071c:	20000008 	.word	0x20000008

08000720 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return uwTick;
 8000724:	4b02      	ldr	r3, [pc, #8]	; (8000730 <HAL_GetTick+0x10>)
 8000726:	681b      	ldr	r3, [r3, #0]
}
 8000728:	4618      	mov	r0, r3
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	200000b0 	.word	0x200000b0

08000734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <__NVIC_SetPriorityGrouping+0x44>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000750:	4013      	ands	r3, r2
 8000752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800075c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000766:	4a04      	ldr	r2, [pc, #16]	; (8000778 <__NVIC_SetPriorityGrouping+0x44>)
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	60d3      	str	r3, [r2, #12]
}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	bc80      	pop	{r7}
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <__NVIC_GetPriorityGrouping+0x18>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	0a1b      	lsrs	r3, r3, #8
 8000786:	f003 0307 	and.w	r3, r3, #7
}
 800078a:	4618      	mov	r0, r3
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	db0b      	blt.n	80007c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007aa:	79fb      	ldrb	r3, [r7, #7]
 80007ac:	f003 021f 	and.w	r2, r3, #31
 80007b0:	4906      	ldr	r1, [pc, #24]	; (80007cc <__NVIC_EnableIRQ+0x34>)
 80007b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b6:	095b      	lsrs	r3, r3, #5
 80007b8:	2001      	movs	r0, #1
 80007ba:	fa00 f202 	lsl.w	r2, r0, r2
 80007be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007c2:	bf00      	nop
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr
 80007cc:	e000e100 	.word	0xe000e100

080007d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b083      	sub	sp, #12
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	6039      	str	r1, [r7, #0]
 80007da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	db0a      	blt.n	80007fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	b2da      	uxtb	r2, r3
 80007e8:	490c      	ldr	r1, [pc, #48]	; (800081c <__NVIC_SetPriority+0x4c>)
 80007ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ee:	0112      	lsls	r2, r2, #4
 80007f0:	b2d2      	uxtb	r2, r2
 80007f2:	440b      	add	r3, r1
 80007f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007f8:	e00a      	b.n	8000810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	b2da      	uxtb	r2, r3
 80007fe:	4908      	ldr	r1, [pc, #32]	; (8000820 <__NVIC_SetPriority+0x50>)
 8000800:	79fb      	ldrb	r3, [r7, #7]
 8000802:	f003 030f 	and.w	r3, r3, #15
 8000806:	3b04      	subs	r3, #4
 8000808:	0112      	lsls	r2, r2, #4
 800080a:	b2d2      	uxtb	r2, r2
 800080c:	440b      	add	r3, r1
 800080e:	761a      	strb	r2, [r3, #24]
}
 8000810:	bf00      	nop
 8000812:	370c      	adds	r7, #12
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	e000e100 	.word	0xe000e100
 8000820:	e000ed00 	.word	0xe000ed00

08000824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000824:	b480      	push	{r7}
 8000826:	b089      	sub	sp, #36	; 0x24
 8000828:	af00      	add	r7, sp, #0
 800082a:	60f8      	str	r0, [r7, #12]
 800082c:	60b9      	str	r1, [r7, #8]
 800082e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f003 0307 	and.w	r3, r3, #7
 8000836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	f1c3 0307 	rsb	r3, r3, #7
 800083e:	2b04      	cmp	r3, #4
 8000840:	bf28      	it	cs
 8000842:	2304      	movcs	r3, #4
 8000844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000846:	69fb      	ldr	r3, [r7, #28]
 8000848:	3304      	adds	r3, #4
 800084a:	2b06      	cmp	r3, #6
 800084c:	d902      	bls.n	8000854 <NVIC_EncodePriority+0x30>
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3b03      	subs	r3, #3
 8000852:	e000      	b.n	8000856 <NVIC_EncodePriority+0x32>
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000858:	f04f 32ff 	mov.w	r2, #4294967295
 800085c:	69bb      	ldr	r3, [r7, #24]
 800085e:	fa02 f303 	lsl.w	r3, r2, r3
 8000862:	43da      	mvns	r2, r3
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	401a      	ands	r2, r3
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800086c:	f04f 31ff 	mov.w	r1, #4294967295
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	fa01 f303 	lsl.w	r3, r1, r3
 8000876:	43d9      	mvns	r1, r3
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800087c:	4313      	orrs	r3, r2
         );
}
 800087e:	4618      	mov	r0, r3
 8000880:	3724      	adds	r7, #36	; 0x24
 8000882:	46bd      	mov	sp, r7
 8000884:	bc80      	pop	{r7}
 8000886:	4770      	bx	lr

08000888 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	3b01      	subs	r3, #1
 8000894:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000898:	d301      	bcc.n	800089e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800089a:	2301      	movs	r3, #1
 800089c:	e00f      	b.n	80008be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800089e:	4a0a      	ldr	r2, [pc, #40]	; (80008c8 <SysTick_Config+0x40>)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008a6:	210f      	movs	r1, #15
 80008a8:	f04f 30ff 	mov.w	r0, #4294967295
 80008ac:	f7ff ff90 	bl	80007d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <SysTick_Config+0x40>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008b6:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <SysTick_Config+0x40>)
 80008b8:	2207      	movs	r2, #7
 80008ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008bc:	2300      	movs	r3, #0
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	e000e010 	.word	0xe000e010

080008cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff ff2d 	bl	8000734 <__NVIC_SetPriorityGrouping>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}

080008e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	b086      	sub	sp, #24
 80008e6:	af00      	add	r7, sp, #0
 80008e8:	4603      	mov	r3, r0
 80008ea:	60b9      	str	r1, [r7, #8]
 80008ec:	607a      	str	r2, [r7, #4]
 80008ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008f0:	2300      	movs	r3, #0
 80008f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008f4:	f7ff ff42 	bl	800077c <__NVIC_GetPriorityGrouping>
 80008f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008fa:	687a      	ldr	r2, [r7, #4]
 80008fc:	68b9      	ldr	r1, [r7, #8]
 80008fe:	6978      	ldr	r0, [r7, #20]
 8000900:	f7ff ff90 	bl	8000824 <NVIC_EncodePriority>
 8000904:	4602      	mov	r2, r0
 8000906:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800090a:	4611      	mov	r1, r2
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff ff5f 	bl	80007d0 <__NVIC_SetPriority>
}
 8000912:	bf00      	nop
 8000914:	3718      	adds	r7, #24
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}

0800091a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800091a:	b580      	push	{r7, lr}
 800091c:	b082      	sub	sp, #8
 800091e:	af00      	add	r7, sp, #0
 8000920:	4603      	mov	r3, r0
 8000922:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000924:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000928:	4618      	mov	r0, r3
 800092a:	f7ff ff35 	bl	8000798 <__NVIC_EnableIRQ>
}
 800092e:	bf00      	nop
 8000930:	3708      	adds	r7, #8
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	b082      	sub	sp, #8
 800093a:	af00      	add	r7, sp, #0
 800093c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800093e:	6878      	ldr	r0, [r7, #4]
 8000940:	f7ff ffa2 	bl	8000888 <SysTick_Config>
 8000944:	4603      	mov	r3, r0
}
 8000946:	4618      	mov	r0, r3
 8000948:	3708      	adds	r7, #8
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d101      	bne.n	8000962 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	e059      	b.n	8000a16 <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	461a      	mov	r2, r3
 8000968:	4b2d      	ldr	r3, [pc, #180]	; (8000a20 <HAL_DMA_Init+0xd0>)
 800096a:	429a      	cmp	r2, r3
 800096c:	d80f      	bhi.n	800098e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	461a      	mov	r2, r3
 8000974:	4b2b      	ldr	r3, [pc, #172]	; (8000a24 <HAL_DMA_Init+0xd4>)
 8000976:	4413      	add	r3, r2
 8000978:	4a2b      	ldr	r2, [pc, #172]	; (8000a28 <HAL_DMA_Init+0xd8>)
 800097a:	fba2 2303 	umull	r2, r3, r2, r3
 800097e:	091b      	lsrs	r3, r3, #4
 8000980:	009a      	lsls	r2, r3, #2
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a28      	ldr	r2, [pc, #160]	; (8000a2c <HAL_DMA_Init+0xdc>)
 800098a:	63da      	str	r2, [r3, #60]	; 0x3c
 800098c:	e00e      	b.n	80009ac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <HAL_DMA_Init+0xe0>)
 8000996:	4413      	add	r3, r2
 8000998:	4a23      	ldr	r2, [pc, #140]	; (8000a28 <HAL_DMA_Init+0xd8>)
 800099a:	fba2 2303 	umull	r2, r3, r2, r3
 800099e:	091b      	lsrs	r3, r3, #4
 80009a0:	009a      	lsls	r2, r3, #2
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a22      	ldr	r2, [pc, #136]	; (8000a34 <HAL_DMA_Init+0xe4>)
 80009aa:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2202      	movs	r2, #2
 80009b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80009c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009c6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80009d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80009dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	695b      	ldr	r3, [r3, #20]
 80009e2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	69db      	ldr	r3, [r3, #28]
 80009ee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80009f0:	68fa      	ldr	r2, [r7, #12]
 80009f2:	4313      	orrs	r3, r2
 80009f4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2200      	movs	r2, #0
 8000a02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	2201      	movs	r2, #1
 8000a08:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3714      	adds	r7, #20
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	40026407 	.word	0x40026407
 8000a24:	bffd9ff8 	.word	0xbffd9ff8
 8000a28:	cccccccd 	.word	0xcccccccd
 8000a2c:	40026000 	.word	0x40026000
 8000a30:	bffd9bf8 	.word	0xbffd9bf8
 8000a34:	40026400 	.word	0x40026400

08000a38 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b086      	sub	sp, #24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	60f8      	str	r0, [r7, #12]
 8000a40:	60b9      	str	r1, [r7, #8]
 8000a42:	607a      	str	r2, [r7, #4]
 8000a44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000a46:	2300      	movs	r3, #0
 8000a48:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a50:	2b01      	cmp	r3, #1
 8000a52:	d101      	bne.n	8000a58 <HAL_DMA_Start_IT+0x20>
 8000a54:	2302      	movs	r3, #2
 8000a56:	e04b      	b.n	8000af0 <HAL_DMA_Start_IT+0xb8>
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d13a      	bne.n	8000ae2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	2202      	movs	r2, #2
 8000a70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	2200      	movs	r2, #0
 8000a78:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000a7a:	68fb      	ldr	r3, [r7, #12]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	681a      	ldr	r2, [r3, #0]
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f022 0201 	bic.w	r2, r2, #1
 8000a88:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	687a      	ldr	r2, [r7, #4]
 8000a8e:	68b9      	ldr	r1, [r7, #8]
 8000a90:	68f8      	ldr	r0, [r7, #12]
 8000a92:	f000 f921 	bl	8000cd8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d008      	beq.n	8000ab0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f042 020e 	orr.w	r2, r2, #14
 8000aac:	601a      	str	r2, [r3, #0]
 8000aae:	e00f      	b.n	8000ad0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	f022 0204 	bic.w	r2, r2, #4
 8000abe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000ac0:	68fb      	ldr	r3, [r7, #12]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	681a      	ldr	r2, [r3, #0]
 8000ac6:	68fb      	ldr	r3, [r7, #12]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f042 020a 	orr.w	r2, r2, #10
 8000ace:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f042 0201 	orr.w	r2, r2, #1
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	e005      	b.n	8000aee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000aea:	2302      	movs	r3, #2
 8000aec:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3718      	adds	r7, #24
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b00:	2300      	movs	r3, #0
 8000b02:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b0a:	b2db      	uxtb	r3, r3
 8000b0c:	2b02      	cmp	r3, #2
 8000b0e:	d005      	beq.n	8000b1c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2204      	movs	r2, #4
 8000b14:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000b16:	2301      	movs	r3, #1
 8000b18:	73fb      	strb	r3, [r7, #15]
 8000b1a:	e029      	b.n	8000b70 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	f022 020e 	bic.w	r2, r2, #14
 8000b2a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	f022 0201 	bic.w	r2, r2, #1
 8000b3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	f003 021c 	and.w	r2, r3, #28
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b48:	2101      	movs	r1, #1
 8000b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	2201      	movs	r2, #1
 8000b54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d003      	beq.n	8000b70 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	4798      	blx	r3
    }
  }
  return status;
 8000b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3710      	adds	r7, #16
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}

08000b7a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000b7a:	b580      	push	{r7, lr}
 8000b7c:	b084      	sub	sp, #16
 8000b7e:	af00      	add	r7, sp, #0
 8000b80:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f003 031c 	and.w	r3, r3, #28
 8000b9a:	2204      	movs	r2, #4
 8000b9c:	409a      	lsls	r2, r3
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d026      	beq.n	8000bf4 <HAL_DMA_IRQHandler+0x7a>
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	f003 0304 	and.w	r3, r3, #4
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d021      	beq.n	8000bf4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f003 0320 	and.w	r3, r3, #32
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d107      	bne.n	8000bce <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f022 0204 	bic.w	r2, r2, #4
 8000bcc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	f003 021c 	and.w	r2, r3, #28
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000bda:	2104      	movs	r1, #4
 8000bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000be0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d071      	beq.n	8000cce <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000bf2:	e06c      	b.n	8000cce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf8:	f003 031c 	and.w	r3, r3, #28
 8000bfc:	2202      	movs	r2, #2
 8000bfe:	409a      	lsls	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4013      	ands	r3, r2
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d02e      	beq.n	8000c66 <HAL_DMA_IRQHandler+0xec>
 8000c08:	68bb      	ldr	r3, [r7, #8]
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d029      	beq.n	8000c66 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f003 0320 	and.w	r3, r3, #32
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d10b      	bne.n	8000c38 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	681a      	ldr	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f022 020a 	bic.w	r2, r2, #10
 8000c2e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2201      	movs	r2, #1
 8000c34:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3c:	f003 021c 	and.w	r2, r3, #28
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c44:	2102      	movs	r1, #2
 8000c46:	fa01 f202 	lsl.w	r2, r1, r2
 8000c4a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d038      	beq.n	8000cce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000c64:	e033      	b.n	8000cce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f003 031c 	and.w	r3, r3, #28
 8000c6e:	2208      	movs	r2, #8
 8000c70:	409a      	lsls	r2, r3
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	4013      	ands	r3, r2
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d02a      	beq.n	8000cd0 <HAL_DMA_IRQHandler+0x156>
 8000c7a:	68bb      	ldr	r3, [r7, #8]
 8000c7c:	f003 0308 	and.w	r3, r3, #8
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d025      	beq.n	8000cd0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	f022 020e 	bic.w	r2, r2, #14
 8000c92:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c98:	f003 021c 	and.w	r2, r3, #28
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2201      	movs	r2, #1
 8000cac:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d004      	beq.n	8000cd0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000cce:	bf00      	nop
 8000cd0:	bf00      	nop
}
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	60f8      	str	r0, [r7, #12]
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
 8000ce4:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	f003 021c 	and.w	r2, r3, #28
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	683a      	ldr	r2, [r7, #0]
 8000d00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2b10      	cmp	r3, #16
 8000d08:	d108      	bne.n	8000d1c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	687a      	ldr	r2, [r7, #4]
 8000d10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	68ba      	ldr	r2, [r7, #8]
 8000d18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000d1a:	e007      	b.n	8000d2c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	68ba      	ldr	r2, [r7, #8]
 8000d22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	60da      	str	r2, [r3, #12]
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bc80      	pop	{r7}
 8000d34:	4770      	bx	lr
	...

08000d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000d38:	b480      	push	{r7}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d4e:	e14e      	b.n	8000fee <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	2101      	movs	r1, #1
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f000 8140 	beq.w	8000fe8 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	2b02      	cmp	r3, #2
 8000d6e:	d003      	beq.n	8000d78 <HAL_GPIO_Init+0x40>
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	2b12      	cmp	r3, #18
 8000d76:	d123      	bne.n	8000dc0 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	08da      	lsrs	r2, r3, #3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	3208      	adds	r2, #8
 8000d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	f003 0307 	and.w	r3, r3, #7
 8000d8c:	009b      	lsls	r3, r3, #2
 8000d8e:	220f      	movs	r2, #15
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	693a      	ldr	r2, [r7, #16]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	691a      	ldr	r2, [r3, #16]
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	08da      	lsrs	r2, r3, #3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3208      	adds	r2, #8
 8000dba:	6939      	ldr	r1, [r7, #16]
 8000dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0203 	and.w	r2, r3, #3
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	693a      	ldr	r2, [r7, #16]
 8000df2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	2b01      	cmp	r3, #1
 8000dfa:	d00b      	beq.n	8000e14 <HAL_GPIO_Init+0xdc>
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	2b02      	cmp	r3, #2
 8000e02:	d007      	beq.n	8000e14 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e08:	2b11      	cmp	r3, #17
 8000e0a:	d003      	beq.n	8000e14 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	2b12      	cmp	r3, #18
 8000e12:	d130      	bne.n	8000e76 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	689b      	ldr	r3, [r3, #8]
 8000e18:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	005b      	lsls	r3, r3, #1
 8000e1e:	2203      	movs	r2, #3
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	43db      	mvns	r3, r3
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	4013      	ands	r3, r2
 8000e2a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	68da      	ldr	r2, [r3, #12]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	693a      	ldr	r2, [r7, #16]
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	43db      	mvns	r3, r3
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	091b      	lsrs	r3, r3, #4
 8000e60:	f003 0201 	and.w	r2, r3, #1
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	68db      	ldr	r3, [r3, #12]
 8000e7a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	005b      	lsls	r3, r3, #1
 8000e80:	2203      	movs	r2, #3
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43db      	mvns	r3, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	689a      	ldr	r2, [r3, #8]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 809a 	beq.w	8000fe8 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb4:	4b54      	ldr	r3, [pc, #336]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000eb6:	6a1b      	ldr	r3, [r3, #32]
 8000eb8:	4a53      	ldr	r2, [pc, #332]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	6213      	str	r3, [r2, #32]
 8000ec0:	4b51      	ldr	r3, [pc, #324]	; (8001008 <HAL_GPIO_Init+0x2d0>)
 8000ec2:	6a1b      	ldr	r3, [r3, #32]
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8000ecc:	4a4f      	ldr	r2, [pc, #316]	; (800100c <HAL_GPIO_Init+0x2d4>)
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	089b      	lsrs	r3, r3, #2
 8000ed2:	3302      	adds	r3, #2
 8000ed4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	220f      	movs	r2, #15
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	43db      	mvns	r3, r3
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a47      	ldr	r2, [pc, #284]	; (8001010 <HAL_GPIO_Init+0x2d8>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d013      	beq.n	8000f20 <HAL_GPIO_Init+0x1e8>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a46      	ldr	r2, [pc, #280]	; (8001014 <HAL_GPIO_Init+0x2dc>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d00d      	beq.n	8000f1c <HAL_GPIO_Init+0x1e4>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a45      	ldr	r2, [pc, #276]	; (8001018 <HAL_GPIO_Init+0x2e0>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d007      	beq.n	8000f18 <HAL_GPIO_Init+0x1e0>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a44      	ldr	r2, [pc, #272]	; (800101c <HAL_GPIO_Init+0x2e4>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d101      	bne.n	8000f14 <HAL_GPIO_Init+0x1dc>
 8000f10:	2303      	movs	r3, #3
 8000f12:	e006      	b.n	8000f22 <HAL_GPIO_Init+0x1ea>
 8000f14:	2305      	movs	r3, #5
 8000f16:	e004      	b.n	8000f22 <HAL_GPIO_Init+0x1ea>
 8000f18:	2302      	movs	r3, #2
 8000f1a:	e002      	b.n	8000f22 <HAL_GPIO_Init+0x1ea>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e000      	b.n	8000f22 <HAL_GPIO_Init+0x1ea>
 8000f20:	2300      	movs	r3, #0
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	f002 0203 	and.w	r2, r2, #3
 8000f28:	0092      	lsls	r2, r2, #2
 8000f2a:	4093      	lsls	r3, r2
 8000f2c:	693a      	ldr	r2, [r7, #16]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f32:	4936      	ldr	r1, [pc, #216]	; (800100c <HAL_GPIO_Init+0x2d4>)
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	3302      	adds	r3, #2
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f40:	4b37      	ldr	r3, [pc, #220]	; (8001020 <HAL_GPIO_Init+0x2e8>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	693a      	ldr	r2, [r7, #16]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d003      	beq.n	8000f64 <HAL_GPIO_Init+0x22c>
        {
          SET_BIT(temp, iocurrent); 
 8000f5c:	693a      	ldr	r2, [r7, #16]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f64:	4a2e      	ldr	r2, [pc, #184]	; (8001020 <HAL_GPIO_Init+0x2e8>)
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f6a:	4b2d      	ldr	r3, [pc, #180]	; (8001020 <HAL_GPIO_Init+0x2e8>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	4013      	ands	r3, r2
 8000f78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d003      	beq.n	8000f8e <HAL_GPIO_Init+0x256>
        {
          SET_BIT(temp, iocurrent); 
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f8e:	4a24      	ldr	r2, [pc, #144]	; (8001020 <HAL_GPIO_Init+0x2e8>)
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f94:	4b22      	ldr	r3, [pc, #136]	; (8001020 <HAL_GPIO_Init+0x2e8>)
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <HAL_GPIO_Init+0x280>
        {
          SET_BIT(temp, iocurrent); 
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fb8:	4a19      	ldr	r2, [pc, #100]	; (8001020 <HAL_GPIO_Init+0x2e8>)
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fbe:	4b18      	ldr	r3, [pc, #96]	; (8001020 <HAL_GPIO_Init+0x2e8>)
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x2aa>
        {
          SET_BIT(temp, iocurrent); 
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fe2:	4a0f      	ldr	r2, [pc, #60]	; (8001020 <HAL_GPIO_Init+0x2e8>)
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	3301      	adds	r3, #1
 8000fec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f47f aea9 	bne.w	8000d50 <HAL_GPIO_Init+0x18>
  } 
}
 8000ffe:	bf00      	nop
 8001000:	371c      	adds	r7, #28
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	40023800 	.word	0x40023800
 800100c:	40010000 	.word	0x40010000
 8001010:	40020000 	.word	0x40020000
 8001014:	40020400 	.word	0x40020400
 8001018:	40020800 	.word	0x40020800
 800101c:	40020c00 	.word	0x40020c00
 8001020:	40010400 	.word	0x40010400

08001024 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	460b      	mov	r3, r1
 800102e:	807b      	strh	r3, [r7, #2]
 8001030:	4613      	mov	r3, r2
 8001032:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001034:	787b      	ldrb	r3, [r7, #1]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800103a:	887a      	ldrh	r2, [r7, #2]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001040:	e003      	b.n	800104a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001042:	887b      	ldrh	r3, [r7, #2]
 8001044:	041a      	lsls	r2, r3, #16
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	619a      	str	r2, [r3, #24]
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	bc80      	pop	{r7}
 8001052:	4770      	bx	lr

08001054 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b088      	sub	sp, #32
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d101      	bne.n	8001066 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e31d      	b.n	80016a2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001066:	4b94      	ldr	r3, [pc, #592]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f003 030c 	and.w	r3, r3, #12
 800106e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001070:	4b91      	ldr	r3, [pc, #580]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001078:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f003 0301 	and.w	r3, r3, #1
 8001082:	2b00      	cmp	r3, #0
 8001084:	d07b      	beq.n	800117e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	2b08      	cmp	r3, #8
 800108a:	d006      	beq.n	800109a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800108c:	69bb      	ldr	r3, [r7, #24]
 800108e:	2b0c      	cmp	r3, #12
 8001090:	d10f      	bne.n	80010b2 <HAL_RCC_OscConfig+0x5e>
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001098:	d10b      	bne.n	80010b2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800109a:	4b87      	ldr	r3, [pc, #540]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d06a      	beq.n	800117c <HAL_RCC_OscConfig+0x128>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d166      	bne.n	800117c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e2f7      	b.n	80016a2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d106      	bne.n	80010c8 <HAL_RCC_OscConfig+0x74>
 80010ba:	4b7f      	ldr	r3, [pc, #508]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4a7e      	ldr	r2, [pc, #504]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 80010c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	e02d      	b.n	8001124 <HAL_RCC_OscConfig+0xd0>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d10c      	bne.n	80010ea <HAL_RCC_OscConfig+0x96>
 80010d0:	4b79      	ldr	r3, [pc, #484]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a78      	ldr	r2, [pc, #480]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 80010d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010da:	6013      	str	r3, [r2, #0]
 80010dc:	4b76      	ldr	r3, [pc, #472]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a75      	ldr	r2, [pc, #468]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 80010e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010e6:	6013      	str	r3, [r2, #0]
 80010e8:	e01c      	b.n	8001124 <HAL_RCC_OscConfig+0xd0>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	2b05      	cmp	r3, #5
 80010f0:	d10c      	bne.n	800110c <HAL_RCC_OscConfig+0xb8>
 80010f2:	4b71      	ldr	r3, [pc, #452]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a70      	ldr	r2, [pc, #448]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 80010f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010fc:	6013      	str	r3, [r2, #0]
 80010fe:	4b6e      	ldr	r3, [pc, #440]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a6d      	ldr	r2, [pc, #436]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 8001104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001108:	6013      	str	r3, [r2, #0]
 800110a:	e00b      	b.n	8001124 <HAL_RCC_OscConfig+0xd0>
 800110c:	4b6a      	ldr	r3, [pc, #424]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a69      	ldr	r2, [pc, #420]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 8001112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001116:	6013      	str	r3, [r2, #0]
 8001118:	4b67      	ldr	r3, [pc, #412]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a66      	ldr	r2, [pc, #408]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 800111e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001122:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d013      	beq.n	8001154 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800112c:	f7ff faf8 	bl	8000720 <HAL_GetTick>
 8001130:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001132:	e008      	b.n	8001146 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001134:	f7ff faf4 	bl	8000720 <HAL_GetTick>
 8001138:	4602      	mov	r2, r0
 800113a:	693b      	ldr	r3, [r7, #16]
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b64      	cmp	r3, #100	; 0x64
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e2ad      	b.n	80016a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001146:	4b5c      	ldr	r3, [pc, #368]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d0f0      	beq.n	8001134 <HAL_RCC_OscConfig+0xe0>
 8001152:	e014      	b.n	800117e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001154:	f7ff fae4 	bl	8000720 <HAL_GetTick>
 8001158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800115a:	e008      	b.n	800116e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800115c:	f7ff fae0 	bl	8000720 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	2b64      	cmp	r3, #100	; 0x64
 8001168:	d901      	bls.n	800116e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800116a:	2303      	movs	r3, #3
 800116c:	e299      	b.n	80016a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800116e:	4b52      	ldr	r3, [pc, #328]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d1f0      	bne.n	800115c <HAL_RCC_OscConfig+0x108>
 800117a:	e000      	b.n	800117e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800117c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 0302 	and.w	r3, r3, #2
 8001186:	2b00      	cmp	r3, #0
 8001188:	d05a      	beq.n	8001240 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	2b04      	cmp	r3, #4
 800118e:	d005      	beq.n	800119c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	2b0c      	cmp	r3, #12
 8001194:	d119      	bne.n	80011ca <HAL_RCC_OscConfig+0x176>
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d116      	bne.n	80011ca <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800119c:	4b46      	ldr	r3, [pc, #280]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0302 	and.w	r3, r3, #2
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <HAL_RCC_OscConfig+0x160>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d001      	beq.n	80011b4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e276      	b.n	80016a2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b4:	4b40      	ldr	r3, [pc, #256]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	691b      	ldr	r3, [r3, #16]
 80011c0:	021b      	lsls	r3, r3, #8
 80011c2:	493d      	ldr	r1, [pc, #244]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c8:	e03a      	b.n	8001240 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d020      	beq.n	8001214 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011d2:	4b3a      	ldr	r3, [pc, #232]	; (80012bc <HAL_RCC_OscConfig+0x268>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff faa2 	bl	8000720 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011e0:	f7ff fa9e 	bl	8000720 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e257      	b.n	80016a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80011f2:	4b31      	ldr	r3, [pc, #196]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0f0      	beq.n	80011e0 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011fe:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	021b      	lsls	r3, r3, #8
 800120c:	492a      	ldr	r1, [pc, #168]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 800120e:	4313      	orrs	r3, r2
 8001210:	604b      	str	r3, [r1, #4]
 8001212:	e015      	b.n	8001240 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001214:	4b29      	ldr	r3, [pc, #164]	; (80012bc <HAL_RCC_OscConfig+0x268>)
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800121a:	f7ff fa81 	bl	8000720 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001222:	f7ff fa7d 	bl	8000720 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e236      	b.n	80016a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001234:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1f0      	bne.n	8001222 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0310 	and.w	r3, r3, #16
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 80b8 	beq.w	80013be <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d170      	bne.n	8001336 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <HAL_RCC_OscConfig+0x218>
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d101      	bne.n	800126c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e21a      	b.n	80016a2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a1a      	ldr	r2, [r3, #32]
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001278:	429a      	cmp	r2, r3
 800127a:	d921      	bls.n	80012c0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a1b      	ldr	r3, [r3, #32]
 8001280:	4618      	mov	r0, r3
 8001282:	f000 fbd5 	bl	8001a30 <RCC_SetFlashLatencyFromMSIRange>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800128c:	2301      	movs	r3, #1
 800128e:	e208      	b.n	80016a2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a1b      	ldr	r3, [r3, #32]
 800129c:	4906      	ldr	r1, [pc, #24]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 800129e:	4313      	orrs	r3, r2
 80012a0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012a2:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	061b      	lsls	r3, r3, #24
 80012b0:	4901      	ldr	r1, [pc, #4]	; (80012b8 <HAL_RCC_OscConfig+0x264>)
 80012b2:	4313      	orrs	r3, r2
 80012b4:	604b      	str	r3, [r1, #4]
 80012b6:	e020      	b.n	80012fa <HAL_RCC_OscConfig+0x2a6>
 80012b8:	40023800 	.word	0x40023800
 80012bc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012c0:	4ba4      	ldr	r3, [pc, #656]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6a1b      	ldr	r3, [r3, #32]
 80012cc:	49a1      	ldr	r1, [pc, #644]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 80012ce:	4313      	orrs	r3, r2
 80012d0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012d2:	4ba0      	ldr	r3, [pc, #640]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	69db      	ldr	r3, [r3, #28]
 80012de:	061b      	lsls	r3, r3, #24
 80012e0:	499c      	ldr	r1, [pc, #624]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 80012e2:	4313      	orrs	r3, r2
 80012e4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6a1b      	ldr	r3, [r3, #32]
 80012ea:	4618      	mov	r0, r3
 80012ec:	f000 fba0 	bl	8001a30 <RCC_SetFlashLatencyFromMSIRange>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e1d3      	b.n	80016a2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6a1b      	ldr	r3, [r3, #32]
 80012fe:	0b5b      	lsrs	r3, r3, #13
 8001300:	3301      	adds	r3, #1
 8001302:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800130a:	4a92      	ldr	r2, [pc, #584]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 800130c:	6892      	ldr	r2, [r2, #8]
 800130e:	0912      	lsrs	r2, r2, #4
 8001310:	f002 020f 	and.w	r2, r2, #15
 8001314:	4990      	ldr	r1, [pc, #576]	; (8001558 <HAL_RCC_OscConfig+0x504>)
 8001316:	5c8a      	ldrb	r2, [r1, r2]
 8001318:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800131a:	4a90      	ldr	r2, [pc, #576]	; (800155c <HAL_RCC_OscConfig+0x508>)
 800131c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800131e:	4b90      	ldr	r3, [pc, #576]	; (8001560 <HAL_RCC_OscConfig+0x50c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff f9b0 	bl	8000688 <HAL_InitTick>
 8001328:	4603      	mov	r3, r0
 800132a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d045      	beq.n	80013be <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	e1b5      	b.n	80016a2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d029      	beq.n	8001392 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800133e:	4b89      	ldr	r3, [pc, #548]	; (8001564 <HAL_RCC_OscConfig+0x510>)
 8001340:	2201      	movs	r2, #1
 8001342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001344:	f7ff f9ec 	bl	8000720 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800134c:	f7ff f9e8 	bl	8000720 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e1a1      	b.n	80016a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800135e:	4b7d      	ldr	r3, [pc, #500]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001366:	2b00      	cmp	r3, #0
 8001368:	d0f0      	beq.n	800134c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800136a:	4b7a      	ldr	r3, [pc, #488]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6a1b      	ldr	r3, [r3, #32]
 8001376:	4977      	ldr	r1, [pc, #476]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 8001378:	4313      	orrs	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800137c:	4b75      	ldr	r3, [pc, #468]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69db      	ldr	r3, [r3, #28]
 8001388:	061b      	lsls	r3, r3, #24
 800138a:	4972      	ldr	r1, [pc, #456]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 800138c:	4313      	orrs	r3, r2
 800138e:	604b      	str	r3, [r1, #4]
 8001390:	e015      	b.n	80013be <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001392:	4b74      	ldr	r3, [pc, #464]	; (8001564 <HAL_RCC_OscConfig+0x510>)
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001398:	f7ff f9c2 	bl	8000720 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013a0:	f7ff f9be 	bl	8000720 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e177      	b.n	80016a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013b2:	4b68      	ldr	r3, [pc, #416]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d030      	beq.n	800142c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d016      	beq.n	8001400 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d2:	4b65      	ldr	r3, [pc, #404]	; (8001568 <HAL_RCC_OscConfig+0x514>)
 80013d4:	2201      	movs	r2, #1
 80013d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d8:	f7ff f9a2 	bl	8000720 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013de:	e008      	b.n	80013f2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013e0:	f7ff f99e 	bl	8000720 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e157      	b.n	80016a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80013f2:	4b58      	ldr	r3, [pc, #352]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 80013f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d0f0      	beq.n	80013e0 <HAL_RCC_OscConfig+0x38c>
 80013fe:	e015      	b.n	800142c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001400:	4b59      	ldr	r3, [pc, #356]	; (8001568 <HAL_RCC_OscConfig+0x514>)
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001406:	f7ff f98b 	bl	8000720 <HAL_GetTick>
 800140a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800140c:	e008      	b.n	8001420 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800140e:	f7ff f987 	bl	8000720 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	2b02      	cmp	r3, #2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e140      	b.n	80016a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001420:	4b4c      	ldr	r3, [pc, #304]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 8001422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001424:	f003 0302 	and.w	r3, r3, #2
 8001428:	2b00      	cmp	r3, #0
 800142a:	d1f0      	bne.n	800140e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0304 	and.w	r3, r3, #4
 8001434:	2b00      	cmp	r3, #0
 8001436:	f000 80b5 	beq.w	80015a4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800143a:	2300      	movs	r3, #0
 800143c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800143e:	4b45      	ldr	r3, [pc, #276]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d10d      	bne.n	8001466 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800144a:	4b42      	ldr	r3, [pc, #264]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	4a41      	ldr	r2, [pc, #260]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 8001450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001454:	6253      	str	r3, [r2, #36]	; 0x24
 8001456:	4b3f      	ldr	r3, [pc, #252]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 8001458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800145e:	60bb      	str	r3, [r7, #8]
 8001460:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001462:	2301      	movs	r3, #1
 8001464:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001466:	4b41      	ldr	r3, [pc, #260]	; (800156c <HAL_RCC_OscConfig+0x518>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800146e:	2b00      	cmp	r3, #0
 8001470:	d118      	bne.n	80014a4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001472:	4b3e      	ldr	r3, [pc, #248]	; (800156c <HAL_RCC_OscConfig+0x518>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a3d      	ldr	r2, [pc, #244]	; (800156c <HAL_RCC_OscConfig+0x518>)
 8001478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800147c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800147e:	f7ff f94f 	bl	8000720 <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001486:	f7ff f94b 	bl	8000720 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b64      	cmp	r3, #100	; 0x64
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e104      	b.n	80016a2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001498:	4b34      	ldr	r3, [pc, #208]	; (800156c <HAL_RCC_OscConfig+0x518>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b01      	cmp	r3, #1
 80014aa:	d106      	bne.n	80014ba <HAL_RCC_OscConfig+0x466>
 80014ac:	4b29      	ldr	r3, [pc, #164]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 80014ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b0:	4a28      	ldr	r2, [pc, #160]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 80014b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b6:	6353      	str	r3, [r2, #52]	; 0x34
 80014b8:	e02d      	b.n	8001516 <HAL_RCC_OscConfig+0x4c2>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689b      	ldr	r3, [r3, #8]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d10c      	bne.n	80014dc <HAL_RCC_OscConfig+0x488>
 80014c2:	4b24      	ldr	r3, [pc, #144]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 80014c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c6:	4a23      	ldr	r2, [pc, #140]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 80014c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80014cc:	6353      	str	r3, [r2, #52]	; 0x34
 80014ce:	4b21      	ldr	r3, [pc, #132]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 80014d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d2:	4a20      	ldr	r2, [pc, #128]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 80014d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014d8:	6353      	str	r3, [r2, #52]	; 0x34
 80014da:	e01c      	b.n	8001516 <HAL_RCC_OscConfig+0x4c2>
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2b05      	cmp	r3, #5
 80014e2:	d10c      	bne.n	80014fe <HAL_RCC_OscConfig+0x4aa>
 80014e4:	4b1b      	ldr	r3, [pc, #108]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 80014e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e8:	4a1a      	ldr	r2, [pc, #104]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 80014ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ee:	6353      	str	r3, [r2, #52]	; 0x34
 80014f0:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 80014f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014f4:	4a17      	ldr	r2, [pc, #92]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 80014f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014fa:	6353      	str	r3, [r2, #52]	; 0x34
 80014fc:	e00b      	b.n	8001516 <HAL_RCC_OscConfig+0x4c2>
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 8001500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001502:	4a14      	ldr	r2, [pc, #80]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 8001504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001508:	6353      	str	r3, [r2, #52]	; 0x34
 800150a:	4b12      	ldr	r3, [pc, #72]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 800150c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800150e:	4a11      	ldr	r2, [pc, #68]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 8001510:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001514:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d015      	beq.n	800154a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151e:	f7ff f8ff 	bl	8000720 <HAL_GetTick>
 8001522:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001524:	e00a      	b.n	800153c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001526:	f7ff f8fb 	bl	8000720 <HAL_GetTick>
 800152a:	4602      	mov	r2, r0
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	f241 3288 	movw	r2, #5000	; 0x1388
 8001534:	4293      	cmp	r3, r2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e0b2      	b.n	80016a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_RCC_OscConfig+0x500>)
 800153e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0ee      	beq.n	8001526 <HAL_RCC_OscConfig+0x4d2>
 8001548:	e023      	b.n	8001592 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800154a:	f7ff f8e9 	bl	8000720 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001550:	e019      	b.n	8001586 <HAL_RCC_OscConfig+0x532>
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	080025c8 	.word	0x080025c8
 800155c:	20000000 	.word	0x20000000
 8001560:	20000004 	.word	0x20000004
 8001564:	42470020 	.word	0x42470020
 8001568:	42470680 	.word	0x42470680
 800156c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001570:	f7ff f8d6 	bl	8000720 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	f241 3288 	movw	r2, #5000	; 0x1388
 800157e:	4293      	cmp	r3, r2
 8001580:	d901      	bls.n	8001586 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	e08d      	b.n	80016a2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001586:	4b49      	ldr	r3, [pc, #292]	; (80016ac <HAL_RCC_OscConfig+0x658>)
 8001588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800158a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800158e:	2b00      	cmp	r3, #0
 8001590:	d1ee      	bne.n	8001570 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001592:	7ffb      	ldrb	r3, [r7, #31]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d105      	bne.n	80015a4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001598:	4b44      	ldr	r3, [pc, #272]	; (80016ac <HAL_RCC_OscConfig+0x658>)
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	4a43      	ldr	r2, [pc, #268]	; (80016ac <HAL_RCC_OscConfig+0x658>)
 800159e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d079      	beq.n	80016a0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	2b0c      	cmp	r3, #12
 80015b0:	d056      	beq.n	8001660 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d13b      	bne.n	8001632 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <HAL_RCC_OscConfig+0x65c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff f8ae 	bl	8000720 <HAL_GetTick>
 80015c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015c6:	e008      	b.n	80015da <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c8:	f7ff f8aa 	bl	8000720 <HAL_GetTick>
 80015cc:	4602      	mov	r2, r0
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	1ad3      	subs	r3, r2, r3
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d901      	bls.n	80015da <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80015d6:	2303      	movs	r3, #3
 80015d8:	e063      	b.n	80016a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80015da:	4b34      	ldr	r3, [pc, #208]	; (80016ac <HAL_RCC_OscConfig+0x658>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d1f0      	bne.n	80015c8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015e6:	4b31      	ldr	r3, [pc, #196]	; (80016ac <HAL_RCC_OscConfig+0x658>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f6:	4319      	orrs	r1, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fc:	430b      	orrs	r3, r1
 80015fe:	492b      	ldr	r1, [pc, #172]	; (80016ac <HAL_RCC_OscConfig+0x658>)
 8001600:	4313      	orrs	r3, r2
 8001602:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001604:	4b2a      	ldr	r3, [pc, #168]	; (80016b0 <HAL_RCC_OscConfig+0x65c>)
 8001606:	2201      	movs	r2, #1
 8001608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160a:	f7ff f889 	bl	8000720 <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001612:	f7ff f885 	bl	8000720 <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e03e      	b.n	80016a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001624:	4b21      	ldr	r3, [pc, #132]	; (80016ac <HAL_RCC_OscConfig+0x658>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x5be>
 8001630:	e036      	b.n	80016a0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001632:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <HAL_RCC_OscConfig+0x65c>)
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7ff f872 	bl	8000720 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001640:	f7ff f86e 	bl	8000720 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e027      	b.n	80016a2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001652:	4b16      	ldr	r3, [pc, #88]	; (80016ac <HAL_RCC_OscConfig+0x658>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800165a:	2b00      	cmp	r3, #0
 800165c:	d1f0      	bne.n	8001640 <HAL_RCC_OscConfig+0x5ec>
 800165e:	e01f      	b.n	80016a0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001664:	2b01      	cmp	r3, #1
 8001666:	d101      	bne.n	800166c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e01a      	b.n	80016a2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <HAL_RCC_OscConfig+0x658>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800167c:	429a      	cmp	r2, r3
 800167e:	d10d      	bne.n	800169c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800168a:	429a      	cmp	r2, r3
 800168c:	d106      	bne.n	800169c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001698:	429a      	cmp	r2, r3
 800169a:	d001      	beq.n	80016a0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	e000      	b.n	80016a2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80016a0:	2300      	movs	r3, #0
}
 80016a2:	4618      	mov	r0, r3
 80016a4:	3720      	adds	r7, #32
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800
 80016b0:	42470060 	.word	0x42470060

080016b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d101      	bne.n	80016c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	e11a      	b.n	80018fe <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016c8:	4b8f      	ldr	r3, [pc, #572]	; (8001908 <HAL_RCC_ClockConfig+0x254>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0301 	and.w	r3, r3, #1
 80016d0:	683a      	ldr	r2, [r7, #0]
 80016d2:	429a      	cmp	r2, r3
 80016d4:	d919      	bls.n	800170a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d105      	bne.n	80016e8 <HAL_RCC_ClockConfig+0x34>
 80016dc:	4b8a      	ldr	r3, [pc, #552]	; (8001908 <HAL_RCC_ClockConfig+0x254>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a89      	ldr	r2, [pc, #548]	; (8001908 <HAL_RCC_ClockConfig+0x254>)
 80016e2:	f043 0304 	orr.w	r3, r3, #4
 80016e6:	6013      	str	r3, [r2, #0]
 80016e8:	4b87      	ldr	r3, [pc, #540]	; (8001908 <HAL_RCC_ClockConfig+0x254>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f023 0201 	bic.w	r2, r3, #1
 80016f0:	4985      	ldr	r1, [pc, #532]	; (8001908 <HAL_RCC_ClockConfig+0x254>)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f8:	4b83      	ldr	r3, [pc, #524]	; (8001908 <HAL_RCC_ClockConfig+0x254>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	683a      	ldr	r2, [r7, #0]
 8001702:	429a      	cmp	r2, r3
 8001704:	d001      	beq.n	800170a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e0f9      	b.n	80018fe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	2b00      	cmp	r3, #0
 8001714:	d008      	beq.n	8001728 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001716:	4b7d      	ldr	r3, [pc, #500]	; (800190c <HAL_RCC_ClockConfig+0x258>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	497a      	ldr	r1, [pc, #488]	; (800190c <HAL_RCC_ClockConfig+0x258>)
 8001724:	4313      	orrs	r3, r2
 8001726:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 808e 	beq.w	8001852 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	2b02      	cmp	r3, #2
 800173c:	d107      	bne.n	800174e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800173e:	4b73      	ldr	r3, [pc, #460]	; (800190c <HAL_RCC_ClockConfig+0x258>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d121      	bne.n	800178e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
 800174c:	e0d7      	b.n	80018fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b03      	cmp	r3, #3
 8001754:	d107      	bne.n	8001766 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001756:	4b6d      	ldr	r3, [pc, #436]	; (800190c <HAL_RCC_ClockConfig+0x258>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d115      	bne.n	800178e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e0cb      	b.n	80018fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d107      	bne.n	800177e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800176e:	4b67      	ldr	r3, [pc, #412]	; (800190c <HAL_RCC_ClockConfig+0x258>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f003 0302 	and.w	r3, r3, #2
 8001776:	2b00      	cmp	r3, #0
 8001778:	d109      	bne.n	800178e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e0bf      	b.n	80018fe <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800177e:	4b63      	ldr	r3, [pc, #396]	; (800190c <HAL_RCC_ClockConfig+0x258>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e0b7      	b.n	80018fe <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800178e:	4b5f      	ldr	r3, [pc, #380]	; (800190c <HAL_RCC_ClockConfig+0x258>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	f023 0203 	bic.w	r2, r3, #3
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	495c      	ldr	r1, [pc, #368]	; (800190c <HAL_RCC_ClockConfig+0x258>)
 800179c:	4313      	orrs	r3, r2
 800179e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017a0:	f7fe ffbe 	bl	8000720 <HAL_GetTick>
 80017a4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d112      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017ae:	e00a      	b.n	80017c6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b0:	f7fe ffb6 	bl	8000720 <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80017be:	4293      	cmp	r3, r2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e09b      	b.n	80018fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017c6:	4b51      	ldr	r3, [pc, #324]	; (800190c <HAL_RCC_ClockConfig+0x258>)
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	f003 030c 	and.w	r3, r3, #12
 80017ce:	2b08      	cmp	r3, #8
 80017d0:	d1ee      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xfc>
 80017d2:	e03e      	b.n	8001852 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b03      	cmp	r3, #3
 80017da:	d112      	bne.n	8001802 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017dc:	e00a      	b.n	80017f4 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017de:	f7fe ff9f 	bl	8000720 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e084      	b.n	80018fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017f4:	4b45      	ldr	r3, [pc, #276]	; (800190c <HAL_RCC_ClockConfig+0x258>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f003 030c 	and.w	r3, r3, #12
 80017fc:	2b0c      	cmp	r3, #12
 80017fe:	d1ee      	bne.n	80017de <HAL_RCC_ClockConfig+0x12a>
 8001800:	e027      	b.n	8001852 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2b01      	cmp	r3, #1
 8001808:	d11d      	bne.n	8001846 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800180a:	e00a      	b.n	8001822 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800180c:	f7fe ff88 	bl	8000720 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	f241 3288 	movw	r2, #5000	; 0x1388
 800181a:	4293      	cmp	r3, r2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e06d      	b.n	80018fe <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001822:	4b3a      	ldr	r3, [pc, #232]	; (800190c <HAL_RCC_ClockConfig+0x258>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 030c 	and.w	r3, r3, #12
 800182a:	2b04      	cmp	r3, #4
 800182c:	d1ee      	bne.n	800180c <HAL_RCC_ClockConfig+0x158>
 800182e:	e010      	b.n	8001852 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001830:	f7fe ff76 	bl	8000720 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	f241 3288 	movw	r2, #5000	; 0x1388
 800183e:	4293      	cmp	r3, r2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e05b      	b.n	80018fe <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001846:	4b31      	ldr	r3, [pc, #196]	; (800190c <HAL_RCC_ClockConfig+0x258>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	f003 030c 	and.w	r3, r3, #12
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1ee      	bne.n	8001830 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001852:	4b2d      	ldr	r3, [pc, #180]	; (8001908 <HAL_RCC_ClockConfig+0x254>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0301 	and.w	r3, r3, #1
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d219      	bcs.n	8001894 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d105      	bne.n	8001872 <HAL_RCC_ClockConfig+0x1be>
 8001866:	4b28      	ldr	r3, [pc, #160]	; (8001908 <HAL_RCC_ClockConfig+0x254>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a27      	ldr	r2, [pc, #156]	; (8001908 <HAL_RCC_ClockConfig+0x254>)
 800186c:	f043 0304 	orr.w	r3, r3, #4
 8001870:	6013      	str	r3, [r2, #0]
 8001872:	4b25      	ldr	r3, [pc, #148]	; (8001908 <HAL_RCC_ClockConfig+0x254>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f023 0201 	bic.w	r2, r3, #1
 800187a:	4923      	ldr	r1, [pc, #140]	; (8001908 <HAL_RCC_ClockConfig+0x254>)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	4313      	orrs	r3, r2
 8001880:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001882:	4b21      	ldr	r3, [pc, #132]	; (8001908 <HAL_RCC_ClockConfig+0x254>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d001      	beq.n	8001894 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e034      	b.n	80018fe <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d008      	beq.n	80018b2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018a0:	4b1a      	ldr	r3, [pc, #104]	; (800190c <HAL_RCC_ClockConfig+0x258>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	4917      	ldr	r1, [pc, #92]	; (800190c <HAL_RCC_ClockConfig+0x258>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f003 0308 	and.w	r3, r3, #8
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d009      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018be:	4b13      	ldr	r3, [pc, #76]	; (800190c <HAL_RCC_ClockConfig+0x258>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	691b      	ldr	r3, [r3, #16]
 80018ca:	00db      	lsls	r3, r3, #3
 80018cc:	490f      	ldr	r1, [pc, #60]	; (800190c <HAL_RCC_ClockConfig+0x258>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018d2:	f000 f823 	bl	800191c <HAL_RCC_GetSysClockFreq>
 80018d6:	4601      	mov	r1, r0
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <HAL_RCC_ClockConfig+0x258>)
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	091b      	lsrs	r3, r3, #4
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	4a0b      	ldr	r2, [pc, #44]	; (8001910 <HAL_RCC_ClockConfig+0x25c>)
 80018e4:	5cd3      	ldrb	r3, [r2, r3]
 80018e6:	fa21 f303 	lsr.w	r3, r1, r3
 80018ea:	4a0a      	ldr	r2, [pc, #40]	; (8001914 <HAL_RCC_ClockConfig+0x260>)
 80018ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_RCC_ClockConfig+0x264>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fec8 	bl	8000688 <HAL_InitTick>
 80018f8:	4603      	mov	r3, r0
 80018fa:	72fb      	strb	r3, [r7, #11]

  return status;
 80018fc:	7afb      	ldrb	r3, [r7, #11]
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3710      	adds	r7, #16
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	40023c00 	.word	0x40023c00
 800190c:	40023800 	.word	0x40023800
 8001910:	080025c8 	.word	0x080025c8
 8001914:	20000000 	.word	0x20000000
 8001918:	20000004 	.word	0x20000004

0800191c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001922:	4b26      	ldr	r3, [pc, #152]	; (80019bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b08      	cmp	r3, #8
 8001930:	d006      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x24>
 8001932:	2b0c      	cmp	r3, #12
 8001934:	d007      	beq.n	8001946 <HAL_RCC_GetSysClockFreq+0x2a>
 8001936:	2b04      	cmp	r3, #4
 8001938:	d12c      	bne.n	8001994 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800193a:	4b21      	ldr	r3, [pc, #132]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800193c:	613b      	str	r3, [r7, #16]
      break;
 800193e:	e037      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001940:	4b20      	ldr	r3, [pc, #128]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001942:	613b      	str	r3, [r7, #16]
      break;
 8001944:	e034      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	0c9b      	lsrs	r3, r3, #18
 800194a:	f003 030f 	and.w	r3, r3, #15
 800194e:	4a1e      	ldr	r2, [pc, #120]	; (80019c8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001950:	5cd3      	ldrb	r3, [r2, r3]
 8001952:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	0d9b      	lsrs	r3, r3, #22
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	3301      	adds	r3, #1
 800195e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001960:	4b16      	ldr	r3, [pc, #88]	; (80019bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d008      	beq.n	800197e <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	4a15      	ldr	r2, [pc, #84]	; (80019c4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001970:	fb02 f203 	mul.w	r2, r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	fbb2 f3f3 	udiv	r3, r2, r3
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	e007      	b.n	800198e <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	4a0f      	ldr	r2, [pc, #60]	; (80019c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001982:	fb02 f203 	mul.w	r2, r2, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	fbb2 f3f3 	udiv	r3, r2, r3
 800198c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	613b      	str	r3, [r7, #16]
      break;
 8001992:	e00d      	b.n	80019b0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001994:	4b09      	ldr	r3, [pc, #36]	; (80019bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	0b5b      	lsrs	r3, r3, #13
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	3301      	adds	r3, #1
 80019a4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	613b      	str	r3, [r7, #16]
      break;
 80019ae:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019b0:	693b      	ldr	r3, [r7, #16]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	371c      	adds	r7, #28
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr
 80019bc:	40023800 	.word	0x40023800
 80019c0:	00f42400 	.word	0x00f42400
 80019c4:	007a1200 	.word	0x007a1200
 80019c8:	080025bc 	.word	0x080025bc

080019cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80019d0:	4b02      	ldr	r3, [pc, #8]	; (80019dc <HAL_RCC_GetHCLKFreq+0x10>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	20000000 	.word	0x20000000

080019e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80019e4:	f7ff fff2 	bl	80019cc <HAL_RCC_GetHCLKFreq>
 80019e8:	4601      	mov	r1, r0
 80019ea:	4b05      	ldr	r3, [pc, #20]	; (8001a00 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	0a1b      	lsrs	r3, r3, #8
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	4a03      	ldr	r2, [pc, #12]	; (8001a04 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019f6:	5cd3      	ldrb	r3, [r2, r3]
 80019f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40023800 	.word	0x40023800
 8001a04:	080025d8 	.word	0x080025d8

08001a08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a0c:	f7ff ffde 	bl	80019cc <HAL_RCC_GetHCLKFreq>
 8001a10:	4601      	mov	r1, r0
 8001a12:	4b05      	ldr	r3, [pc, #20]	; (8001a28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	0adb      	lsrs	r3, r3, #11
 8001a18:	f003 0307 	and.w	r3, r3, #7
 8001a1c:	4a03      	ldr	r2, [pc, #12]	; (8001a2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a1e:	5cd3      	ldrb	r3, [r2, r3]
 8001a20:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	080025d8 	.word	0x080025d8

08001a30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b087      	sub	sp, #28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001a38:	2300      	movs	r3, #0
 8001a3a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001a3c:	4b29      	ldr	r3, [pc, #164]	; (8001ae4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d12c      	bne.n	8001aa2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001a48:	4b26      	ldr	r3, [pc, #152]	; (8001ae4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d005      	beq.n	8001a60 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001a54:	4b24      	ldr	r3, [pc, #144]	; (8001ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	e016      	b.n	8001a8e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a60:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a64:	4a1f      	ldr	r2, [pc, #124]	; (8001ae4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6a:	6253      	str	r3, [r2, #36]	; 0x24
 8001a6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001a78:	4b1b      	ldr	r3, [pc, #108]	; (8001ae8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001a80:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a82:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a86:	4a17      	ldr	r2, [pc, #92]	; (8001ae4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001a88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a8c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001a94:	d105      	bne.n	8001aa2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001a9c:	d101      	bne.n	8001aa2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d105      	bne.n	8001ab4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001aa8:	4b10      	ldr	r3, [pc, #64]	; (8001aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a0f      	ldr	r2, [pc, #60]	; (8001aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001aae:	f043 0304 	orr.w	r3, r3, #4
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f023 0201 	bic.w	r2, r3, #1
 8001abc:	490b      	ldr	r1, [pc, #44]	; (8001aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ac4:	4b09      	ldr	r3, [pc, #36]	; (8001aec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	693a      	ldr	r2, [r7, #16]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d001      	beq.n	8001ad6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e000      	b.n	8001ad8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	371c      	adds	r7, #28
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40007000 	.word	0x40007000
 8001aec:	40023c00 	.word	0x40023c00

08001af0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e03f      	b.n	8001b82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d106      	bne.n	8001b1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	f7fe fd02 	bl	8000520 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2224      	movs	r2, #36	; 0x24
 8001b20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68da      	ldr	r2, [r3, #12]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001b32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 fb81 	bl	800223c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	691a      	ldr	r2, [r3, #16]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001b48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	695a      	ldr	r2, [r3, #20]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001b58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68da      	ldr	r2, [r3, #12]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001b68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2220      	movs	r2, #32
 8001b74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <HAL_UART_Receive_DMA>:
  * @param  Size Amount of data to be received
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b086      	sub	sp, #24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	4613      	mov	r3, r2
 8001b98:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b20      	cmp	r3, #32
 8001ba4:	d166      	bne.n	8001c74 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d002      	beq.n	8001bb2 <HAL_UART_Receive_DMA+0x26>
 8001bac:	88fb      	ldrh	r3, [r7, #6]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e05f      	b.n	8001c76 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_UART_Receive_DMA+0x38>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e058      	b.n	8001c76 <HAL_UART_Receive_DMA+0xea>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001bcc:	68ba      	ldr	r2, [r7, #8]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	88fa      	ldrh	r2, [r7, #6]
 8001bd6:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	2200      	movs	r2, #0
 8001bdc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2222      	movs	r2, #34	; 0x22
 8001be2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bea:	4a25      	ldr	r2, [pc, #148]	; (8001c80 <HAL_UART_Receive_DMA+0xf4>)
 8001bec:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf2:	4a24      	ldr	r2, [pc, #144]	; (8001c84 <HAL_UART_Receive_DMA+0xf8>)
 8001bf4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bfa:	4a23      	ldr	r2, [pc, #140]	; (8001c88 <HAL_UART_Receive_DMA+0xfc>)
 8001bfc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c02:	2200      	movs	r2, #0
 8001c04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the DMA channel */
    tmp = (uint32_t *)&pData;
 8001c06:	f107 0308 	add.w	r3, r7, #8
 8001c0a:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	3304      	adds	r3, #4
 8001c16:	4619      	mov	r1, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	f7fe ff0b 	bl	8000a38 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	613b      	str	r3, [r7, #16]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	613b      	str	r3, [r7, #16]
 8001c36:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68da      	ldr	r2, [r3, #12]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c4e:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	695a      	ldr	r2, [r3, #20]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f042 0201 	orr.w	r2, r2, #1
 8001c5e:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	695a      	ldr	r2, [r3, #20]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c6e:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	e000      	b.n	8001c76 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8001c74:	2302      	movs	r3, #2
  }
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	08001ebb 	.word	0x08001ebb
 8001c84:	08001f23 	.word	0x08001f23
 8001c88:	08001f3f 	.word	0x08001f3f

08001c8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b088      	sub	sp, #32
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	f003 030f 	and.w	r3, r3, #15
 8001cba:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10d      	bne.n	8001cde <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	f003 0320 	and.w	r3, r3, #32
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d008      	beq.n	8001cde <HAL_UART_IRQHandler+0x52>
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	f003 0320 	and.w	r3, r3, #32
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 fa2e 	bl	8002138 <UART_Receive_IT>
      return;
 8001cdc:	e0cc      	b.n	8001e78 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f000 80ab 	beq.w	8001e3c <HAL_UART_IRQHandler+0x1b0>
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f003 0301 	and.w	r3, r3, #1
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d105      	bne.n	8001cfc <HAL_UART_IRQHandler+0x70>
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 80a0 	beq.w	8001e3c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	f003 0301 	and.w	r3, r3, #1
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00a      	beq.n	8001d1c <HAL_UART_IRQHandler+0x90>
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d005      	beq.n	8001d1c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d14:	f043 0201 	orr.w	r2, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f003 0304 	and.w	r3, r3, #4
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d00a      	beq.n	8001d3c <HAL_UART_IRQHandler+0xb0>
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d34:	f043 0202 	orr.w	r2, r3, #2
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00a      	beq.n	8001d5c <HAL_UART_IRQHandler+0xd0>
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	f003 0301 	and.w	r3, r3, #1
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d54:	f043 0204 	orr.w	r2, r3, #4
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d00a      	beq.n	8001d7c <HAL_UART_IRQHandler+0xf0>
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d005      	beq.n	8001d7c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d74:	f043 0208 	orr.w	r2, r3, #8
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d078      	beq.n	8001e76 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f003 0320 	and.w	r3, r3, #32
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d007      	beq.n	8001d9e <HAL_UART_IRQHandler+0x112>
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	f003 0320 	and.w	r3, r3, #32
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f9cd 	bl	8002138 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001da8:	2b40      	cmp	r3, #64	; 0x40
 8001daa:	bf0c      	ite	eq
 8001dac:	2301      	moveq	r3, #1
 8001dae:	2300      	movne	r3, #0
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db8:	f003 0308 	and.w	r3, r3, #8
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d102      	bne.n	8001dc6 <HAL_UART_IRQHandler+0x13a>
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d031      	beq.n	8001e2a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f000 f918 	bl	8001ffc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd6:	2b40      	cmp	r3, #64	; 0x40
 8001dd8:	d123      	bne.n	8001e22 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	695a      	ldr	r2, [r3, #20]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001de8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d013      	beq.n	8001e1a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001df6:	4a22      	ldr	r2, [pc, #136]	; (8001e80 <HAL_UART_IRQHandler+0x1f4>)
 8001df8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7fe fe7a 	bl	8000af8 <HAL_DMA_Abort_IT>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d016      	beq.n	8001e38 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e14:	4610      	mov	r0, r2
 8001e16:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e18:	e00e      	b.n	8001e38 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f844 	bl	8001ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e20:	e00a      	b.n	8001e38 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f840 	bl	8001ea8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e28:	e006      	b.n	8001e38 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f83c 	bl	8001ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001e36:	e01e      	b.n	8001e76 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e38:	bf00      	nop
    return;
 8001e3a:	e01c      	b.n	8001e76 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d008      	beq.n	8001e58 <HAL_UART_IRQHandler+0x1cc>
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f904 	bl	800205e <UART_Transmit_IT>
    return;
 8001e56:	e00f      	b.n	8001e78 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00a      	beq.n	8001e78 <HAL_UART_IRQHandler+0x1ec>
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d005      	beq.n	8001e78 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f000 f94b 	bl	8002108 <UART_EndTransmit_IT>
    return;
 8001e72:	bf00      	nop
 8001e74:	e000      	b.n	8001e78 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001e76:	bf00      	nop
  }
}
 8001e78:	3720      	adds	r7, #32
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	08002037 	.word	0x08002037

08001e84 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0320 	and.w	r3, r3, #32
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d11e      	bne.n	8001f14 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eea:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	695a      	ldr	r2, [r3, #20]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f022 0201 	bic.w	r2, r2, #1
 8001efa:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	695a      	ldr	r2, [r3, #20]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f0a:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2220      	movs	r2, #32
 8001f10:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f7fe fa23 	bl	8000360 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f7ff ffb0 	bl	8001e96 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001f36:	bf00      	nop
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b084      	sub	sp, #16
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8001f46:	2300      	movs	r3, #0
 8001f48:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	695b      	ldr	r3, [r3, #20]
 8001f56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f5a:	2b80      	cmp	r3, #128	; 0x80
 8001f5c:	bf0c      	ite	eq
 8001f5e:	2301      	moveq	r3, #1
 8001f60:	2300      	movne	r3, #0
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8001f66:	68bb      	ldr	r3, [r7, #8]
 8001f68:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	2b21      	cmp	r3, #33	; 0x21
 8001f70:	d108      	bne.n	8001f84 <UART_DMAError+0x46>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d005      	beq.n	8001f84 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8001f7e:	68b8      	ldr	r0, [r7, #8]
 8001f80:	f000 f827 	bl	8001fd2 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	695b      	ldr	r3, [r3, #20]
 8001f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f8e:	2b40      	cmp	r3, #64	; 0x40
 8001f90:	bf0c      	ite	eq
 8001f92:	2301      	moveq	r3, #1
 8001f94:	2300      	movne	r3, #0
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b22      	cmp	r3, #34	; 0x22
 8001fa4:	d108      	bne.n	8001fb8 <UART_DMAError+0x7a>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d005      	beq.n	8001fb8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8001fb2:	68b8      	ldr	r0, [r7, #8]
 8001fb4:	f000 f822 	bl	8001ffc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fbc:	f043 0210 	orr.w	r2, r3, #16
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001fc4:	68b8      	ldr	r0, [r7, #8]
 8001fc6:	f7ff ff6f 	bl	8001ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001fca:	bf00      	nop
 8001fcc:	3710      	adds	r7, #16
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8001fd2:	b480      	push	{r7}
 8001fd4:	b083      	sub	sp, #12
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	68da      	ldr	r2, [r3, #12]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001fe8:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2220      	movs	r2, #32
 8001fee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8001ff2:	bf00      	nop
 8001ff4:	370c      	adds	r7, #12
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bc80      	pop	{r7}
 8001ffa:	4770      	bx	lr

08001ffc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002012:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	695a      	ldr	r2, [r3, #20]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2220      	movs	r2, #32
 8002028:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr

08002036 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2200      	movs	r2, #0
 8002048:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f7ff ff29 	bl	8001ea8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002056:	bf00      	nop
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800205e:	b480      	push	{r7}
 8002060:	b085      	sub	sp, #20
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b21      	cmp	r3, #33	; 0x21
 8002070:	d144      	bne.n	80020fc <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800207a:	d11a      	bne.n	80020b2 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a1b      	ldr	r3, [r3, #32]
 8002080:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	881b      	ldrh	r3, [r3, #0]
 8002086:	461a      	mov	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002090:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d105      	bne.n	80020a6 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a1b      	ldr	r3, [r3, #32]
 800209e:	1c9a      	adds	r2, r3, #2
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	621a      	str	r2, [r3, #32]
 80020a4:	e00e      	b.n	80020c4 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	1c5a      	adds	r2, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	621a      	str	r2, [r3, #32]
 80020b0:	e008      	b.n	80020c4 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	1c59      	adds	r1, r3, #1
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6211      	str	r1, [r2, #32]
 80020bc:	781a      	ldrb	r2, [r3, #0]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	3b01      	subs	r3, #1
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	4619      	mov	r1, r3
 80020d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10f      	bne.n	80020f8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	e000      	b.n	80020fe <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80020fc:	2302      	movs	r3, #2
  }
}
 80020fe:	4618      	mov	r0, r3
 8002100:	3714      	adds	r7, #20
 8002102:	46bd      	mov	sp, r7
 8002104:	bc80      	pop	{r7}
 8002106:	4770      	bx	lr

08002108 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800211e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff feab 	bl	8001e84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002146:	b2db      	uxtb	r3, r3
 8002148:	2b22      	cmp	r3, #34	; 0x22
 800214a:	d171      	bne.n	8002230 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002154:	d123      	bne.n	800219e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	691b      	ldr	r3, [r3, #16]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10e      	bne.n	8002182 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	b29b      	uxth	r3, r3
 800216c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002170:	b29a      	uxth	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217a:	1c9a      	adds	r2, r3, #2
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	629a      	str	r2, [r3, #40]	; 0x28
 8002180:	e029      	b.n	80021d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	b29b      	uxth	r3, r3
 800218a:	b2db      	uxtb	r3, r3
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002196:	1c5a      	adds	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	629a      	str	r2, [r3, #40]	; 0x28
 800219c:	e01b      	b.n	80021d6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d10a      	bne.n	80021bc <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	6858      	ldr	r0, [r3, #4]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b0:	1c59      	adds	r1, r3, #1
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	6291      	str	r1, [r2, #40]	; 0x28
 80021b6:	b2c2      	uxtb	r2, r0
 80021b8:	701a      	strb	r2, [r3, #0]
 80021ba:	e00c      	b.n	80021d6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021c8:	1c58      	adds	r0, r3, #1
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	6288      	str	r0, [r1, #40]	; 0x28
 80021ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021da:	b29b      	uxth	r3, r3
 80021dc:	3b01      	subs	r3, #1
 80021de:	b29b      	uxth	r3, r3
 80021e0:	687a      	ldr	r2, [r7, #4]
 80021e2:	4619      	mov	r1, r3
 80021e4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d120      	bne.n	800222c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f022 0220 	bic.w	r2, r2, #32
 80021f8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002208:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695a      	ldr	r2, [r3, #20]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f022 0201 	bic.w	r2, r2, #1
 8002218:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2220      	movs	r2, #32
 800221e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f7fe f89c 	bl	8000360 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	e002      	b.n	8002232 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800222c:	2300      	movs	r3, #0
 800222e:	e000      	b.n	8002232 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8002230:	2302      	movs	r3, #2
  }
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	691b      	ldr	r3, [r3, #16]
 800224a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689a      	ldr	r2, [r3, #8]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	431a      	orrs	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	69db      	ldr	r3, [r3, #28]
 800226e:	4313      	orrs	r3, r2
 8002270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800227c:	f023 030c 	bic.w	r3, r3, #12
 8002280:	687a      	ldr	r2, [r7, #4]
 8002282:	6812      	ldr	r2, [r2, #0]
 8002284:	68f9      	ldr	r1, [r7, #12]
 8002286:	430b      	orrs	r3, r1
 8002288:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	695b      	ldr	r3, [r3, #20]
 8002290:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	699a      	ldr	r2, [r3, #24]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	430a      	orrs	r2, r1
 800229e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	69db      	ldr	r3, [r3, #28]
 80022a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022a8:	f040 80a5 	bne.w	80023f6 <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4aa4      	ldr	r2, [pc, #656]	; (8002544 <UART_SetConfig+0x308>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d14f      	bne.n	8002356 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80022b6:	f7ff fba7 	bl	8001a08 <HAL_RCC_GetPCLK2Freq>
 80022ba:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022bc:	68ba      	ldr	r2, [r7, #8]
 80022be:	4613      	mov	r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	4413      	add	r3, r2
 80022c4:	009a      	lsls	r2, r3, #2
 80022c6:	441a      	add	r2, r3
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d2:	4a9d      	ldr	r2, [pc, #628]	; (8002548 <UART_SetConfig+0x30c>)
 80022d4:	fba2 2303 	umull	r2, r3, r2, r3
 80022d8:	095b      	lsrs	r3, r3, #5
 80022da:	0119      	lsls	r1, r3, #4
 80022dc:	68ba      	ldr	r2, [r7, #8]
 80022de:	4613      	mov	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	009a      	lsls	r2, r3, #2
 80022e6:	441a      	add	r2, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80022f2:	4b95      	ldr	r3, [pc, #596]	; (8002548 <UART_SetConfig+0x30c>)
 80022f4:	fba3 0302 	umull	r0, r3, r3, r2
 80022f8:	095b      	lsrs	r3, r3, #5
 80022fa:	2064      	movs	r0, #100	; 0x64
 80022fc:	fb00 f303 	mul.w	r3, r0, r3
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	00db      	lsls	r3, r3, #3
 8002304:	3332      	adds	r3, #50	; 0x32
 8002306:	4a90      	ldr	r2, [pc, #576]	; (8002548 <UART_SetConfig+0x30c>)
 8002308:	fba2 2303 	umull	r2, r3, r2, r3
 800230c:	095b      	lsrs	r3, r3, #5
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002314:	4419      	add	r1, r3
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	4613      	mov	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	4413      	add	r3, r2
 800231e:	009a      	lsls	r2, r3, #2
 8002320:	441a      	add	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fbb2 f2f3 	udiv	r2, r2, r3
 800232c:	4b86      	ldr	r3, [pc, #536]	; (8002548 <UART_SetConfig+0x30c>)
 800232e:	fba3 0302 	umull	r0, r3, r3, r2
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	2064      	movs	r0, #100	; 0x64
 8002336:	fb00 f303 	mul.w	r3, r0, r3
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	00db      	lsls	r3, r3, #3
 800233e:	3332      	adds	r3, #50	; 0x32
 8002340:	4a81      	ldr	r2, [pc, #516]	; (8002548 <UART_SetConfig+0x30c>)
 8002342:	fba2 2303 	umull	r2, r3, r2, r3
 8002346:	095b      	lsrs	r3, r3, #5
 8002348:	f003 0207 	and.w	r2, r3, #7
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	440a      	add	r2, r1
 8002352:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002354:	e0f1      	b.n	800253a <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002356:	f7ff fb43 	bl	80019e0 <HAL_RCC_GetPCLK1Freq>
 800235a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	4613      	mov	r3, r2
 8002360:	009b      	lsls	r3, r3, #2
 8002362:	4413      	add	r3, r2
 8002364:	009a      	lsls	r2, r3, #2
 8002366:	441a      	add	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002372:	4a75      	ldr	r2, [pc, #468]	; (8002548 <UART_SetConfig+0x30c>)
 8002374:	fba2 2303 	umull	r2, r3, r2, r3
 8002378:	095b      	lsrs	r3, r3, #5
 800237a:	0119      	lsls	r1, r3, #4
 800237c:	68ba      	ldr	r2, [r7, #8]
 800237e:	4613      	mov	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	4413      	add	r3, r2
 8002384:	009a      	lsls	r2, r3, #2
 8002386:	441a      	add	r2, r3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002392:	4b6d      	ldr	r3, [pc, #436]	; (8002548 <UART_SetConfig+0x30c>)
 8002394:	fba3 0302 	umull	r0, r3, r3, r2
 8002398:	095b      	lsrs	r3, r3, #5
 800239a:	2064      	movs	r0, #100	; 0x64
 800239c:	fb00 f303 	mul.w	r3, r0, r3
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	00db      	lsls	r3, r3, #3
 80023a4:	3332      	adds	r3, #50	; 0x32
 80023a6:	4a68      	ldr	r2, [pc, #416]	; (8002548 <UART_SetConfig+0x30c>)
 80023a8:	fba2 2303 	umull	r2, r3, r2, r3
 80023ac:	095b      	lsrs	r3, r3, #5
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80023b4:	4419      	add	r1, r3
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	009a      	lsls	r2, r3, #2
 80023c0:	441a      	add	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023cc:	4b5e      	ldr	r3, [pc, #376]	; (8002548 <UART_SetConfig+0x30c>)
 80023ce:	fba3 0302 	umull	r0, r3, r3, r2
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	2064      	movs	r0, #100	; 0x64
 80023d6:	fb00 f303 	mul.w	r3, r0, r3
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	00db      	lsls	r3, r3, #3
 80023de:	3332      	adds	r3, #50	; 0x32
 80023e0:	4a59      	ldr	r2, [pc, #356]	; (8002548 <UART_SetConfig+0x30c>)
 80023e2:	fba2 2303 	umull	r2, r3, r2, r3
 80023e6:	095b      	lsrs	r3, r3, #5
 80023e8:	f003 0207 	and.w	r2, r3, #7
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	440a      	add	r2, r1
 80023f2:	609a      	str	r2, [r3, #8]
}
 80023f4:	e0a1      	b.n	800253a <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a52      	ldr	r2, [pc, #328]	; (8002544 <UART_SetConfig+0x308>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d14e      	bne.n	800249e <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002400:	f7ff fb02 	bl	8001a08 <HAL_RCC_GetPCLK2Freq>
 8002404:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	4613      	mov	r3, r2
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	4413      	add	r3, r2
 800240e:	009a      	lsls	r2, r3, #2
 8002410:	441a      	add	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	fbb2 f3f3 	udiv	r3, r2, r3
 800241c:	4a4a      	ldr	r2, [pc, #296]	; (8002548 <UART_SetConfig+0x30c>)
 800241e:	fba2 2303 	umull	r2, r3, r2, r3
 8002422:	095b      	lsrs	r3, r3, #5
 8002424:	0119      	lsls	r1, r3, #4
 8002426:	68ba      	ldr	r2, [r7, #8]
 8002428:	4613      	mov	r3, r2
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	4413      	add	r3, r2
 800242e:	009a      	lsls	r2, r3, #2
 8002430:	441a      	add	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	fbb2 f2f3 	udiv	r2, r2, r3
 800243c:	4b42      	ldr	r3, [pc, #264]	; (8002548 <UART_SetConfig+0x30c>)
 800243e:	fba3 0302 	umull	r0, r3, r3, r2
 8002442:	095b      	lsrs	r3, r3, #5
 8002444:	2064      	movs	r0, #100	; 0x64
 8002446:	fb00 f303 	mul.w	r3, r0, r3
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	011b      	lsls	r3, r3, #4
 800244e:	3332      	adds	r3, #50	; 0x32
 8002450:	4a3d      	ldr	r2, [pc, #244]	; (8002548 <UART_SetConfig+0x30c>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	095b      	lsrs	r3, r3, #5
 8002458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800245c:	4419      	add	r1, r3
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	4613      	mov	r3, r2
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4413      	add	r3, r2
 8002466:	009a      	lsls	r2, r3, #2
 8002468:	441a      	add	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	fbb2 f2f3 	udiv	r2, r2, r3
 8002474:	4b34      	ldr	r3, [pc, #208]	; (8002548 <UART_SetConfig+0x30c>)
 8002476:	fba3 0302 	umull	r0, r3, r3, r2
 800247a:	095b      	lsrs	r3, r3, #5
 800247c:	2064      	movs	r0, #100	; 0x64
 800247e:	fb00 f303 	mul.w	r3, r0, r3
 8002482:	1ad3      	subs	r3, r2, r3
 8002484:	011b      	lsls	r3, r3, #4
 8002486:	3332      	adds	r3, #50	; 0x32
 8002488:	4a2f      	ldr	r2, [pc, #188]	; (8002548 <UART_SetConfig+0x30c>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	095b      	lsrs	r3, r3, #5
 8002490:	f003 020f 	and.w	r2, r3, #15
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	440a      	add	r2, r1
 800249a:	609a      	str	r2, [r3, #8]
}
 800249c:	e04d      	b.n	800253a <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 800249e:	f7ff fa9f 	bl	80019e0 <HAL_RCC_GetPCLK1Freq>
 80024a2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	4613      	mov	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	009a      	lsls	r2, r3, #2
 80024ae:	441a      	add	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ba:	4a23      	ldr	r2, [pc, #140]	; (8002548 <UART_SetConfig+0x30c>)
 80024bc:	fba2 2303 	umull	r2, r3, r2, r3
 80024c0:	095b      	lsrs	r3, r3, #5
 80024c2:	0119      	lsls	r1, r3, #4
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	009a      	lsls	r2, r3, #2
 80024ce:	441a      	add	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80024da:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <UART_SetConfig+0x30c>)
 80024dc:	fba3 0302 	umull	r0, r3, r3, r2
 80024e0:	095b      	lsrs	r3, r3, #5
 80024e2:	2064      	movs	r0, #100	; 0x64
 80024e4:	fb00 f303 	mul.w	r3, r0, r3
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	3332      	adds	r3, #50	; 0x32
 80024ee:	4a16      	ldr	r2, [pc, #88]	; (8002548 <UART_SetConfig+0x30c>)
 80024f0:	fba2 2303 	umull	r2, r3, r2, r3
 80024f4:	095b      	lsrs	r3, r3, #5
 80024f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024fa:	4419      	add	r1, r3
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	4613      	mov	r3, r2
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4413      	add	r3, r2
 8002504:	009a      	lsls	r2, r3, #2
 8002506:	441a      	add	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <UART_SetConfig+0x30c>)
 8002514:	fba3 0302 	umull	r0, r3, r3, r2
 8002518:	095b      	lsrs	r3, r3, #5
 800251a:	2064      	movs	r0, #100	; 0x64
 800251c:	fb00 f303 	mul.w	r3, r0, r3
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	3332      	adds	r3, #50	; 0x32
 8002526:	4a08      	ldr	r2, [pc, #32]	; (8002548 <UART_SetConfig+0x30c>)
 8002528:	fba2 2303 	umull	r2, r3, r2, r3
 800252c:	095b      	lsrs	r3, r3, #5
 800252e:	f003 020f 	and.w	r2, r3, #15
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	440a      	add	r2, r1
 8002538:	609a      	str	r2, [r3, #8]
}
 800253a:	bf00      	nop
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40013800 	.word	0x40013800
 8002548:	51eb851f 	.word	0x51eb851f

0800254c <__libc_init_array>:
 800254c:	b570      	push	{r4, r5, r6, lr}
 800254e:	2500      	movs	r5, #0
 8002550:	4e0c      	ldr	r6, [pc, #48]	; (8002584 <__libc_init_array+0x38>)
 8002552:	4c0d      	ldr	r4, [pc, #52]	; (8002588 <__libc_init_array+0x3c>)
 8002554:	1ba4      	subs	r4, r4, r6
 8002556:	10a4      	asrs	r4, r4, #2
 8002558:	42a5      	cmp	r5, r4
 800255a:	d109      	bne.n	8002570 <__libc_init_array+0x24>
 800255c:	f000 f822 	bl	80025a4 <_init>
 8002560:	2500      	movs	r5, #0
 8002562:	4e0a      	ldr	r6, [pc, #40]	; (800258c <__libc_init_array+0x40>)
 8002564:	4c0a      	ldr	r4, [pc, #40]	; (8002590 <__libc_init_array+0x44>)
 8002566:	1ba4      	subs	r4, r4, r6
 8002568:	10a4      	asrs	r4, r4, #2
 800256a:	42a5      	cmp	r5, r4
 800256c:	d105      	bne.n	800257a <__libc_init_array+0x2e>
 800256e:	bd70      	pop	{r4, r5, r6, pc}
 8002570:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002574:	4798      	blx	r3
 8002576:	3501      	adds	r5, #1
 8002578:	e7ee      	b.n	8002558 <__libc_init_array+0xc>
 800257a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800257e:	4798      	blx	r3
 8002580:	3501      	adds	r5, #1
 8002582:	e7f2      	b.n	800256a <__libc_init_array+0x1e>
 8002584:	080025e0 	.word	0x080025e0
 8002588:	080025e0 	.word	0x080025e0
 800258c:	080025e0 	.word	0x080025e0
 8002590:	080025e4 	.word	0x080025e4

08002594 <memset>:
 8002594:	4603      	mov	r3, r0
 8002596:	4402      	add	r2, r0
 8002598:	4293      	cmp	r3, r2
 800259a:	d100      	bne.n	800259e <memset+0xa>
 800259c:	4770      	bx	lr
 800259e:	f803 1b01 	strb.w	r1, [r3], #1
 80025a2:	e7f9      	b.n	8002598 <memset+0x4>

080025a4 <_init>:
 80025a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025a6:	bf00      	nop
 80025a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025aa:	bc08      	pop	{r3}
 80025ac:	469e      	mov	lr, r3
 80025ae:	4770      	bx	lr

080025b0 <_fini>:
 80025b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025b2:	bf00      	nop
 80025b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025b6:	bc08      	pop	{r3}
 80025b8:	469e      	mov	lr, r3
 80025ba:	4770      	bx	lr

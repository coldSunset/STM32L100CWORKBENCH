
L100CDISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001464  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080015a0  080015a0  000115a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015bc  080015bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080015bc  080015bc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015bc  080015bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015bc  080015bc  000115bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015c0  080015c0  000115c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080015c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  080015d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  080015d0  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000355f  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000e69  00000000  00000000  00023594  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000400  00000000  00000000  00024400  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000368  00000000  00000000  00024800  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013bfb  00000000  00000000  00024b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000439a  00000000  00000000  00038763  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00079e7f  00000000  00000000  0003cafd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b697c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dc4  00000000  00000000  000b69f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08001588 	.word	0x08001588

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08001588 	.word	0x08001588

0800017c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b08a      	sub	sp, #40	; 0x28
 8000180:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000182:	f107 0314 	add.w	r3, r7, #20
 8000186:	2200      	movs	r2, #0
 8000188:	601a      	str	r2, [r3, #0]
 800018a:	605a      	str	r2, [r3, #4]
 800018c:	609a      	str	r2, [r3, #8]
 800018e:	60da      	str	r2, [r3, #12]
 8000190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000192:	4b2a      	ldr	r3, [pc, #168]	; (800023c <MX_GPIO_Init+0xc0>)
 8000194:	69db      	ldr	r3, [r3, #28]
 8000196:	4a29      	ldr	r2, [pc, #164]	; (800023c <MX_GPIO_Init+0xc0>)
 8000198:	f043 0304 	orr.w	r3, r3, #4
 800019c:	61d3      	str	r3, [r2, #28]
 800019e:	4b27      	ldr	r3, [pc, #156]	; (800023c <MX_GPIO_Init+0xc0>)
 80001a0:	69db      	ldr	r3, [r3, #28]
 80001a2:	f003 0304 	and.w	r3, r3, #4
 80001a6:	613b      	str	r3, [r7, #16]
 80001a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80001aa:	4b24      	ldr	r3, [pc, #144]	; (800023c <MX_GPIO_Init+0xc0>)
 80001ac:	69db      	ldr	r3, [r3, #28]
 80001ae:	4a23      	ldr	r2, [pc, #140]	; (800023c <MX_GPIO_Init+0xc0>)
 80001b0:	f043 0320 	orr.w	r3, r3, #32
 80001b4:	61d3      	str	r3, [r2, #28]
 80001b6:	4b21      	ldr	r3, [pc, #132]	; (800023c <MX_GPIO_Init+0xc0>)
 80001b8:	69db      	ldr	r3, [r3, #28]
 80001ba:	f003 0320 	and.w	r3, r3, #32
 80001be:	60fb      	str	r3, [r7, #12]
 80001c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001c2:	4b1e      	ldr	r3, [pc, #120]	; (800023c <MX_GPIO_Init+0xc0>)
 80001c4:	69db      	ldr	r3, [r3, #28]
 80001c6:	4a1d      	ldr	r2, [pc, #116]	; (800023c <MX_GPIO_Init+0xc0>)
 80001c8:	f043 0301 	orr.w	r3, r3, #1
 80001cc:	61d3      	str	r3, [r2, #28]
 80001ce:	4b1b      	ldr	r3, [pc, #108]	; (800023c <MX_GPIO_Init+0xc0>)
 80001d0:	69db      	ldr	r3, [r3, #28]
 80001d2:	f003 0301 	and.w	r3, r3, #1
 80001d6:	60bb      	str	r3, [r7, #8]
 80001d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001da:	4b18      	ldr	r3, [pc, #96]	; (800023c <MX_GPIO_Init+0xc0>)
 80001dc:	69db      	ldr	r3, [r3, #28]
 80001de:	4a17      	ldr	r2, [pc, #92]	; (800023c <MX_GPIO_Init+0xc0>)
 80001e0:	f043 0302 	orr.w	r3, r3, #2
 80001e4:	61d3      	str	r3, [r2, #28]
 80001e6:	4b15      	ldr	r3, [pc, #84]	; (800023c <MX_GPIO_Init+0xc0>)
 80001e8:	69db      	ldr	r3, [r3, #28]
 80001ea:	f003 0302 	and.w	r3, r3, #2
 80001ee:	607b      	str	r3, [r7, #4]
 80001f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 80001f2:	2200      	movs	r2, #0
 80001f4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80001f8:	4811      	ldr	r0, [pc, #68]	; (8000240 <MX_GPIO_Init+0xc4>)
 80001fa:	f000 fc4c 	bl	8000a96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001fe:	2301      	movs	r3, #1
 8000200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000202:	4b10      	ldr	r3, [pc, #64]	; (8000244 <MX_GPIO_Init+0xc8>)
 8000204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000206:	2300      	movs	r3, #0
 8000208:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800020a:	f107 0314 	add.w	r3, r7, #20
 800020e:	4619      	mov	r1, r3
 8000210:	480d      	ldr	r0, [pc, #52]	; (8000248 <MX_GPIO_Init+0xcc>)
 8000212:	f000 fab3 	bl	800077c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000216:	f44f 7340 	mov.w	r3, #768	; 0x300
 800021a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800021c:	2301      	movs	r3, #1
 800021e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000220:	2300      	movs	r3, #0
 8000222:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000224:	2300      	movs	r3, #0
 8000226:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000228:	f107 0314 	add.w	r3, r7, #20
 800022c:	4619      	mov	r1, r3
 800022e:	4804      	ldr	r0, [pc, #16]	; (8000240 <MX_GPIO_Init+0xc4>)
 8000230:	f000 faa4 	bl	800077c <HAL_GPIO_Init>

}
 8000234:	bf00      	nop
 8000236:	3728      	adds	r7, #40	; 0x28
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	40023800 	.word	0x40023800
 8000240:	40020800 	.word	0x40020800
 8000244:	10120000 	.word	0x10120000
 8000248:	40020000 	.word	0x40020000

0800024c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800024c:	b580      	push	{r7, lr}
 800024e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000250:	f000 f91f 	bl	8000492 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000254:	f000 f816 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000258:	f7ff ff90 	bl	800017c <MX_GPIO_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 800025c:	2101      	movs	r1, #1
 800025e:	4807      	ldr	r0, [pc, #28]	; (800027c <main+0x30>)
 8000260:	f000 fc02 	bl	8000a68 <HAL_GPIO_ReadPin>
 8000264:	4603      	mov	r3, r0
 8000266:	2b01      	cmp	r3, #1
 8000268:	d1f8      	bne.n	800025c <main+0x10>
	  {
		  while(1)
		  {
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 800026a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800026e:	4804      	ldr	r0, [pc, #16]	; (8000280 <main+0x34>)
 8000270:	f000 fc29 	bl	8000ac6 <HAL_GPIO_TogglePin>
			  HAL_Delay(100);
 8000274:	2064      	movs	r0, #100	; 0x64
 8000276:	f000 f97b 	bl	8000570 <HAL_Delay>
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 800027a:	e7f6      	b.n	800026a <main+0x1e>
 800027c:	40020000 	.word	0x40020000
 8000280:	40020800 	.word	0x40020800

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b092      	sub	sp, #72	; 0x48
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	f107 0314 	add.w	r3, r7, #20
 800028e:	2234      	movs	r2, #52	; 0x34
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f001 f970 	bl	8001578 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000298:	463b      	mov	r3, r7
 800029a:	2200      	movs	r2, #0
 800029c:	601a      	str	r2, [r3, #0]
 800029e:	605a      	str	r2, [r3, #4]
 80002a0:	609a      	str	r2, [r3, #8]
 80002a2:	60da      	str	r2, [r3, #12]
 80002a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002a6:	4b1d      	ldr	r3, [pc, #116]	; (800031c <SystemClock_Config+0x98>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80002ae:	4a1b      	ldr	r2, [pc, #108]	; (800031c <SystemClock_Config+0x98>)
 80002b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002b4:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002b6:	2302      	movs	r3, #2
 80002b8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ba:	2301      	movs	r3, #1
 80002bc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002be:	2310      	movs	r3, #16
 80002c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c2:	2302      	movs	r3, #2
 80002c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c6:	2300      	movs	r3, #0
 80002c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80002ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80002d0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80002d4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d6:	f107 0314 	add.w	r3, r7, #20
 80002da:	4618      	mov	r0, r3
 80002dc:	f000 fc0c 	bl	8000af8 <HAL_RCC_OscConfig>
 80002e0:	4603      	mov	r3, r0
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002e6:	f000 f81b 	bl	8000320 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ea:	230f      	movs	r3, #15
 80002ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ee:	2303      	movs	r3, #3
 80002f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002fa:	2300      	movs	r3, #0
 80002fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002fe:	463b      	mov	r3, r7
 8000300:	2101      	movs	r1, #1
 8000302:	4618      	mov	r0, r3
 8000304:	f000 ff28 	bl	8001158 <HAL_RCC_ClockConfig>
 8000308:	4603      	mov	r3, r0
 800030a:	2b00      	cmp	r3, #0
 800030c:	d001      	beq.n	8000312 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800030e:	f000 f807 	bl	8000320 <Error_Handler>
  }
}
 8000312:	bf00      	nop
 8000314:	3748      	adds	r7, #72	; 0x48
 8000316:	46bd      	mov	sp, r7
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	40007000 	.word	0x40007000

08000320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000324:	bf00      	nop
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr

0800032c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000332:	4b15      	ldr	r3, [pc, #84]	; (8000388 <HAL_MspInit+0x5c>)
 8000334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000336:	4a14      	ldr	r2, [pc, #80]	; (8000388 <HAL_MspInit+0x5c>)
 8000338:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800033c:	6253      	str	r3, [r2, #36]	; 0x24
 800033e:	4b12      	ldr	r3, [pc, #72]	; (8000388 <HAL_MspInit+0x5c>)
 8000340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000342:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000346:	60fb      	str	r3, [r7, #12]
 8000348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800034a:	4b0f      	ldr	r3, [pc, #60]	; (8000388 <HAL_MspInit+0x5c>)
 800034c:	6a1b      	ldr	r3, [r3, #32]
 800034e:	4a0e      	ldr	r2, [pc, #56]	; (8000388 <HAL_MspInit+0x5c>)
 8000350:	f043 0301 	orr.w	r3, r3, #1
 8000354:	6213      	str	r3, [r2, #32]
 8000356:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <HAL_MspInit+0x5c>)
 8000358:	6a1b      	ldr	r3, [r3, #32]
 800035a:	f003 0301 	and.w	r3, r3, #1
 800035e:	60bb      	str	r3, [r7, #8]
 8000360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000362:	4b09      	ldr	r3, [pc, #36]	; (8000388 <HAL_MspInit+0x5c>)
 8000364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000366:	4a08      	ldr	r2, [pc, #32]	; (8000388 <HAL_MspInit+0x5c>)
 8000368:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800036c:	6253      	str	r3, [r2, #36]	; 0x24
 800036e:	4b06      	ldr	r3, [pc, #24]	; (8000388 <HAL_MspInit+0x5c>)
 8000370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000372:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000376:	607b      	str	r3, [r7, #4]
 8000378:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800037a:	2007      	movs	r0, #7
 800037c:	f000 f9ca 	bl	8000714 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000380:	bf00      	nop
 8000382:	3710      	adds	r7, #16
 8000384:	46bd      	mov	sp, r7
 8000386:	bd80      	pop	{r7, pc}
 8000388:	40023800 	.word	0x40023800

0800038c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	bc80      	pop	{r7}
 8000396:	4770      	bx	lr

08000398 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800039c:	e7fe      	b.n	800039c <HardFault_Handler+0x4>

0800039e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800039e:	b480      	push	{r7}
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003a2:	e7fe      	b.n	80003a2 <MemManage_Handler+0x4>

080003a4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003a8:	e7fe      	b.n	80003a8 <BusFault_Handler+0x4>

080003aa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003aa:	b480      	push	{r7}
 80003ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003ae:	e7fe      	b.n	80003ae <UsageFault_Handler+0x4>

080003b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003b0:	b480      	push	{r7}
 80003b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bc80      	pop	{r7}
 80003ba:	4770      	bx	lr

080003bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bc80      	pop	{r7}
 80003c6:	4770      	bx	lr

080003c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80003cc:	bf00      	nop
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bc80      	pop	{r7}
 80003d2:	4770      	bx	lr

080003d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003d8:	f000 f8ae 	bl	8000538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}

080003e0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80003e4:	4b15      	ldr	r3, [pc, #84]	; (800043c <SystemInit+0x5c>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a14      	ldr	r2, [pc, #80]	; (800043c <SystemInit+0x5c>)
 80003ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003ee:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80003f0:	4b12      	ldr	r3, [pc, #72]	; (800043c <SystemInit+0x5c>)
 80003f2:	689a      	ldr	r2, [r3, #8]
 80003f4:	4911      	ldr	r1, [pc, #68]	; (800043c <SystemInit+0x5c>)
 80003f6:	4b12      	ldr	r3, [pc, #72]	; (8000440 <SystemInit+0x60>)
 80003f8:	4013      	ands	r3, r2
 80003fa:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80003fc:	4b0f      	ldr	r3, [pc, #60]	; (800043c <SystemInit+0x5c>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a0e      	ldr	r2, [pc, #56]	; (800043c <SystemInit+0x5c>)
 8000402:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8000406:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800040a:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800040c:	4b0b      	ldr	r3, [pc, #44]	; (800043c <SystemInit+0x5c>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a0a      	ldr	r2, [pc, #40]	; (800043c <SystemInit+0x5c>)
 8000412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000416:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000418:	4b08      	ldr	r3, [pc, #32]	; (800043c <SystemInit+0x5c>)
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	4a07      	ldr	r2, [pc, #28]	; (800043c <SystemInit+0x5c>)
 800041e:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000422:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000424:	4b05      	ldr	r3, [pc, #20]	; (800043c <SystemInit+0x5c>)
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800042a:	4b06      	ldr	r3, [pc, #24]	; (8000444 <SystemInit+0x64>)
 800042c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000430:	609a      	str	r2, [r3, #8]
#endif
}
 8000432:	bf00      	nop
 8000434:	46bd      	mov	sp, r7
 8000436:	bc80      	pop	{r7}
 8000438:	4770      	bx	lr
 800043a:	bf00      	nop
 800043c:	40023800 	.word	0x40023800
 8000440:	88ffc00c 	.word	0x88ffc00c
 8000444:	e000ed00 	.word	0xe000ed00

08000448 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000448:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800044a:	e003      	b.n	8000454 <LoopCopyDataInit>

0800044c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800044c:	4b0b      	ldr	r3, [pc, #44]	; (800047c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800044e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000450:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000452:	3104      	adds	r1, #4

08000454 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000454:	480a      	ldr	r0, [pc, #40]	; (8000480 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000458:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800045a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800045c:	d3f6      	bcc.n	800044c <CopyDataInit>
  ldr r2, =_sbss
 800045e:	4a0a      	ldr	r2, [pc, #40]	; (8000488 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000460:	e002      	b.n	8000468 <LoopFillZerobss>

08000462 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000462:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000464:	f842 3b04 	str.w	r3, [r2], #4

08000468 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000468:	4b08      	ldr	r3, [pc, #32]	; (800048c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800046a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800046c:	d3f9      	bcc.n	8000462 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800046e:	f7ff ffb7 	bl	80003e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000472:	f001 f85d 	bl	8001530 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000476:	f7ff fee9 	bl	800024c <main>
  bx lr
 800047a:	4770      	bx	lr
  ldr r3, =_sidata
 800047c:	080015c4 	.word	0x080015c4
  ldr r0, =_sdata
 8000480:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000484:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000488:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800048c:	2000002c 	.word	0x2000002c

08000490 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000490:	e7fe      	b.n	8000490 <ADC1_IRQHandler>

08000492 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000492:	b580      	push	{r7, lr}
 8000494:	b082      	sub	sp, #8
 8000496:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000498:	2300      	movs	r3, #0
 800049a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800049c:	2003      	movs	r0, #3
 800049e:	f000 f939 	bl	8000714 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80004a2:	2000      	movs	r0, #0
 80004a4:	f000 f80e 	bl	80004c4 <HAL_InitTick>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d002      	beq.n	80004b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80004ae:	2301      	movs	r3, #1
 80004b0:	71fb      	strb	r3, [r7, #7]
 80004b2:	e001      	b.n	80004b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80004b4:	f7ff ff3a 	bl	800032c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80004b8:	79fb      	ldrb	r3, [r7, #7]
}
 80004ba:	4618      	mov	r0, r3
 80004bc:	3708      	adds	r7, #8
 80004be:	46bd      	mov	sp, r7
 80004c0:	bd80      	pop	{r7, pc}
	...

080004c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80004cc:	2300      	movs	r3, #0
 80004ce:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80004d0:	4b16      	ldr	r3, [pc, #88]	; (800052c <HAL_InitTick+0x68>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	d022      	beq.n	800051e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80004d8:	4b15      	ldr	r3, [pc, #84]	; (8000530 <HAL_InitTick+0x6c>)
 80004da:	681a      	ldr	r2, [r3, #0]
 80004dc:	4b13      	ldr	r3, [pc, #76]	; (800052c <HAL_InitTick+0x68>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80004e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80004e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80004ec:	4618      	mov	r0, r3
 80004ee:	f000 f938 	bl	8000762 <HAL_SYSTICK_Config>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d10f      	bne.n	8000518 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	2b0f      	cmp	r3, #15
 80004fc:	d809      	bhi.n	8000512 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fe:	2200      	movs	r2, #0
 8000500:	6879      	ldr	r1, [r7, #4]
 8000502:	f04f 30ff 	mov.w	r0, #4294967295
 8000506:	f000 f910 	bl	800072a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800050a:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <HAL_InitTick+0x70>)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	6013      	str	r3, [r2, #0]
 8000510:	e007      	b.n	8000522 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000512:	2301      	movs	r3, #1
 8000514:	73fb      	strb	r3, [r7, #15]
 8000516:	e004      	b.n	8000522 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000518:	2301      	movs	r3, #1
 800051a:	73fb      	strb	r3, [r7, #15]
 800051c:	e001      	b.n	8000522 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800051e:	2301      	movs	r3, #1
 8000520:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000522:	7bfb      	ldrb	r3, [r7, #15]
}
 8000524:	4618      	mov	r0, r3
 8000526:	3710      	adds	r7, #16
 8000528:	46bd      	mov	sp, r7
 800052a:	bd80      	pop	{r7, pc}
 800052c:	20000008 	.word	0x20000008
 8000530:	20000000 	.word	0x20000000
 8000534:	20000004 	.word	0x20000004

08000538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800053c:	4b05      	ldr	r3, [pc, #20]	; (8000554 <HAL_IncTick+0x1c>)
 800053e:	681a      	ldr	r2, [r3, #0]
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <HAL_IncTick+0x20>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4413      	add	r3, r2
 8000546:	4a03      	ldr	r2, [pc, #12]	; (8000554 <HAL_IncTick+0x1c>)
 8000548:	6013      	str	r3, [r2, #0]
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	bc80      	pop	{r7}
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000028 	.word	0x20000028
 8000558:	20000008 	.word	0x20000008

0800055c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  return uwTick;
 8000560:	4b02      	ldr	r3, [pc, #8]	; (800056c <HAL_GetTick+0x10>)
 8000562:	681b      	ldr	r3, [r3, #0]
}
 8000564:	4618      	mov	r0, r3
 8000566:	46bd      	mov	sp, r7
 8000568:	bc80      	pop	{r7}
 800056a:	4770      	bx	lr
 800056c:	20000028 	.word	0x20000028

08000570 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000578:	f7ff fff0 	bl	800055c <HAL_GetTick>
 800057c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000588:	d004      	beq.n	8000594 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800058a:	4b09      	ldr	r3, [pc, #36]	; (80005b0 <HAL_Delay+0x40>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	68fa      	ldr	r2, [r7, #12]
 8000590:	4413      	add	r3, r2
 8000592:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000594:	bf00      	nop
 8000596:	f7ff ffe1 	bl	800055c <HAL_GetTick>
 800059a:	4602      	mov	r2, r0
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	1ad3      	subs	r3, r2, r3
 80005a0:	68fa      	ldr	r2, [r7, #12]
 80005a2:	429a      	cmp	r2, r3
 80005a4:	d8f7      	bhi.n	8000596 <HAL_Delay+0x26>
  {
  }
}
 80005a6:	bf00      	nop
 80005a8:	3710      	adds	r7, #16
 80005aa:	46bd      	mov	sp, r7
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	bf00      	nop
 80005b0:	20000008 	.word	0x20000008

080005b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	f003 0307 	and.w	r3, r3, #7
 80005c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c4:	4b0c      	ldr	r3, [pc, #48]	; (80005f8 <__NVIC_SetPriorityGrouping+0x44>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005d0:	4013      	ands	r3, r2
 80005d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005e6:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <__NVIC_SetPriorityGrouping+0x44>)
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	60d3      	str	r3, [r2, #12]
}
 80005ec:	bf00      	nop
 80005ee:	3714      	adds	r7, #20
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bc80      	pop	{r7}
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000600:	4b04      	ldr	r3, [pc, #16]	; (8000614 <__NVIC_GetPriorityGrouping+0x18>)
 8000602:	68db      	ldr	r3, [r3, #12]
 8000604:	0a1b      	lsrs	r3, r3, #8
 8000606:	f003 0307 	and.w	r3, r3, #7
}
 800060a:	4618      	mov	r0, r3
 800060c:	46bd      	mov	sp, r7
 800060e:	bc80      	pop	{r7}
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000618:	b480      	push	{r7}
 800061a:	b083      	sub	sp, #12
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	6039      	str	r1, [r7, #0]
 8000622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000628:	2b00      	cmp	r3, #0
 800062a:	db0a      	blt.n	8000642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800062c:	683b      	ldr	r3, [r7, #0]
 800062e:	b2da      	uxtb	r2, r3
 8000630:	490c      	ldr	r1, [pc, #48]	; (8000664 <__NVIC_SetPriority+0x4c>)
 8000632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000636:	0112      	lsls	r2, r2, #4
 8000638:	b2d2      	uxtb	r2, r2
 800063a:	440b      	add	r3, r1
 800063c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000640:	e00a      	b.n	8000658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4908      	ldr	r1, [pc, #32]	; (8000668 <__NVIC_SetPriority+0x50>)
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	f003 030f 	and.w	r3, r3, #15
 800064e:	3b04      	subs	r3, #4
 8000650:	0112      	lsls	r2, r2, #4
 8000652:	b2d2      	uxtb	r2, r2
 8000654:	440b      	add	r3, r1
 8000656:	761a      	strb	r2, [r3, #24]
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	e000e100 	.word	0xe000e100
 8000668:	e000ed00 	.word	0xe000ed00

0800066c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800066c:	b480      	push	{r7}
 800066e:	b089      	sub	sp, #36	; 0x24
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	60b9      	str	r1, [r7, #8]
 8000676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	f003 0307 	and.w	r3, r3, #7
 800067e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	f1c3 0307 	rsb	r3, r3, #7
 8000686:	2b04      	cmp	r3, #4
 8000688:	bf28      	it	cs
 800068a:	2304      	movcs	r3, #4
 800068c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	3304      	adds	r3, #4
 8000692:	2b06      	cmp	r3, #6
 8000694:	d902      	bls.n	800069c <NVIC_EncodePriority+0x30>
 8000696:	69fb      	ldr	r3, [r7, #28]
 8000698:	3b03      	subs	r3, #3
 800069a:	e000      	b.n	800069e <NVIC_EncodePriority+0x32>
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a0:	f04f 32ff 	mov.w	r2, #4294967295
 80006a4:	69bb      	ldr	r3, [r7, #24]
 80006a6:	fa02 f303 	lsl.w	r3, r2, r3
 80006aa:	43da      	mvns	r2, r3
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	401a      	ands	r2, r3
 80006b0:	697b      	ldr	r3, [r7, #20]
 80006b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006b4:	f04f 31ff 	mov.w	r1, #4294967295
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	fa01 f303 	lsl.w	r3, r1, r3
 80006be:	43d9      	mvns	r1, r3
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006c4:	4313      	orrs	r3, r2
         );
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	3724      	adds	r7, #36	; 0x24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bc80      	pop	{r7}
 80006ce:	4770      	bx	lr

080006d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	3b01      	subs	r3, #1
 80006dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80006e0:	d301      	bcc.n	80006e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80006e2:	2301      	movs	r3, #1
 80006e4:	e00f      	b.n	8000706 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006e6:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <SysTick_Config+0x40>)
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	3b01      	subs	r3, #1
 80006ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80006ee:	210f      	movs	r1, #15
 80006f0:	f04f 30ff 	mov.w	r0, #4294967295
 80006f4:	f7ff ff90 	bl	8000618 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006f8:	4b05      	ldr	r3, [pc, #20]	; (8000710 <SysTick_Config+0x40>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fe:	4b04      	ldr	r3, [pc, #16]	; (8000710 <SysTick_Config+0x40>)
 8000700:	2207      	movs	r2, #7
 8000702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000704:	2300      	movs	r3, #0
}
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	e000e010 	.word	0xe000e010

08000714 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f7ff ff49 	bl	80005b4 <__NVIC_SetPriorityGrouping>
}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800072a:	b580      	push	{r7, lr}
 800072c:	b086      	sub	sp, #24
 800072e:	af00      	add	r7, sp, #0
 8000730:	4603      	mov	r3, r0
 8000732:	60b9      	str	r1, [r7, #8]
 8000734:	607a      	str	r2, [r7, #4]
 8000736:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800073c:	f7ff ff5e 	bl	80005fc <__NVIC_GetPriorityGrouping>
 8000740:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000742:	687a      	ldr	r2, [r7, #4]
 8000744:	68b9      	ldr	r1, [r7, #8]
 8000746:	6978      	ldr	r0, [r7, #20]
 8000748:	f7ff ff90 	bl	800066c <NVIC_EncodePriority>
 800074c:	4602      	mov	r2, r0
 800074e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000752:	4611      	mov	r1, r2
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff ff5f 	bl	8000618 <__NVIC_SetPriority>
}
 800075a:	bf00      	nop
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}

08000762 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000762:	b580      	push	{r7, lr}
 8000764:	b082      	sub	sp, #8
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f7ff ffb0 	bl	80006d0 <SysTick_Config>
 8000770:	4603      	mov	r3, r0
}
 8000772:	4618      	mov	r0, r3
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
	...

0800077c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 800077c:	b480      	push	{r7}
 800077e:	b087      	sub	sp, #28
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
 8000784:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000792:	e14e      	b.n	8000a32 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	681a      	ldr	r2, [r3, #0]
 8000798:	2101      	movs	r1, #1
 800079a:	697b      	ldr	r3, [r7, #20]
 800079c:	fa01 f303 	lsl.w	r3, r1, r3
 80007a0:	4013      	ands	r3, r2
 80007a2:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80007a4:	68fb      	ldr	r3, [r7, #12]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	f000 8140 	beq.w	8000a2c <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	685b      	ldr	r3, [r3, #4]
 80007b0:	2b02      	cmp	r3, #2
 80007b2:	d003      	beq.n	80007bc <HAL_GPIO_Init+0x40>
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	685b      	ldr	r3, [r3, #4]
 80007b8:	2b12      	cmp	r3, #18
 80007ba:	d123      	bne.n	8000804 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80007bc:	697b      	ldr	r3, [r7, #20]
 80007be:	08da      	lsrs	r2, r3, #3
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3208      	adds	r2, #8
 80007c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	f003 0307 	and.w	r3, r3, #7
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	220f      	movs	r2, #15
 80007d4:	fa02 f303 	lsl.w	r3, r2, r3
 80007d8:	43db      	mvns	r3, r3
 80007da:	693a      	ldr	r2, [r7, #16]
 80007dc:	4013      	ands	r3, r2
 80007de:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	691a      	ldr	r2, [r3, #16]
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	fa02 f303 	lsl.w	r3, r2, r3
 80007f0:	693a      	ldr	r2, [r7, #16]
 80007f2:	4313      	orrs	r3, r2
 80007f4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	08da      	lsrs	r2, r3, #3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	3208      	adds	r2, #8
 80007fe:	6939      	ldr	r1, [r7, #16]
 8000800:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	2203      	movs	r2, #3
 8000810:	fa02 f303 	lsl.w	r3, r2, r3
 8000814:	43db      	mvns	r3, r3
 8000816:	693a      	ldr	r2, [r7, #16]
 8000818:	4013      	ands	r3, r2
 800081a:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800081c:	683b      	ldr	r3, [r7, #0]
 800081e:	685b      	ldr	r3, [r3, #4]
 8000820:	f003 0203 	and.w	r2, r3, #3
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	fa02 f303 	lsl.w	r3, r2, r3
 800082c:	693a      	ldr	r2, [r7, #16]
 800082e:	4313      	orrs	r3, r2
 8000830:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	693a      	ldr	r2, [r7, #16]
 8000836:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000838:	683b      	ldr	r3, [r7, #0]
 800083a:	685b      	ldr	r3, [r3, #4]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d00b      	beq.n	8000858 <HAL_GPIO_Init+0xdc>
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	685b      	ldr	r3, [r3, #4]
 8000844:	2b02      	cmp	r3, #2
 8000846:	d007      	beq.n	8000858 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000848:	683b      	ldr	r3, [r7, #0]
 800084a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800084c:	2b11      	cmp	r3, #17
 800084e:	d003      	beq.n	8000858 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	685b      	ldr	r3, [r3, #4]
 8000854:	2b12      	cmp	r3, #18
 8000856:	d130      	bne.n	80008ba <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689b      	ldr	r3, [r3, #8]
 800085c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	2203      	movs	r2, #3
 8000864:	fa02 f303 	lsl.w	r3, r2, r3
 8000868:	43db      	mvns	r3, r3
 800086a:	693a      	ldr	r2, [r7, #16]
 800086c:	4013      	ands	r3, r2
 800086e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	68da      	ldr	r2, [r3, #12]
 8000874:	697b      	ldr	r3, [r7, #20]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	fa02 f303 	lsl.w	r3, r2, r3
 800087c:	693a      	ldr	r2, [r7, #16]
 800087e:	4313      	orrs	r3, r2
 8000880:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	693a      	ldr	r2, [r7, #16]
 8000886:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800088e:	2201      	movs	r2, #1
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	43db      	mvns	r3, r3
 8000898:	693a      	ldr	r2, [r7, #16]
 800089a:	4013      	ands	r3, r2
 800089c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	091b      	lsrs	r3, r3, #4
 80008a4:	f003 0201 	and.w	r2, r3, #1
 80008a8:	697b      	ldr	r3, [r7, #20]
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
 80008ae:	693a      	ldr	r2, [r7, #16]
 80008b0:	4313      	orrs	r3, r2
 80008b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	68db      	ldr	r3, [r3, #12]
 80008be:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80008c0:	697b      	ldr	r3, [r7, #20]
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	2203      	movs	r2, #3
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	43db      	mvns	r3, r3
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	4013      	ands	r3, r2
 80008d0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	689a      	ldr	r2, [r3, #8]
 80008d6:	697b      	ldr	r3, [r7, #20]
 80008d8:	005b      	lsls	r3, r3, #1
 80008da:	fa02 f303 	lsl.w	r3, r2, r3
 80008de:	693a      	ldr	r2, [r7, #16]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	f000 809a 	beq.w	8000a2c <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f8:	4b54      	ldr	r3, [pc, #336]	; (8000a4c <HAL_GPIO_Init+0x2d0>)
 80008fa:	6a1b      	ldr	r3, [r3, #32]
 80008fc:	4a53      	ldr	r2, [pc, #332]	; (8000a4c <HAL_GPIO_Init+0x2d0>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6213      	str	r3, [r2, #32]
 8000904:	4b51      	ldr	r3, [pc, #324]	; (8000a4c <HAL_GPIO_Init+0x2d0>)
 8000906:	6a1b      	ldr	r3, [r3, #32]
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	60bb      	str	r3, [r7, #8]
 800090e:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8000910:	4a4f      	ldr	r2, [pc, #316]	; (8000a50 <HAL_GPIO_Init+0x2d4>)
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	089b      	lsrs	r3, r3, #2
 8000916:	3302      	adds	r3, #2
 8000918:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800091c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	f003 0303 	and.w	r3, r3, #3
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	220f      	movs	r2, #15
 8000928:	fa02 f303 	lsl.w	r3, r2, r3
 800092c:	43db      	mvns	r3, r3
 800092e:	693a      	ldr	r2, [r7, #16]
 8000930:	4013      	ands	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a47      	ldr	r2, [pc, #284]	; (8000a54 <HAL_GPIO_Init+0x2d8>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d013      	beq.n	8000964 <HAL_GPIO_Init+0x1e8>
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	4a46      	ldr	r2, [pc, #280]	; (8000a58 <HAL_GPIO_Init+0x2dc>)
 8000940:	4293      	cmp	r3, r2
 8000942:	d00d      	beq.n	8000960 <HAL_GPIO_Init+0x1e4>
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a45      	ldr	r2, [pc, #276]	; (8000a5c <HAL_GPIO_Init+0x2e0>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d007      	beq.n	800095c <HAL_GPIO_Init+0x1e0>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	4a44      	ldr	r2, [pc, #272]	; (8000a60 <HAL_GPIO_Init+0x2e4>)
 8000950:	4293      	cmp	r3, r2
 8000952:	d101      	bne.n	8000958 <HAL_GPIO_Init+0x1dc>
 8000954:	2303      	movs	r3, #3
 8000956:	e006      	b.n	8000966 <HAL_GPIO_Init+0x1ea>
 8000958:	2305      	movs	r3, #5
 800095a:	e004      	b.n	8000966 <HAL_GPIO_Init+0x1ea>
 800095c:	2302      	movs	r3, #2
 800095e:	e002      	b.n	8000966 <HAL_GPIO_Init+0x1ea>
 8000960:	2301      	movs	r3, #1
 8000962:	e000      	b.n	8000966 <HAL_GPIO_Init+0x1ea>
 8000964:	2300      	movs	r3, #0
 8000966:	697a      	ldr	r2, [r7, #20]
 8000968:	f002 0203 	and.w	r2, r2, #3
 800096c:	0092      	lsls	r2, r2, #2
 800096e:	4093      	lsls	r3, r2
 8000970:	693a      	ldr	r2, [r7, #16]
 8000972:	4313      	orrs	r3, r2
 8000974:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000976:	4936      	ldr	r1, [pc, #216]	; (8000a50 <HAL_GPIO_Init+0x2d4>)
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	089b      	lsrs	r3, r3, #2
 800097c:	3302      	adds	r3, #2
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000984:	4b37      	ldr	r3, [pc, #220]	; (8000a64 <HAL_GPIO_Init+0x2e8>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	43db      	mvns	r3, r3
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	4013      	ands	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800099c:	2b00      	cmp	r3, #0
 800099e:	d003      	beq.n	80009a8 <HAL_GPIO_Init+0x22c>
        {
          SET_BIT(temp, iocurrent); 
 80009a0:	693a      	ldr	r2, [r7, #16]
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80009a8:	4a2e      	ldr	r2, [pc, #184]	; (8000a64 <HAL_GPIO_Init+0x2e8>)
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80009ae:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <HAL_GPIO_Init+0x2e8>)
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	43db      	mvns	r3, r3
 80009b8:	693a      	ldr	r2, [r7, #16]
 80009ba:	4013      	ands	r3, r2
 80009bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	685b      	ldr	r3, [r3, #4]
 80009c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d003      	beq.n	80009d2 <HAL_GPIO_Init+0x256>
        {
          SET_BIT(temp, iocurrent); 
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80009d2:	4a24      	ldr	r2, [pc, #144]	; (8000a64 <HAL_GPIO_Init+0x2e8>)
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80009d8:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <HAL_GPIO_Init+0x2e8>)
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	43db      	mvns	r3, r3
 80009e2:	693a      	ldr	r2, [r7, #16]
 80009e4:	4013      	ands	r3, r2
 80009e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80009e8:	683b      	ldr	r3, [r7, #0]
 80009ea:	685b      	ldr	r3, [r3, #4]
 80009ec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d003      	beq.n	80009fc <HAL_GPIO_Init+0x280>
        {
          SET_BIT(temp, iocurrent); 
 80009f4:	693a      	ldr	r2, [r7, #16]
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	4313      	orrs	r3, r2
 80009fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80009fc:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <HAL_GPIO_Init+0x2e8>)
 80009fe:	693b      	ldr	r3, [r7, #16]
 8000a00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <HAL_GPIO_Init+0x2e8>)
 8000a04:	68db      	ldr	r3, [r3, #12]
 8000a06:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	693a      	ldr	r2, [r7, #16]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d003      	beq.n	8000a26 <HAL_GPIO_Init+0x2aa>
        {
          SET_BIT(temp, iocurrent); 
 8000a1e:	693a      	ldr	r2, [r7, #16]
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000a26:	4a0f      	ldr	r2, [pc, #60]	; (8000a64 <HAL_GPIO_Init+0x2e8>)
 8000a28:	693b      	ldr	r3, [r7, #16]
 8000a2a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	697b      	ldr	r3, [r7, #20]
 8000a38:	fa22 f303 	lsr.w	r3, r2, r3
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	f47f aea9 	bne.w	8000794 <HAL_GPIO_Init+0x18>
  } 
}
 8000a42:	bf00      	nop
 8000a44:	371c      	adds	r7, #28
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40010000 	.word	0x40010000
 8000a54:	40020000 	.word	0x40020000
 8000a58:	40020400 	.word	0x40020400
 8000a5c:	40020800 	.word	0x40020800
 8000a60:	40020c00 	.word	0x40020c00
 8000a64:	40010400 	.word	0x40010400

08000a68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	460b      	mov	r3, r1
 8000a72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	691a      	ldr	r2, [r3, #16]
 8000a78:	887b      	ldrh	r3, [r7, #2]
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d002      	beq.n	8000a86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000a80:	2301      	movs	r3, #1
 8000a82:	73fb      	strb	r3, [r7, #15]
 8000a84:	e001      	b.n	8000a8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000a86:	2300      	movs	r3, #0
 8000a88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	3714      	adds	r7, #20
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr

08000a96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	807b      	strh	r3, [r7, #2]
 8000aa2:	4613      	mov	r3, r2
 8000aa4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000aa6:	787b      	ldrb	r3, [r7, #1]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d003      	beq.n	8000ab4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000aac:	887a      	ldrh	r2, [r7, #2]
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000ab2:	e003      	b.n	8000abc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000ab4:	887b      	ldrh	r3, [r7, #2]
 8000ab6:	041a      	lsls	r2, r3, #16
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	619a      	str	r2, [r3, #24]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bc80      	pop	{r7}
 8000ac4:	4770      	bx	lr

08000ac6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices 
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b083      	sub	sp, #12
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	695a      	ldr	r2, [r3, #20]
 8000ad6:	887b      	ldrh	r3, [r7, #2]
 8000ad8:	4013      	ands	r3, r2
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d004      	beq.n	8000ae8 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000ade:	887b      	ldrh	r3, [r7, #2]
 8000ae0:	041a      	lsls	r2, r3, #16
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000ae6:	e002      	b.n	8000aee <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ae8:	887a      	ldrh	r2, [r7, #2]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	619a      	str	r2, [r3, #24]
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr

08000af8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d101      	bne.n	8000b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e31d      	b.n	8001146 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000b0a:	4b94      	ldr	r3, [pc, #592]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	f003 030c 	and.w	r3, r3, #12
 8000b12:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000b14:	4b91      	ldr	r3, [pc, #580]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b1c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d07b      	beq.n	8000c22 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	2b08      	cmp	r3, #8
 8000b2e:	d006      	beq.n	8000b3e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	2b0c      	cmp	r3, #12
 8000b34:	d10f      	bne.n	8000b56 <HAL_RCC_OscConfig+0x5e>
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b3c:	d10b      	bne.n	8000b56 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b3e:	4b87      	ldr	r3, [pc, #540]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d06a      	beq.n	8000c20 <HAL_RCC_OscConfig+0x128>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d166      	bne.n	8000c20 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000b52:	2301      	movs	r3, #1
 8000b54:	e2f7      	b.n	8001146 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	685b      	ldr	r3, [r3, #4]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d106      	bne.n	8000b6c <HAL_RCC_OscConfig+0x74>
 8000b5e:	4b7f      	ldr	r3, [pc, #508]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4a7e      	ldr	r2, [pc, #504]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000b64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b68:	6013      	str	r3, [r2, #0]
 8000b6a:	e02d      	b.n	8000bc8 <HAL_RCC_OscConfig+0xd0>
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d10c      	bne.n	8000b8e <HAL_RCC_OscConfig+0x96>
 8000b74:	4b79      	ldr	r3, [pc, #484]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a78      	ldr	r2, [pc, #480]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000b7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b7e:	6013      	str	r3, [r2, #0]
 8000b80:	4b76      	ldr	r3, [pc, #472]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a75      	ldr	r2, [pc, #468]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000b86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b8a:	6013      	str	r3, [r2, #0]
 8000b8c:	e01c      	b.n	8000bc8 <HAL_RCC_OscConfig+0xd0>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	2b05      	cmp	r3, #5
 8000b94:	d10c      	bne.n	8000bb0 <HAL_RCC_OscConfig+0xb8>
 8000b96:	4b71      	ldr	r3, [pc, #452]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a70      	ldr	r2, [pc, #448]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ba0:	6013      	str	r3, [r2, #0]
 8000ba2:	4b6e      	ldr	r3, [pc, #440]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a6d      	ldr	r2, [pc, #436]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bac:	6013      	str	r3, [r2, #0]
 8000bae:	e00b      	b.n	8000bc8 <HAL_RCC_OscConfig+0xd0>
 8000bb0:	4b6a      	ldr	r3, [pc, #424]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a69      	ldr	r2, [pc, #420]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	4b67      	ldr	r3, [pc, #412]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a66      	ldr	r2, [pc, #408]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d013      	beq.n	8000bf8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bd0:	f7ff fcc4 	bl	800055c <HAL_GetTick>
 8000bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000bd6:	e008      	b.n	8000bea <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bd8:	f7ff fcc0 	bl	800055c <HAL_GetTick>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	1ad3      	subs	r3, r2, r3
 8000be2:	2b64      	cmp	r3, #100	; 0x64
 8000be4:	d901      	bls.n	8000bea <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000be6:	2303      	movs	r3, #3
 8000be8:	e2ad      	b.n	8001146 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000bea:	4b5c      	ldr	r3, [pc, #368]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d0f0      	beq.n	8000bd8 <HAL_RCC_OscConfig+0xe0>
 8000bf6:	e014      	b.n	8000c22 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bf8:	f7ff fcb0 	bl	800055c <HAL_GetTick>
 8000bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000bfe:	e008      	b.n	8000c12 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c00:	f7ff fcac 	bl	800055c <HAL_GetTick>
 8000c04:	4602      	mov	r2, r0
 8000c06:	693b      	ldr	r3, [r7, #16]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	2b64      	cmp	r3, #100	; 0x64
 8000c0c:	d901      	bls.n	8000c12 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000c0e:	2303      	movs	r3, #3
 8000c10:	e299      	b.n	8001146 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000c12:	4b52      	ldr	r3, [pc, #328]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d1f0      	bne.n	8000c00 <HAL_RCC_OscConfig+0x108>
 8000c1e:	e000      	b.n	8000c22 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f003 0302 	and.w	r3, r3, #2
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d05a      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000c2e:	69bb      	ldr	r3, [r7, #24]
 8000c30:	2b04      	cmp	r3, #4
 8000c32:	d005      	beq.n	8000c40 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000c34:	69bb      	ldr	r3, [r7, #24]
 8000c36:	2b0c      	cmp	r3, #12
 8000c38:	d119      	bne.n	8000c6e <HAL_RCC_OscConfig+0x176>
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d116      	bne.n	8000c6e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c40:	4b46      	ldr	r3, [pc, #280]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d005      	beq.n	8000c58 <HAL_RCC_OscConfig+0x160>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	2b01      	cmp	r3, #1
 8000c52:	d001      	beq.n	8000c58 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	e276      	b.n	8001146 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c58:	4b40      	ldr	r3, [pc, #256]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	021b      	lsls	r3, r3, #8
 8000c66:	493d      	ldr	r1, [pc, #244]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000c6c:	e03a      	b.n	8000ce4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d020      	beq.n	8000cb8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c76:	4b3a      	ldr	r3, [pc, #232]	; (8000d60 <HAL_RCC_OscConfig+0x268>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c7c:	f7ff fc6e 	bl	800055c <HAL_GetTick>
 8000c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c82:	e008      	b.n	8000c96 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c84:	f7ff fc6a 	bl	800055c <HAL_GetTick>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	693b      	ldr	r3, [r7, #16]
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	2b02      	cmp	r3, #2
 8000c90:	d901      	bls.n	8000c96 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000c92:	2303      	movs	r3, #3
 8000c94:	e257      	b.n	8001146 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000c96:	4b31      	ldr	r3, [pc, #196]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d0f0      	beq.n	8000c84 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ca2:	4b2e      	ldr	r3, [pc, #184]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	691b      	ldr	r3, [r3, #16]
 8000cae:	021b      	lsls	r3, r3, #8
 8000cb0:	492a      	ldr	r1, [pc, #168]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000cb2:	4313      	orrs	r3, r2
 8000cb4:	604b      	str	r3, [r1, #4]
 8000cb6:	e015      	b.n	8000ce4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cb8:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <HAL_RCC_OscConfig+0x268>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cbe:	f7ff fc4d 	bl	800055c <HAL_GetTick>
 8000cc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000cc4:	e008      	b.n	8000cd8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cc6:	f7ff fc49 	bl	800055c <HAL_GetTick>
 8000cca:	4602      	mov	r2, r0
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	1ad3      	subs	r3, r2, r3
 8000cd0:	2b02      	cmp	r3, #2
 8000cd2:	d901      	bls.n	8000cd8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	e236      	b.n	8001146 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000cd8:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	f003 0302 	and.w	r3, r3, #2
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d1f0      	bne.n	8000cc6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f003 0310 	and.w	r3, r3, #16
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	f000 80b8 	beq.w	8000e62 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d170      	bne.n	8000dda <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000cf8:	4b18      	ldr	r3, [pc, #96]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d005      	beq.n	8000d10 <HAL_RCC_OscConfig+0x218>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d101      	bne.n	8000d10 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e21a      	b.n	8001146 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a1a      	ldr	r2, [r3, #32]
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d921      	bls.n	8000d64 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	6a1b      	ldr	r3, [r3, #32]
 8000d24:	4618      	mov	r0, r3
 8000d26:	f000 fba3 	bl	8001470 <RCC_SetFlashLatencyFromMSIRange>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8000d30:	2301      	movs	r3, #1
 8000d32:	e208      	b.n	8001146 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6a1b      	ldr	r3, [r3, #32]
 8000d40:	4906      	ldr	r1, [pc, #24]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000d42:	4313      	orrs	r3, r2
 8000d44:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d46:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	69db      	ldr	r3, [r3, #28]
 8000d52:	061b      	lsls	r3, r3, #24
 8000d54:	4901      	ldr	r1, [pc, #4]	; (8000d5c <HAL_RCC_OscConfig+0x264>)
 8000d56:	4313      	orrs	r3, r2
 8000d58:	604b      	str	r3, [r1, #4]
 8000d5a:	e020      	b.n	8000d9e <HAL_RCC_OscConfig+0x2a6>
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000d64:	4ba4      	ldr	r3, [pc, #656]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a1b      	ldr	r3, [r3, #32]
 8000d70:	49a1      	ldr	r1, [pc, #644]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000d72:	4313      	orrs	r3, r2
 8000d74:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000d76:	4ba0      	ldr	r3, [pc, #640]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	69db      	ldr	r3, [r3, #28]
 8000d82:	061b      	lsls	r3, r3, #24
 8000d84:	499c      	ldr	r1, [pc, #624]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000d86:	4313      	orrs	r3, r2
 8000d88:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6a1b      	ldr	r3, [r3, #32]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 fb6e 	bl	8001470 <RCC_SetFlashLatencyFromMSIRange>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e1d3      	b.n	8001146 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6a1b      	ldr	r3, [r3, #32]
 8000da2:	0b5b      	lsrs	r3, r3, #13
 8000da4:	3301      	adds	r3, #1
 8000da6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8000dae:	4a92      	ldr	r2, [pc, #584]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000db0:	6892      	ldr	r2, [r2, #8]
 8000db2:	0912      	lsrs	r2, r2, #4
 8000db4:	f002 020f 	and.w	r2, r2, #15
 8000db8:	4990      	ldr	r1, [pc, #576]	; (8000ffc <HAL_RCC_OscConfig+0x504>)
 8000dba:	5c8a      	ldrb	r2, [r1, r2]
 8000dbc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8000dbe:	4a90      	ldr	r2, [pc, #576]	; (8001000 <HAL_RCC_OscConfig+0x508>)
 8000dc0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000dc2:	4b90      	ldr	r3, [pc, #576]	; (8001004 <HAL_RCC_OscConfig+0x50c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fb7c 	bl	80004c4 <HAL_InitTick>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000dd0:	7bfb      	ldrb	r3, [r7, #15]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d045      	beq.n	8000e62 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	e1b5      	b.n	8001146 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	699b      	ldr	r3, [r3, #24]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d029      	beq.n	8000e36 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000de2:	4b89      	ldr	r3, [pc, #548]	; (8001008 <HAL_RCC_OscConfig+0x510>)
 8000de4:	2201      	movs	r2, #1
 8000de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de8:	f7ff fbb8 	bl	800055c <HAL_GetTick>
 8000dec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000dee:	e008      	b.n	8000e02 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000df0:	f7ff fbb4 	bl	800055c <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	2b02      	cmp	r3, #2
 8000dfc:	d901      	bls.n	8000e02 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e1a1      	b.n	8001146 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000e02:	4b7d      	ldr	r3, [pc, #500]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d0f0      	beq.n	8000df0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000e0e:	4b7a      	ldr	r3, [pc, #488]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6a1b      	ldr	r3, [r3, #32]
 8000e1a:	4977      	ldr	r1, [pc, #476]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000e20:	4b75      	ldr	r3, [pc, #468]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69db      	ldr	r3, [r3, #28]
 8000e2c:	061b      	lsls	r3, r3, #24
 8000e2e:	4972      	ldr	r1, [pc, #456]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000e30:	4313      	orrs	r3, r2
 8000e32:	604b      	str	r3, [r1, #4]
 8000e34:	e015      	b.n	8000e62 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000e36:	4b74      	ldr	r3, [pc, #464]	; (8001008 <HAL_RCC_OscConfig+0x510>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e3c:	f7ff fb8e 	bl	800055c <HAL_GetTick>
 8000e40:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000e42:	e008      	b.n	8000e56 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000e44:	f7ff fb8a 	bl	800055c <HAL_GetTick>
 8000e48:	4602      	mov	r2, r0
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	1ad3      	subs	r3, r2, r3
 8000e4e:	2b02      	cmp	r3, #2
 8000e50:	d901      	bls.n	8000e56 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8000e52:	2303      	movs	r3, #3
 8000e54:	e177      	b.n	8001146 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000e56:	4b68      	ldr	r3, [pc, #416]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d1f0      	bne.n	8000e44 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d030      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	695b      	ldr	r3, [r3, #20]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d016      	beq.n	8000ea4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e76:	4b65      	ldr	r3, [pc, #404]	; (800100c <HAL_RCC_OscConfig+0x514>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e7c:	f7ff fb6e 	bl	800055c <HAL_GetTick>
 8000e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e84:	f7ff fb6a 	bl	800055c <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e157      	b.n	8001146 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000e96:	4b58      	ldr	r3, [pc, #352]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e9a:	f003 0302 	and.w	r3, r3, #2
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f0      	beq.n	8000e84 <HAL_RCC_OscConfig+0x38c>
 8000ea2:	e015      	b.n	8000ed0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ea4:	4b59      	ldr	r3, [pc, #356]	; (800100c <HAL_RCC_OscConfig+0x514>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000eaa:	f7ff fb57 	bl	800055c <HAL_GetTick>
 8000eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000eb0:	e008      	b.n	8000ec4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000eb2:	f7ff fb53 	bl	800055c <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	1ad3      	subs	r3, r2, r3
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d901      	bls.n	8000ec4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8000ec0:	2303      	movs	r3, #3
 8000ec2:	e140      	b.n	8001146 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000ec4:	4b4c      	ldr	r3, [pc, #304]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d1f0      	bne.n	8000eb2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f003 0304 	and.w	r3, r3, #4
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	f000 80b5 	beq.w	8001048 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ee2:	4b45      	ldr	r3, [pc, #276]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d10d      	bne.n	8000f0a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	4b42      	ldr	r3, [pc, #264]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	4a41      	ldr	r2, [pc, #260]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	6253      	str	r3, [r2, #36]	; 0x24
 8000efa:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f02:	60bb      	str	r3, [r7, #8]
 8000f04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f06:	2301      	movs	r3, #1
 8000f08:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f0a:	4b41      	ldr	r3, [pc, #260]	; (8001010 <HAL_RCC_OscConfig+0x518>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d118      	bne.n	8000f48 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f16:	4b3e      	ldr	r3, [pc, #248]	; (8001010 <HAL_RCC_OscConfig+0x518>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a3d      	ldr	r2, [pc, #244]	; (8001010 <HAL_RCC_OscConfig+0x518>)
 8000f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f22:	f7ff fb1b 	bl	800055c <HAL_GetTick>
 8000f26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f28:	e008      	b.n	8000f3c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f2a:	f7ff fb17 	bl	800055c <HAL_GetTick>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	1ad3      	subs	r3, r2, r3
 8000f34:	2b64      	cmp	r3, #100	; 0x64
 8000f36:	d901      	bls.n	8000f3c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8000f38:	2303      	movs	r3, #3
 8000f3a:	e104      	b.n	8001146 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f3c:	4b34      	ldr	r3, [pc, #208]	; (8001010 <HAL_RCC_OscConfig+0x518>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d0f0      	beq.n	8000f2a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	d106      	bne.n	8000f5e <HAL_RCC_OscConfig+0x466>
 8000f50:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000f52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f54:	4a28      	ldr	r2, [pc, #160]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f5a:	6353      	str	r3, [r2, #52]	; 0x34
 8000f5c:	e02d      	b.n	8000fba <HAL_RCC_OscConfig+0x4c2>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d10c      	bne.n	8000f80 <HAL_RCC_OscConfig+0x488>
 8000f66:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000f68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f6a:	4a23      	ldr	r2, [pc, #140]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000f6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f70:	6353      	str	r3, [r2, #52]	; 0x34
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f76:	4a20      	ldr	r2, [pc, #128]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000f78:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000f7c:	6353      	str	r3, [r2, #52]	; 0x34
 8000f7e:	e01c      	b.n	8000fba <HAL_RCC_OscConfig+0x4c2>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	2b05      	cmp	r3, #5
 8000f86:	d10c      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x4aa>
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f8c:	4a1a      	ldr	r2, [pc, #104]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000f8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f92:	6353      	str	r3, [r2, #52]	; 0x34
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f98:	4a17      	ldr	r2, [pc, #92]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f9e:	6353      	str	r3, [r2, #52]	; 0x34
 8000fa0:	e00b      	b.n	8000fba <HAL_RCC_OscConfig+0x4c2>
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa6:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000fa8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fac:	6353      	str	r3, [r2, #52]	; 0x34
 8000fae:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000fb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb2:	4a11      	ldr	r2, [pc, #68]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000fb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000fb8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d015      	beq.n	8000fee <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fc2:	f7ff facb 	bl	800055c <HAL_GetTick>
 8000fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000fc8:	e00a      	b.n	8000fe0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fca:	f7ff fac7 	bl	800055c <HAL_GetTick>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	1ad3      	subs	r3, r2, r3
 8000fd4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e0b2      	b.n	8001146 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <HAL_RCC_OscConfig+0x500>)
 8000fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fe4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0ee      	beq.n	8000fca <HAL_RCC_OscConfig+0x4d2>
 8000fec:	e023      	b.n	8001036 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fee:	f7ff fab5 	bl	800055c <HAL_GetTick>
 8000ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000ff4:	e019      	b.n	800102a <HAL_RCC_OscConfig+0x532>
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	080015ac 	.word	0x080015ac
 8001000:	20000000 	.word	0x20000000
 8001004:	20000004 	.word	0x20000004
 8001008:	42470020 	.word	0x42470020
 800100c:	42470680 	.word	0x42470680
 8001010:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001014:	f7ff faa2 	bl	800055c <HAL_GetTick>
 8001018:	4602      	mov	r2, r0
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	1ad3      	subs	r3, r2, r3
 800101e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001022:	4293      	cmp	r3, r2
 8001024:	d901      	bls.n	800102a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001026:	2303      	movs	r3, #3
 8001028:	e08d      	b.n	8001146 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800102a:	4b49      	ldr	r3, [pc, #292]	; (8001150 <HAL_RCC_OscConfig+0x658>)
 800102c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800102e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001032:	2b00      	cmp	r3, #0
 8001034:	d1ee      	bne.n	8001014 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001036:	7ffb      	ldrb	r3, [r7, #31]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d105      	bne.n	8001048 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800103c:	4b44      	ldr	r3, [pc, #272]	; (8001150 <HAL_RCC_OscConfig+0x658>)
 800103e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001040:	4a43      	ldr	r2, [pc, #268]	; (8001150 <HAL_RCC_OscConfig+0x658>)
 8001042:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001046:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800104c:	2b00      	cmp	r3, #0
 800104e:	d079      	beq.n	8001144 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	2b0c      	cmp	r3, #12
 8001054:	d056      	beq.n	8001104 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800105a:	2b02      	cmp	r3, #2
 800105c:	d13b      	bne.n	80010d6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800105e:	4b3d      	ldr	r3, [pc, #244]	; (8001154 <HAL_RCC_OscConfig+0x65c>)
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fa7a 	bl	800055c <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800106c:	f7ff fa76 	bl	800055c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e063      	b.n	8001146 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800107e:	4b34      	ldr	r3, [pc, #208]	; (8001150 <HAL_RCC_OscConfig+0x658>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	d1f0      	bne.n	800106c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800108a:	4b31      	ldr	r3, [pc, #196]	; (8001150 <HAL_RCC_OscConfig+0x658>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800109a:	4319      	orrs	r1, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a0:	430b      	orrs	r3, r1
 80010a2:	492b      	ldr	r1, [pc, #172]	; (8001150 <HAL_RCC_OscConfig+0x658>)
 80010a4:	4313      	orrs	r3, r2
 80010a6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80010a8:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <HAL_RCC_OscConfig+0x65c>)
 80010aa:	2201      	movs	r2, #1
 80010ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010ae:	f7ff fa55 	bl	800055c <HAL_GetTick>
 80010b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80010b4:	e008      	b.n	80010c8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010b6:	f7ff fa51 	bl	800055c <HAL_GetTick>
 80010ba:	4602      	mov	r2, r0
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	1ad3      	subs	r3, r2, r3
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e03e      	b.n	8001146 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80010c8:	4b21      	ldr	r3, [pc, #132]	; (8001150 <HAL_RCC_OscConfig+0x658>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d0f0      	beq.n	80010b6 <HAL_RCC_OscConfig+0x5be>
 80010d4:	e036      	b.n	8001144 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010d6:	4b1f      	ldr	r3, [pc, #124]	; (8001154 <HAL_RCC_OscConfig+0x65c>)
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010dc:	f7ff fa3e 	bl	800055c <HAL_GetTick>
 80010e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80010e2:	e008      	b.n	80010f6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80010e4:	f7ff fa3a 	bl	800055c <HAL_GetTick>
 80010e8:	4602      	mov	r2, r0
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d901      	bls.n	80010f6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80010f2:	2303      	movs	r3, #3
 80010f4:	e027      	b.n	8001146 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80010f6:	4b16      	ldr	r3, [pc, #88]	; (8001150 <HAL_RCC_OscConfig+0x658>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1f0      	bne.n	80010e4 <HAL_RCC_OscConfig+0x5ec>
 8001102:	e01f      	b.n	8001144 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001108:	2b01      	cmp	r3, #1
 800110a:	d101      	bne.n	8001110 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800110c:	2301      	movs	r3, #1
 800110e:	e01a      	b.n	8001146 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001110:	4b0f      	ldr	r3, [pc, #60]	; (8001150 <HAL_RCC_OscConfig+0x658>)
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001120:	429a      	cmp	r2, r3
 8001122:	d10d      	bne.n	8001140 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800112e:	429a      	cmp	r2, r3
 8001130:	d106      	bne.n	8001140 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800113c:	429a      	cmp	r2, r3
 800113e:	d001      	beq.n	8001144 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e000      	b.n	8001146 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001144:	2300      	movs	r3, #0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3720      	adds	r7, #32
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40023800 	.word	0x40023800
 8001154:	42470060 	.word	0x42470060

08001158 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d101      	bne.n	800116c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001168:	2301      	movs	r3, #1
 800116a:	e11a      	b.n	80013a2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800116c:	4b8f      	ldr	r3, [pc, #572]	; (80013ac <HAL_RCC_ClockConfig+0x254>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f003 0301 	and.w	r3, r3, #1
 8001174:	683a      	ldr	r2, [r7, #0]
 8001176:	429a      	cmp	r2, r3
 8001178:	d919      	bls.n	80011ae <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d105      	bne.n	800118c <HAL_RCC_ClockConfig+0x34>
 8001180:	4b8a      	ldr	r3, [pc, #552]	; (80013ac <HAL_RCC_ClockConfig+0x254>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a89      	ldr	r2, [pc, #548]	; (80013ac <HAL_RCC_ClockConfig+0x254>)
 8001186:	f043 0304 	orr.w	r3, r3, #4
 800118a:	6013      	str	r3, [r2, #0]
 800118c:	4b87      	ldr	r3, [pc, #540]	; (80013ac <HAL_RCC_ClockConfig+0x254>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f023 0201 	bic.w	r2, r3, #1
 8001194:	4985      	ldr	r1, [pc, #532]	; (80013ac <HAL_RCC_ClockConfig+0x254>)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	4313      	orrs	r3, r2
 800119a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800119c:	4b83      	ldr	r3, [pc, #524]	; (80013ac <HAL_RCC_ClockConfig+0x254>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0301 	and.w	r3, r3, #1
 80011a4:	683a      	ldr	r2, [r7, #0]
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d001      	beq.n	80011ae <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e0f9      	b.n	80013a2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d008      	beq.n	80011cc <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011ba:	4b7d      	ldr	r3, [pc, #500]	; (80013b0 <HAL_RCC_ClockConfig+0x258>)
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	497a      	ldr	r1, [pc, #488]	; (80013b0 <HAL_RCC_ClockConfig+0x258>)
 80011c8:	4313      	orrs	r3, r2
 80011ca:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 808e 	beq.w	80012f6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d107      	bne.n	80011f2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011e2:	4b73      	ldr	r3, [pc, #460]	; (80013b0 <HAL_RCC_ClockConfig+0x258>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d121      	bne.n	8001232 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e0d7      	b.n	80013a2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	2b03      	cmp	r3, #3
 80011f8:	d107      	bne.n	800120a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80011fa:	4b6d      	ldr	r3, [pc, #436]	; (80013b0 <HAL_RCC_ClockConfig+0x258>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001202:	2b00      	cmp	r3, #0
 8001204:	d115      	bne.n	8001232 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e0cb      	b.n	80013a2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d107      	bne.n	8001222 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001212:	4b67      	ldr	r3, [pc, #412]	; (80013b0 <HAL_RCC_ClockConfig+0x258>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d109      	bne.n	8001232 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e0bf      	b.n	80013a2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001222:	4b63      	ldr	r3, [pc, #396]	; (80013b0 <HAL_RCC_ClockConfig+0x258>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e0b7      	b.n	80013a2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001232:	4b5f      	ldr	r3, [pc, #380]	; (80013b0 <HAL_RCC_ClockConfig+0x258>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f023 0203 	bic.w	r2, r3, #3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	495c      	ldr	r1, [pc, #368]	; (80013b0 <HAL_RCC_ClockConfig+0x258>)
 8001240:	4313      	orrs	r3, r2
 8001242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001244:	f7ff f98a 	bl	800055c <HAL_GetTick>
 8001248:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d112      	bne.n	8001278 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001252:	e00a      	b.n	800126a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001254:	f7ff f982 	bl	800055c <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001262:	4293      	cmp	r3, r2
 8001264:	d901      	bls.n	800126a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e09b      	b.n	80013a2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800126a:	4b51      	ldr	r3, [pc, #324]	; (80013b0 <HAL_RCC_ClockConfig+0x258>)
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	f003 030c 	and.w	r3, r3, #12
 8001272:	2b08      	cmp	r3, #8
 8001274:	d1ee      	bne.n	8001254 <HAL_RCC_ClockConfig+0xfc>
 8001276:	e03e      	b.n	80012f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b03      	cmp	r3, #3
 800127e:	d112      	bne.n	80012a6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001280:	e00a      	b.n	8001298 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001282:	f7ff f96b 	bl	800055c <HAL_GetTick>
 8001286:	4602      	mov	r2, r0
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001290:	4293      	cmp	r3, r2
 8001292:	d901      	bls.n	8001298 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001294:	2303      	movs	r3, #3
 8001296:	e084      	b.n	80013a2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001298:	4b45      	ldr	r3, [pc, #276]	; (80013b0 <HAL_RCC_ClockConfig+0x258>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f003 030c 	and.w	r3, r3, #12
 80012a0:	2b0c      	cmp	r3, #12
 80012a2:	d1ee      	bne.n	8001282 <HAL_RCC_ClockConfig+0x12a>
 80012a4:	e027      	b.n	80012f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d11d      	bne.n	80012ea <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ae:	e00a      	b.n	80012c6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012b0:	f7ff f954 	bl	800055c <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80012be:	4293      	cmp	r3, r2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e06d      	b.n	80013a2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80012c6:	4b3a      	ldr	r3, [pc, #232]	; (80013b0 <HAL_RCC_ClockConfig+0x258>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f003 030c 	and.w	r3, r3, #12
 80012ce:	2b04      	cmp	r3, #4
 80012d0:	d1ee      	bne.n	80012b0 <HAL_RCC_ClockConfig+0x158>
 80012d2:	e010      	b.n	80012f6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012d4:	f7ff f942 	bl	800055c <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	f241 3288 	movw	r2, #5000	; 0x1388
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e05b      	b.n	80013a2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80012ea:	4b31      	ldr	r3, [pc, #196]	; (80013b0 <HAL_RCC_ClockConfig+0x258>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d1ee      	bne.n	80012d4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012f6:	4b2d      	ldr	r3, [pc, #180]	; (80013ac <HAL_RCC_ClockConfig+0x254>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d219      	bcs.n	8001338 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d105      	bne.n	8001316 <HAL_RCC_ClockConfig+0x1be>
 800130a:	4b28      	ldr	r3, [pc, #160]	; (80013ac <HAL_RCC_ClockConfig+0x254>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a27      	ldr	r2, [pc, #156]	; (80013ac <HAL_RCC_ClockConfig+0x254>)
 8001310:	f043 0304 	orr.w	r3, r3, #4
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	4b25      	ldr	r3, [pc, #148]	; (80013ac <HAL_RCC_ClockConfig+0x254>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f023 0201 	bic.w	r2, r3, #1
 800131e:	4923      	ldr	r1, [pc, #140]	; (80013ac <HAL_RCC_ClockConfig+0x254>)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	4313      	orrs	r3, r2
 8001324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001326:	4b21      	ldr	r3, [pc, #132]	; (80013ac <HAL_RCC_ClockConfig+0x254>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0301 	and.w	r3, r3, #1
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	429a      	cmp	r2, r3
 8001332:	d001      	beq.n	8001338 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e034      	b.n	80013a2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b00      	cmp	r3, #0
 8001342:	d008      	beq.n	8001356 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001344:	4b1a      	ldr	r3, [pc, #104]	; (80013b0 <HAL_RCC_ClockConfig+0x258>)
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	4917      	ldr	r1, [pc, #92]	; (80013b0 <HAL_RCC_ClockConfig+0x258>)
 8001352:	4313      	orrs	r3, r2
 8001354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b00      	cmp	r3, #0
 8001360:	d009      	beq.n	8001376 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001362:	4b13      	ldr	r3, [pc, #76]	; (80013b0 <HAL_RCC_ClockConfig+0x258>)
 8001364:	689b      	ldr	r3, [r3, #8]
 8001366:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	490f      	ldr	r1, [pc, #60]	; (80013b0 <HAL_RCC_ClockConfig+0x258>)
 8001372:	4313      	orrs	r3, r2
 8001374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001376:	f000 f823 	bl	80013c0 <HAL_RCC_GetSysClockFreq>
 800137a:	4601      	mov	r1, r0
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <HAL_RCC_ClockConfig+0x258>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	091b      	lsrs	r3, r3, #4
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	4a0b      	ldr	r2, [pc, #44]	; (80013b4 <HAL_RCC_ClockConfig+0x25c>)
 8001388:	5cd3      	ldrb	r3, [r2, r3]
 800138a:	fa21 f303 	lsr.w	r3, r1, r3
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <HAL_RCC_ClockConfig+0x260>)
 8001390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001392:	4b0a      	ldr	r3, [pc, #40]	; (80013bc <HAL_RCC_ClockConfig+0x264>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f894 	bl	80004c4 <HAL_InitTick>
 800139c:	4603      	mov	r3, r0
 800139e:	72fb      	strb	r3, [r7, #11]

  return status;
 80013a0:	7afb      	ldrb	r3, [r7, #11]
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3710      	adds	r7, #16
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40023c00 	.word	0x40023c00
 80013b0:	40023800 	.word	0x40023800
 80013b4:	080015ac 	.word	0x080015ac
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000004 	.word	0x20000004

080013c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80013c6:	4b26      	ldr	r3, [pc, #152]	; (8001460 <HAL_RCC_GetSysClockFreq+0xa0>)
 80013c8:	689b      	ldr	r3, [r3, #8]
 80013ca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f003 030c 	and.w	r3, r3, #12
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d006      	beq.n	80013e4 <HAL_RCC_GetSysClockFreq+0x24>
 80013d6:	2b0c      	cmp	r3, #12
 80013d8:	d007      	beq.n	80013ea <HAL_RCC_GetSysClockFreq+0x2a>
 80013da:	2b04      	cmp	r3, #4
 80013dc:	d12c      	bne.n	8001438 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013de:	4b21      	ldr	r3, [pc, #132]	; (8001464 <HAL_RCC_GetSysClockFreq+0xa4>)
 80013e0:	613b      	str	r3, [r7, #16]
      break;
 80013e2:	e037      	b.n	8001454 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013e4:	4b20      	ldr	r3, [pc, #128]	; (8001468 <HAL_RCC_GetSysClockFreq+0xa8>)
 80013e6:	613b      	str	r3, [r7, #16]
      break;
 80013e8:	e034      	b.n	8001454 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	0c9b      	lsrs	r3, r3, #18
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	4a1e      	ldr	r2, [pc, #120]	; (800146c <HAL_RCC_GetSysClockFreq+0xac>)
 80013f4:	5cd3      	ldrb	r3, [r2, r3]
 80013f6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	0d9b      	lsrs	r3, r3, #22
 80013fc:	f003 0303 	and.w	r3, r3, #3
 8001400:	3301      	adds	r3, #1
 8001402:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d008      	beq.n	8001422 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	4a15      	ldr	r2, [pc, #84]	; (8001468 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001414:	fb02 f203 	mul.w	r2, r2, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	fbb2 f3f3 	udiv	r3, r2, r3
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	e007      	b.n	8001432 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	4a0f      	ldr	r2, [pc, #60]	; (8001464 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001426:	fb02 f203 	mul.w	r2, r2, r3
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001430:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	613b      	str	r3, [r7, #16]
      break;
 8001436:	e00d      	b.n	8001454 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001438:	4b09      	ldr	r3, [pc, #36]	; (8001460 <HAL_RCC_GetSysClockFreq+0xa0>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	0b5b      	lsrs	r3, r3, #13
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	613b      	str	r3, [r7, #16]
      break;
 8001452:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001454:	693b      	ldr	r3, [r7, #16]
}
 8001456:	4618      	mov	r0, r3
 8001458:	371c      	adds	r7, #28
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	40023800 	.word	0x40023800
 8001464:	00f42400 	.word	0x00f42400
 8001468:	007a1200 	.word	0x007a1200
 800146c:	080015a0 	.word	0x080015a0

08001470 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001470:	b480      	push	{r7}
 8001472:	b087      	sub	sp, #28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001478:	2300      	movs	r3, #0
 800147a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800147c:	4b29      	ldr	r3, [pc, #164]	; (8001524 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d12c      	bne.n	80014e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001488:	4b26      	ldr	r3, [pc, #152]	; (8001524 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800148a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d005      	beq.n	80014a0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001494:	4b24      	ldr	r3, [pc, #144]	; (8001528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800149c:	617b      	str	r3, [r7, #20]
 800149e:	e016      	b.n	80014ce <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a0:	4b20      	ldr	r3, [pc, #128]	; (8001524 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80014a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a4:	4a1f      	ldr	r2, [pc, #124]	; (8001524 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80014a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014aa:	6253      	str	r3, [r2, #36]	; 0x24
 80014ac:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80014ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b4:	60fb      	str	r3, [r7, #12]
 80014b6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80014c0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80014c2:	4b18      	ldr	r3, [pc, #96]	; (8001524 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	4a17      	ldr	r2, [pc, #92]	; (8001524 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80014c8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80014cc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80014d4:	d105      	bne.n	80014e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80014dc:	d101      	bne.n	80014e2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80014de:	2301      	movs	r3, #1
 80014e0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d105      	bne.n	80014f4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80014e8:	4b10      	ldr	r3, [pc, #64]	; (800152c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a0f      	ldr	r2, [pc, #60]	; (800152c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80014ee:	f043 0304 	orr.w	r3, r3, #4
 80014f2:	6013      	str	r3, [r2, #0]
 80014f4:	4b0d      	ldr	r3, [pc, #52]	; (800152c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 0201 	bic.w	r2, r3, #1
 80014fc:	490b      	ldr	r1, [pc, #44]	; (800152c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	429a      	cmp	r2, r3
 8001510:	d001      	beq.n	8001516 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001512:	2301      	movs	r3, #1
 8001514:	e000      	b.n	8001518 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001516:	2300      	movs	r3, #0
}
 8001518:	4618      	mov	r0, r3
 800151a:	371c      	adds	r7, #28
 800151c:	46bd      	mov	sp, r7
 800151e:	bc80      	pop	{r7}
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40007000 	.word	0x40007000
 800152c:	40023c00 	.word	0x40023c00

08001530 <__libc_init_array>:
 8001530:	b570      	push	{r4, r5, r6, lr}
 8001532:	2500      	movs	r5, #0
 8001534:	4e0c      	ldr	r6, [pc, #48]	; (8001568 <__libc_init_array+0x38>)
 8001536:	4c0d      	ldr	r4, [pc, #52]	; (800156c <__libc_init_array+0x3c>)
 8001538:	1ba4      	subs	r4, r4, r6
 800153a:	10a4      	asrs	r4, r4, #2
 800153c:	42a5      	cmp	r5, r4
 800153e:	d109      	bne.n	8001554 <__libc_init_array+0x24>
 8001540:	f000 f822 	bl	8001588 <_init>
 8001544:	2500      	movs	r5, #0
 8001546:	4e0a      	ldr	r6, [pc, #40]	; (8001570 <__libc_init_array+0x40>)
 8001548:	4c0a      	ldr	r4, [pc, #40]	; (8001574 <__libc_init_array+0x44>)
 800154a:	1ba4      	subs	r4, r4, r6
 800154c:	10a4      	asrs	r4, r4, #2
 800154e:	42a5      	cmp	r5, r4
 8001550:	d105      	bne.n	800155e <__libc_init_array+0x2e>
 8001552:	bd70      	pop	{r4, r5, r6, pc}
 8001554:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001558:	4798      	blx	r3
 800155a:	3501      	adds	r5, #1
 800155c:	e7ee      	b.n	800153c <__libc_init_array+0xc>
 800155e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001562:	4798      	blx	r3
 8001564:	3501      	adds	r5, #1
 8001566:	e7f2      	b.n	800154e <__libc_init_array+0x1e>
 8001568:	080015bc 	.word	0x080015bc
 800156c:	080015bc 	.word	0x080015bc
 8001570:	080015bc 	.word	0x080015bc
 8001574:	080015c0 	.word	0x080015c0

08001578 <memset>:
 8001578:	4603      	mov	r3, r0
 800157a:	4402      	add	r2, r0
 800157c:	4293      	cmp	r3, r2
 800157e:	d100      	bne.n	8001582 <memset+0xa>
 8001580:	4770      	bx	lr
 8001582:	f803 1b01 	strb.w	r1, [r3], #1
 8001586:	e7f9      	b.n	800157c <memset+0x4>

08001588 <_init>:
 8001588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800158a:	bf00      	nop
 800158c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800158e:	bc08      	pop	{r3}
 8001590:	469e      	mov	lr, r3
 8001592:	4770      	bx	lr

08001594 <_fini>:
 8001594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001596:	bf00      	nop
 8001598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800159a:	bc08      	pop	{r3}
 800159c:	469e      	mov	lr, r3
 800159e:	4770      	bx	lr

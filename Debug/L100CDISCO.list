
L100CDISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dd4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000290  08002f10  08002f10  00012f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031a0  080031a0  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080031a0  080031a0  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031a0  080031a0  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031a0  080031a0  000131a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031a4  080031a4  000131a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080031a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  200001e0  08003388  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  08003388  00020640  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e9d  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a33  00000000  00000000  000280a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000728  00000000  00000000  00029ae0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000640  00000000  00000000  0002a208  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015862  00000000  00000000  0002a848  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000070c6  00000000  00000000  000400aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080db2  00000000  00000000  00047170  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7f22  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fb4  00000000  00000000  000c7fa0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001e0 	.word	0x200001e0
 8000158:	00000000 	.word	0x00000000
 800015c:	08002ef8 	.word	0x08002ef8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e4 	.word	0x200001e4
 8000178:	08002ef8 	.word	0x08002ef8

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b08a      	sub	sp, #40	; 0x28
 8000190:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000192:	f107 0314 	add.w	r3, r7, #20
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
 800019a:	605a      	str	r2, [r3, #4]
 800019c:	609a      	str	r2, [r3, #8]
 800019e:	60da      	str	r2, [r3, #12]
 80001a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001a2:	4b2a      	ldr	r3, [pc, #168]	; (800024c <MX_GPIO_Init+0xc0>)
 80001a4:	69db      	ldr	r3, [r3, #28]
 80001a6:	4a29      	ldr	r2, [pc, #164]	; (800024c <MX_GPIO_Init+0xc0>)
 80001a8:	f043 0304 	orr.w	r3, r3, #4
 80001ac:	61d3      	str	r3, [r2, #28]
 80001ae:	4b27      	ldr	r3, [pc, #156]	; (800024c <MX_GPIO_Init+0xc0>)
 80001b0:	69db      	ldr	r3, [r3, #28]
 80001b2:	f003 0304 	and.w	r3, r3, #4
 80001b6:	613b      	str	r3, [r7, #16]
 80001b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80001ba:	4b24      	ldr	r3, [pc, #144]	; (800024c <MX_GPIO_Init+0xc0>)
 80001bc:	69db      	ldr	r3, [r3, #28]
 80001be:	4a23      	ldr	r2, [pc, #140]	; (800024c <MX_GPIO_Init+0xc0>)
 80001c0:	f043 0320 	orr.w	r3, r3, #32
 80001c4:	61d3      	str	r3, [r2, #28]
 80001c6:	4b21      	ldr	r3, [pc, #132]	; (800024c <MX_GPIO_Init+0xc0>)
 80001c8:	69db      	ldr	r3, [r3, #28]
 80001ca:	f003 0320 	and.w	r3, r3, #32
 80001ce:	60fb      	str	r3, [r7, #12]
 80001d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001d2:	4b1e      	ldr	r3, [pc, #120]	; (800024c <MX_GPIO_Init+0xc0>)
 80001d4:	69db      	ldr	r3, [r3, #28]
 80001d6:	4a1d      	ldr	r2, [pc, #116]	; (800024c <MX_GPIO_Init+0xc0>)
 80001d8:	f043 0301 	orr.w	r3, r3, #1
 80001dc:	61d3      	str	r3, [r2, #28]
 80001de:	4b1b      	ldr	r3, [pc, #108]	; (800024c <MX_GPIO_Init+0xc0>)
 80001e0:	69db      	ldr	r3, [r3, #28]
 80001e2:	f003 0301 	and.w	r3, r3, #1
 80001e6:	60bb      	str	r3, [r7, #8]
 80001e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001ea:	4b18      	ldr	r3, [pc, #96]	; (800024c <MX_GPIO_Init+0xc0>)
 80001ec:	69db      	ldr	r3, [r3, #28]
 80001ee:	4a17      	ldr	r2, [pc, #92]	; (800024c <MX_GPIO_Init+0xc0>)
 80001f0:	f043 0302 	orr.w	r3, r3, #2
 80001f4:	61d3      	str	r3, [r2, #28]
 80001f6:	4b15      	ldr	r3, [pc, #84]	; (800024c <MX_GPIO_Init+0xc0>)
 80001f8:	69db      	ldr	r3, [r3, #28]
 80001fa:	f003 0302 	and.w	r3, r3, #2
 80001fe:	607b      	str	r3, [r7, #4]
 8000200:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000208:	4811      	ldr	r0, [pc, #68]	; (8000250 <MX_GPIO_Init+0xc4>)
 800020a:	f000 ff6e 	bl	80010ea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800020e:	2301      	movs	r3, #1
 8000210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000212:	4b10      	ldr	r3, [pc, #64]	; (8000254 <MX_GPIO_Init+0xc8>)
 8000214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021a:	f107 0314 	add.w	r3, r7, #20
 800021e:	4619      	mov	r1, r3
 8000220:	480d      	ldr	r0, [pc, #52]	; (8000258 <MX_GPIO_Init+0xcc>)
 8000222:	f000 fdd5 	bl	8000dd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000226:	f44f 7340 	mov.w	r3, #768	; 0x300
 800022a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800022c:	2301      	movs	r3, #1
 800022e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000230:	2300      	movs	r3, #0
 8000232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000234:	2300      	movs	r3, #0
 8000236:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	4619      	mov	r1, r3
 800023e:	4804      	ldr	r0, [pc, #16]	; (8000250 <MX_GPIO_Init+0xc4>)
 8000240:	f000 fdc6 	bl	8000dd0 <HAL_GPIO_Init>

}
 8000244:	bf00      	nop
 8000246:	3728      	adds	r7, #40	; 0x28
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	40023800 	.word	0x40023800
 8000250:	40020800 	.word	0x40020800
 8000254:	10110000 	.word	0x10110000
 8000258:	40020000 	.word	0x40020000

0800025c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t opt = 0;
 8000262:	2300      	movs	r3, #0
 8000264:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000266:	f000 fbf6 	bl	8000a56 <HAL_Init>

  /* USER CODE BEGIN Init */
  RingBuffer_Init(&txBuf);
 800026a:	480d      	ldr	r0, [pc, #52]	; (80002a0 <main+0x44>)
 800026c:	f000 f9f8 	bl	8000660 <RingBuffer_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000270:	f000 f818 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000274:	f7ff ff8a 	bl	800018c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000278:	f000 fb52 	bl	8000920 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printMessage:
  	  printWelcomeMessage();
 800027c:	f000 f860 	bl	8000340 <printWelcomeMessage>
  while (1)
  {
	   //printTestMessage();
    /* USER CODE END WHILE */

	    opt = readUserInput();
 8000280:	f000 f8aa 	bl	80003d8 <readUserInput>
 8000284:	4603      	mov	r3, r0
 8000286:	71fb      	strb	r3, [r7, #7]
	    if(opt > 0)
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d0f8      	beq.n	8000280 <main+0x24>
	    {
	      processUserInput(opt);
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	4618      	mov	r0, r3
 8000292:	f000 f8c3 	bl	800041c <processUserInput>
	      if(opt == 3)
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	2b03      	cmp	r3, #3
 800029a:	d1f1      	bne.n	8000280 <main+0x24>
	      {
	        goto printMessage;
 800029c:	e7ee      	b.n	800027c <main+0x20>
 800029e:	bf00      	nop
 80002a0:	20000208 	.word	0x20000208

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b092      	sub	sp, #72	; 0x48
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	f107 0314 	add.w	r3, r7, #20
 80002ae:	2234      	movs	r2, #52	; 0x34
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f002 f950 	bl	8002558 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b8:	463b      	mov	r3, r7
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002c6:	4b1d      	ldr	r3, [pc, #116]	; (800033c <SystemClock_Config+0x98>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80002ce:	4a1b      	ldr	r2, [pc, #108]	; (800033c <SystemClock_Config+0x98>)
 80002d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002d4:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d6:	2302      	movs	r3, #2
 80002d8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002da:	2301      	movs	r3, #1
 80002dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002de:	2310      	movs	r3, #16
 80002e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e2:	2302      	movs	r3, #2
 80002e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002e6:	2300      	movs	r3, #0
 80002e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80002ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80002f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80002f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f6:	f107 0314 	add.w	r3, r7, #20
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 ff26 	bl	800114c <HAL_RCC_OscConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000306:	f000 f963 	bl	80005d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030a:	230f      	movs	r3, #15
 800030c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030e:	2303      	movs	r3, #3
 8000310:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800031e:	463b      	mov	r3, r7
 8000320:	2101      	movs	r1, #1
 8000322:	4618      	mov	r0, r3
 8000324:	f001 fa42 	bl	80017ac <HAL_RCC_ClockConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800032e:	f000 f94f 	bl	80005d0 <Error_Handler>
  }
}
 8000332:	bf00      	nop
 8000334:	3748      	adds	r7, #72	; 0x48
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40007000 	.word	0x40007000

08000340 <printWelcomeMessage>:

/* USER CODE BEGIN 4 */
void printWelcomeMessage(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	UART_Transmit(&huart1, (uint8_t*)"\033[0;0H", strlen("\033[0;0H"));
 8000344:	2206      	movs	r2, #6
 8000346:	490d      	ldr	r1, [pc, #52]	; (800037c <printWelcomeMessage+0x3c>)
 8000348:	480d      	ldr	r0, [pc, #52]	; (8000380 <printWelcomeMessage+0x40>)
 800034a:	f000 f823 	bl	8000394 <UART_Transmit>
	UART_Transmit(&huart1, (uint8_t*)"\033[2J", strlen("\033[2J"));
 800034e:	2204      	movs	r2, #4
 8000350:	490c      	ldr	r1, [pc, #48]	; (8000384 <printWelcomeMessage+0x44>)
 8000352:	480b      	ldr	r0, [pc, #44]	; (8000380 <printWelcomeMessage+0x40>)
 8000354:	f000 f81e 	bl	8000394 <UART_Transmit>
	UART_Transmit(&huart1, (uint8_t*)WELCOME_MSG, strlen(WELCOME_MSG));
 8000358:	222c      	movs	r2, #44	; 0x2c
 800035a:	490b      	ldr	r1, [pc, #44]	; (8000388 <printWelcomeMessage+0x48>)
 800035c:	4808      	ldr	r0, [pc, #32]	; (8000380 <printWelcomeMessage+0x40>)
 800035e:	f000 f819 	bl	8000394 <UART_Transmit>
	UART_Transmit(&huart1, (uint8_t*)MAIN_MENU, strlen(MAIN_MENU));
 8000362:	228b      	movs	r2, #139	; 0x8b
 8000364:	4909      	ldr	r1, [pc, #36]	; (800038c <printWelcomeMessage+0x4c>)
 8000366:	4806      	ldr	r0, [pc, #24]	; (8000380 <printWelcomeMessage+0x40>)
 8000368:	f000 f814 	bl	8000394 <UART_Transmit>
	UART_Transmit(&huart1, (uint8_t*)PROMPT, strlen(PROMPT));
 800036c:	2204      	movs	r2, #4
 800036e:	4908      	ldr	r1, [pc, #32]	; (8000390 <printWelcomeMessage+0x50>)
 8000370:	4803      	ldr	r0, [pc, #12]	; (8000380 <printWelcomeMessage+0x40>)
 8000372:	f000 f80f 	bl	8000394 <UART_Transmit>
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	08002f10 	.word	0x08002f10
 8000380:	200005f8 	.word	0x200005f8
 8000384:	08002f18 	.word	0x08002f18
 8000388:	08002f20 	.word	0x08002f20
 800038c:	08002f50 	.word	0x08002f50
 8000390:	08002fdc 	.word	0x08002fdc

08000394 <UART_Transmit>:
	UART_Transmit(&huart1, (uint8_t*)"\033[2J", strlen("\033[2J"));
	UART_Transmit(&huart1, (uint8_t*)TEST, strlen(TEST));
}

uint8_t UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t len)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
 800039a:	60f8      	str	r0, [r7, #12]
 800039c:	60b9      	str	r1, [r7, #8]
 800039e:	4613      	mov	r3, r2
 80003a0:	80fb      	strh	r3, [r7, #6]
	if(HAL_UART_Transmit_IT(huart, pData, len) != HAL_OK)
 80003a2:	88fb      	ldrh	r3, [r7, #6]
 80003a4:	461a      	mov	r2, r3
 80003a6:	68b9      	ldr	r1, [r7, #8]
 80003a8:	68f8      	ldr	r0, [r7, #12]
 80003aa:	f001 fc6a 	bl	8001c82 <HAL_UART_Transmit_IT>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d00a      	beq.n	80003ca <UART_Transmit+0x36>
	{
		if(RingBuffer_Write(&txBuf, pData, len) != RING_BUFFER_OK)
 80003b4:	88fb      	ldrh	r3, [r7, #6]
 80003b6:	461a      	mov	r2, r3
 80003b8:	68b9      	ldr	r1, [r7, #8]
 80003ba:	4806      	ldr	r0, [pc, #24]	; (80003d4 <UART_Transmit+0x40>)
 80003bc:	f000 f9a8 	bl	8000710 <RingBuffer_Write>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <UART_Transmit+0x36>
			return 0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	e000      	b.n	80003cc <UART_Transmit+0x38>
	}
	return 1;
 80003ca:	2301      	movs	r3, #1
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3710      	adds	r7, #16
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	20000208 	.word	0x20000208

080003d8 <readUserInput>:

uint8_t readUserInput(void) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
	int8_t retVal = -1;
 80003de:	23ff      	movs	r3, #255	; 0xff
 80003e0:	71fb      	strb	r3, [r7, #7]

	if(UartReady == SET) {
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <readUserInput+0x38>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d10c      	bne.n	8000406 <readUserInput+0x2e>
	UartReady = RESET;
 80003ec:	4b08      	ldr	r3, [pc, #32]	; (8000410 <readUserInput+0x38>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)readBuf, 1);
 80003f2:	2201      	movs	r2, #1
 80003f4:	4907      	ldr	r1, [pc, #28]	; (8000414 <readUserInput+0x3c>)
 80003f6:	4808      	ldr	r0, [pc, #32]	; (8000418 <readUserInput+0x40>)
 80003f8:	f001 fc87 	bl	8001d0a <HAL_UART_Receive_IT>
	retVal = atoi(readBuf);
 80003fc:	4805      	ldr	r0, [pc, #20]	; (8000414 <readUserInput+0x3c>)
 80003fe:	f002 f87d 	bl	80024fc <atoi>
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]
	}
	return retVal;
 8000406:	79fb      	ldrb	r3, [r7, #7]
}
 8000408:	4618      	mov	r0, r3
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000000 	.word	0x20000000
 8000414:	200005f4 	.word	0x200005f4
 8000418:	200005f8 	.word	0x200005f8

0800041c <processUserInput>:


uint8_t processUserInput(uint8_t opt) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b08a      	sub	sp, #40	; 0x28
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	71fb      	strb	r3, [r7, #7]
	char msg[30];

	if(!opt || opt > 3)
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d002      	beq.n	8000432 <processUserInput+0x16>
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	2b03      	cmp	r3, #3
 8000430:	d901      	bls.n	8000436 <processUserInput+0x1a>
		return 0;
 8000432:	2300      	movs	r3, #0
 8000434:	e069      	b.n	800050a <processUserInput+0xee>

	sprintf(msg, "%d", opt);
 8000436:	79fa      	ldrb	r2, [r7, #7]
 8000438:	f107 0308 	add.w	r3, r7, #8
 800043c:	4935      	ldr	r1, [pc, #212]	; (8000514 <processUserInput+0xf8>)
 800043e:	4618      	mov	r0, r3
 8000440:	f002 f892 	bl	8002568 <siprintf>
	UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg));
 8000444:	f107 0308 	add.w	r3, r7, #8
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff fe97 	bl	800017c <strlen>
 800044e:	4603      	mov	r3, r0
 8000450:	b29a      	uxth	r2, r3
 8000452:	f107 0308 	add.w	r3, r7, #8
 8000456:	4619      	mov	r1, r3
 8000458:	482f      	ldr	r0, [pc, #188]	; (8000518 <processUserInput+0xfc>)
 800045a:	f7ff ff9b 	bl	8000394 <UART_Transmit>

	switch(opt) {
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	2b02      	cmp	r3, #2
 8000462:	d031      	beq.n	80004c8 <processUserInput+0xac>
 8000464:	2b03      	cmp	r3, #3
 8000466:	d04d      	beq.n	8000504 <processUserInput+0xe8>
 8000468:	2b01      	cmp	r3, #1
 800046a:	d14d      	bne.n	8000508 <processUserInput+0xec>
	case 1:
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 800046c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000470:	482a      	ldr	r0, [pc, #168]	; (800051c <processUserInput+0x100>)
 8000472:	f000 fe52 	bl	800111a <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000476:	f44f 7100 	mov.w	r1, #512	; 0x200
 800047a:	4828      	ldr	r0, [pc, #160]	; (800051c <processUserInput+0x100>)
 800047c:	f000 fe4d 	bl	800111a <HAL_GPIO_TogglePin>
		UART_Transmit(&huart1, (uint8_t*)"\r\n", strlen("\r\n"));
 8000480:	2202      	movs	r2, #2
 8000482:	4927      	ldr	r1, [pc, #156]	; (8000520 <processUserInput+0x104>)
 8000484:	4824      	ldr	r0, [pc, #144]	; (8000518 <processUserInput+0xfc>)
 8000486:	f7ff ff85 	bl	8000394 <UART_Transmit>
		sprintf(msg, "LEDs ARE %s\r\n", HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9) == GPIO_PIN_RESET ? "OFF" : "ON");
 800048a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800048e:	4823      	ldr	r0, [pc, #140]	; (800051c <processUserInput+0x100>)
 8000490:	f000 fe14 	bl	80010bc <HAL_GPIO_ReadPin>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d101      	bne.n	800049e <processUserInput+0x82>
 800049a:	4a22      	ldr	r2, [pc, #136]	; (8000524 <processUserInput+0x108>)
 800049c:	e000      	b.n	80004a0 <processUserInput+0x84>
 800049e:	4a22      	ldr	r2, [pc, #136]	; (8000528 <processUserInput+0x10c>)
 80004a0:	f107 0308 	add.w	r3, r7, #8
 80004a4:	4921      	ldr	r1, [pc, #132]	; (800052c <processUserInput+0x110>)
 80004a6:	4618      	mov	r0, r3
 80004a8:	f002 f85e 	bl	8002568 <siprintf>
		UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg));
 80004ac:	f107 0308 	add.w	r3, r7, #8
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff fe63 	bl	800017c <strlen>
 80004b6:	4603      	mov	r3, r0
 80004b8:	b29a      	uxth	r2, r3
 80004ba:	f107 0308 	add.w	r3, r7, #8
 80004be:	4619      	mov	r1, r3
 80004c0:	4815      	ldr	r0, [pc, #84]	; (8000518 <processUserInput+0xfc>)
 80004c2:	f7ff ff67 	bl	8000394 <UART_Transmit>
		break;
 80004c6:	e01f      	b.n	8000508 <processUserInput+0xec>
	case 2:
		sprintf(msg, "\r\nUSER BUTTON status: %s\r\n", HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET ? "RELEASED" : "PRESSED");
 80004c8:	2101      	movs	r1, #1
 80004ca:	4819      	ldr	r0, [pc, #100]	; (8000530 <processUserInput+0x114>)
 80004cc:	f000 fdf6 	bl	80010bc <HAL_GPIO_ReadPin>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d101      	bne.n	80004da <processUserInput+0xbe>
 80004d6:	4a17      	ldr	r2, [pc, #92]	; (8000534 <processUserInput+0x118>)
 80004d8:	e000      	b.n	80004dc <processUserInput+0xc0>
 80004da:	4a17      	ldr	r2, [pc, #92]	; (8000538 <processUserInput+0x11c>)
 80004dc:	f107 0308 	add.w	r3, r7, #8
 80004e0:	4916      	ldr	r1, [pc, #88]	; (800053c <processUserInput+0x120>)
 80004e2:	4618      	mov	r0, r3
 80004e4:	f002 f840 	bl	8002568 <siprintf>
		UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg));
 80004e8:	f107 0308 	add.w	r3, r7, #8
 80004ec:	4618      	mov	r0, r3
 80004ee:	f7ff fe45 	bl	800017c <strlen>
 80004f2:	4603      	mov	r3, r0
 80004f4:	b29a      	uxth	r2, r3
 80004f6:	f107 0308 	add.w	r3, r7, #8
 80004fa:	4619      	mov	r1, r3
 80004fc:	4806      	ldr	r0, [pc, #24]	; (8000518 <processUserInput+0xfc>)
 80004fe:	f7ff ff49 	bl	8000394 <UART_Transmit>
		break;
 8000502:	e001      	b.n	8000508 <processUserInput+0xec>
	case 3:
		return 2;
 8000504:	2302      	movs	r3, #2
 8000506:	e000      	b.n	800050a <processUserInput+0xee>
	};

	return 1;
 8000508:	2301      	movs	r3, #1
}
 800050a:	4618      	mov	r0, r3
 800050c:	3728      	adds	r7, #40	; 0x28
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	08002fec 	.word	0x08002fec
 8000518:	200005f8 	.word	0x200005f8
 800051c:	40020800 	.word	0x40020800
 8000520:	08002ff0 	.word	0x08002ff0
 8000524:	08002ff4 	.word	0x08002ff4
 8000528:	08002ff8 	.word	0x08002ff8
 800052c:	08002ffc 	.word	0x08002ffc
 8000530:	40020000 	.word	0x40020000
 8000534:	0800300c 	.word	0x0800300c
 8000538:	08003018 	.word	0x08003018
 800053c:	08003020 	.word	0x08003020

08000540 <HAL_UART_RxCpltCallback>:
 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
 {
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 /* Set transmission flag: transfer complete*/
 UartReady = SET;
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <HAL_UART_RxCpltCallback+0x18>)
 800054a:	2201      	movs	r2, #1
 800054c:	701a      	strb	r2, [r3, #0]
 }
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	20000000 	.word	0x20000000

0800055c <HAL_UART_TxCpltCallback>:

 void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
 {
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	 uint8_t txData = txBuf.tail;
 8000564:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <HAL_UART_TxCpltCallback+0x44>)
 8000566:	f8b3 33ea 	ldrh.w	r3, [r3, #1002]	; 0x3ea
 800056a:	b2db      	uxtb	r3, r3
 800056c:	73fb      	strb	r3, [r7, #15]
	 if(RingBuffer_GetDataLength(&txBuf) > 0)
 800056e:	480c      	ldr	r0, [pc, #48]	; (80005a0 <HAL_UART_TxCpltCallback+0x44>)
 8000570:	f000 f866 	bl	8000640 <RingBuffer_GetDataLength>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d00d      	beq.n	8000596 <HAL_UART_TxCpltCallback+0x3a>
	 	{
		 RingBuffer_Read(&txBuf, &txData, 1);
 800057a:	f107 030f 	add.w	r3, r7, #15
 800057e:	2201      	movs	r2, #1
 8000580:	4619      	mov	r1, r3
 8000582:	4807      	ldr	r0, [pc, #28]	; (80005a0 <HAL_UART_TxCpltCallback+0x44>)
 8000584:	f000 f886 	bl	8000694 <RingBuffer_Read>
		 HAL_UART_Transmit_IT(huart1, &txData, 1);
 8000588:	f107 030f 	add.w	r3, r7, #15
 800058c:	2201      	movs	r2, #1
 800058e:	4619      	mov	r1, r3
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f001 fb76 	bl	8001c82 <HAL_UART_Transmit_IT>
	 	}
 }
 8000596:	bf00      	nop
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000208 	.word	0x20000208

080005a4 <HAL_UART_ErrorCallback>:

 void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 {
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b082      	sub	sp, #8
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	 if(huart->ErrorCode == HAL_UART_ERROR_ORE)
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005b0:	2b08      	cmp	r3, #8
 80005b2:	d104      	bne.n	80005be <HAL_UART_ErrorCallback+0x1a>
		 {
		 	 HAL_UART_Receive_IT(&huart1, readBuf, 1);
 80005b4:	2201      	movs	r2, #1
 80005b6:	4904      	ldr	r1, [pc, #16]	; (80005c8 <HAL_UART_ErrorCallback+0x24>)
 80005b8:	4804      	ldr	r0, [pc, #16]	; (80005cc <HAL_UART_ErrorCallback+0x28>)
 80005ba:	f001 fba6 	bl	8001d0a <HAL_UART_Receive_IT>
		 }
 }
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	200005f4 	.word	0x200005f4
 80005cc:	200005f8 	.word	0x200005f8

080005d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005d4:	bf00      	nop
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bc80      	pop	{r7}
 80005da:	4770      	bx	lr

080005dc <RingBuffer_GetFreeSpace>:
#include "ringbuffer.h"
#include <string.h>

uint16_t RingBuffer_GetFreeSpace(RingBuffer *buf)
{
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	if(buf->tail == buf->head)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d102      	bne.n	80005fa <RingBuffer_GetFreeSpace+0x1e>
		return RING_BUFFER_LENGTH - 1;
 80005f4:	f240 33e7 	movw	r3, #999	; 0x3e7
 80005f8:	e01d      	b.n	8000636 <RingBuffer_GetFreeSpace+0x5a>

	if(buf->head > buf->tail)
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	f8b3 23e8 	ldrh.w	r2, [r3, #1000]	; 0x3e8
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	f8b3 33ea 	ldrh.w	r3, [r3, #1002]	; 0x3ea
 8000606:	429a      	cmp	r2, r3
 8000608:	d90b      	bls.n	8000622 <RingBuffer_GetFreeSpace+0x46>
		return RING_BUFFER_LENGTH - ((buf->head - buf->tail) + 1);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 8000616:	1ad3      	subs	r3, r2, r3
 8000618:	b29b      	uxth	r3, r3
 800061a:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800061e:	b29b      	uxth	r3, r3
 8000620:	e009      	b.n	8000636 <RingBuffer_GetFreeSpace+0x5a>
	else
		return  (buf->tail - buf->head) - 1;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 800062e:	1ad3      	subs	r3, r2, r3
 8000630:	b29b      	uxth	r3, r3
 8000632:	3b01      	subs	r3, #1
 8000634:	b29b      	uxth	r3, r3
}
 8000636:	4618      	mov	r0, r3
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <RingBuffer_GetDataLength>:

uint16_t RingBuffer_GetDataLength(RingBuffer *buf)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	return RING_BUFFER_LENGTH - (RingBuffer_GetFreeSpace(buf) + 1);
 8000648:	6878      	ldr	r0, [r7, #4]
 800064a:	f7ff ffc7 	bl	80005dc <RingBuffer_GetFreeSpace>
 800064e:	4603      	mov	r3, r0
 8000650:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 8000654:	3303      	adds	r3, #3
 8000656:	b29b      	uxth	r3, r3
}
 8000658:	4618      	mov	r0, r3
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <RingBuffer_Init>:


void RingBuffer_Init(RingBuffer *buf)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	buf->head = buf->tail = 0;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	2200      	movs	r2, #0
 800066c:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
	memset(buf->buf, 0, RING_BUFFER_LENGTH);
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000682:	2100      	movs	r1, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f001 ff67 	bl	8002558 <memset>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <RingBuffer_Read>:

uint16_t RingBuffer_Read(RingBuffer *buf, uint8_t *data, uint16_t len)
{
 8000694:	b480      	push	{r7}
 8000696:	b087      	sub	sp, #28
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	4613      	mov	r3, r2
 80006a0:	80fb      	strh	r3, [r7, #6]
	uint16_t counter = 0;
 80006a2:	2300      	movs	r3, #0
 80006a4:	82fb      	strh	r3, [r7, #22]

	while(buf->tail != buf->head && counter < len) {
 80006a6:	e01f      	b.n	80006e8 <RingBuffer_Read+0x54>
		data[counter++] = buf->buf[buf->tail];
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	f8b3 33ea 	ldrh.w	r3, [r3, #1002]	; 0x3ea
 80006ae:	4619      	mov	r1, r3
 80006b0:	8afb      	ldrh	r3, [r7, #22]
 80006b2:	1c5a      	adds	r2, r3, #1
 80006b4:	82fa      	strh	r2, [r7, #22]
 80006b6:	461a      	mov	r2, r3
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	4413      	add	r3, r2
 80006bc:	68fa      	ldr	r2, [r7, #12]
 80006be:	5c52      	ldrb	r2, [r2, r1]
 80006c0:	701a      	strb	r2, [r3, #0]
		buf->tail = (buf->tail + 1) % RING_BUFFER_LENGTH;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	f8b3 33ea 	ldrh.w	r3, [r3, #1002]	; 0x3ea
 80006c8:	3301      	adds	r3, #1
 80006ca:	4a10      	ldr	r2, [pc, #64]	; (800070c <RingBuffer_Read+0x78>)
 80006cc:	fb82 1203 	smull	r1, r2, r2, r3
 80006d0:	1191      	asrs	r1, r2, #6
 80006d2:	17da      	asrs	r2, r3, #31
 80006d4:	1a8a      	subs	r2, r1, r2
 80006d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006da:	fb01 f202 	mul.w	r2, r1, r2
 80006de:	1a9a      	subs	r2, r3, r2
 80006e0:	b292      	uxth	r2, r2
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
	while(buf->tail != buf->head && counter < len) {
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 80006f4:	429a      	cmp	r2, r3
 80006f6:	d003      	beq.n	8000700 <RingBuffer_Read+0x6c>
 80006f8:	8afa      	ldrh	r2, [r7, #22]
 80006fa:	88fb      	ldrh	r3, [r7, #6]
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d3d3      	bcc.n	80006a8 <RingBuffer_Read+0x14>
	}
	return counter;
 8000700:	8afb      	ldrh	r3, [r7, #22]
}
 8000702:	4618      	mov	r0, r3
 8000704:	371c      	adds	r7, #28
 8000706:	46bd      	mov	sp, r7
 8000708:	bc80      	pop	{r7}
 800070a:	4770      	bx	lr
 800070c:	10624dd3 	.word	0x10624dd3

08000710 <RingBuffer_Write>:

uint8_t RingBuffer_Write(RingBuffer *buf, uint8_t *data, uint16_t len)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	60f8      	str	r0, [r7, #12]
 8000718:	60b9      	str	r1, [r7, #8]
 800071a:	4613      	mov	r3, r2
 800071c:	80fb      	strh	r3, [r7, #6]
	uint16_t counter = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	82fb      	strh	r3, [r7, #22]
	uint16_t freeSpace = RingBuffer_GetFreeSpace(buf);
 8000722:	68f8      	ldr	r0, [r7, #12]
 8000724:	f7ff ff5a 	bl	80005dc <RingBuffer_GetFreeSpace>
 8000728:	4603      	mov	r3, r0
 800072a:	82bb      	strh	r3, [r7, #20]

	if(freeSpace == 0)
 800072c:	8abb      	ldrh	r3, [r7, #20]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d101      	bne.n	8000736 <RingBuffer_Write+0x26>
		return RING_BUFFER_FULL;
 8000732:	2301      	movs	r3, #1
 8000734:	e029      	b.n	800078a <RingBuffer_Write+0x7a>
	else if (freeSpace < len)
 8000736:	8aba      	ldrh	r2, [r7, #20]
 8000738:	88fb      	ldrh	r3, [r7, #6]
 800073a:	429a      	cmp	r2, r3
 800073c:	d220      	bcs.n	8000780 <RingBuffer_Write+0x70>
		return RING_BUFFER_NO_SUFFICIENT_SPACE;
 800073e:	2302      	movs	r3, #2
 8000740:	e023      	b.n	800078a <RingBuffer_Write+0x7a>

	while(counter < len) {
		buf->buf[buf->head] = data[counter++];
 8000742:	8afb      	ldrh	r3, [r7, #22]
 8000744:	1c5a      	adds	r2, r3, #1
 8000746:	82fa      	strh	r2, [r7, #22]
 8000748:	461a      	mov	r2, r3
 800074a:	68bb      	ldr	r3, [r7, #8]
 800074c:	4413      	add	r3, r2
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	f8b2 23e8 	ldrh.w	r2, [r2, #1000]	; 0x3e8
 8000754:	7819      	ldrb	r1, [r3, #0]
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	5499      	strb	r1, [r3, r2]
		buf->head = (buf->head + 1) % RING_BUFFER_LENGTH;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 8000760:	3301      	adds	r3, #1
 8000762:	4a0c      	ldr	r2, [pc, #48]	; (8000794 <RingBuffer_Write+0x84>)
 8000764:	fb82 1203 	smull	r1, r2, r2, r3
 8000768:	1191      	asrs	r1, r2, #6
 800076a:	17da      	asrs	r2, r3, #31
 800076c:	1a8a      	subs	r2, r1, r2
 800076e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000772:	fb01 f202 	mul.w	r2, r1, r2
 8000776:	1a9a      	subs	r2, r3, r2
 8000778:	b292      	uxth	r2, r2
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
	while(counter < len) {
 8000780:	8afa      	ldrh	r2, [r7, #22]
 8000782:	88fb      	ldrh	r3, [r7, #6]
 8000784:	429a      	cmp	r2, r3
 8000786:	d3dc      	bcc.n	8000742 <RingBuffer_Write+0x32>
	}
 	return RING_BUFFER_OK;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	10624dd3 	.word	0x10624dd3

08000798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <HAL_MspInit+0x5c>)
 80007a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007a2:	4a14      	ldr	r2, [pc, #80]	; (80007f4 <HAL_MspInit+0x5c>)
 80007a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007a8:	6253      	str	r3, [r2, #36]	; 0x24
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <HAL_MspInit+0x5c>)
 80007ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <HAL_MspInit+0x5c>)
 80007b8:	6a1b      	ldr	r3, [r3, #32]
 80007ba:	4a0e      	ldr	r2, [pc, #56]	; (80007f4 <HAL_MspInit+0x5c>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6213      	str	r3, [r2, #32]
 80007c2:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <HAL_MspInit+0x5c>)
 80007c4:	6a1b      	ldr	r3, [r3, #32]
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ce:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <HAL_MspInit+0x5c>)
 80007d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007d2:	4a08      	ldr	r2, [pc, #32]	; (80007f4 <HAL_MspInit+0x5c>)
 80007d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d8:	6253      	str	r3, [r2, #36]	; 0x24
 80007da:	4b06      	ldr	r3, [pc, #24]	; (80007f4 <HAL_MspInit+0x5c>)
 80007dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80007e6:	2007      	movs	r0, #7
 80007e8:	f000 fa70 	bl	8000ccc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ec:	bf00      	nop
 80007ee:	3710      	adds	r7, #16
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	40023800 	.word	0x40023800

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007fc:	bf00      	nop
 80007fe:	46bd      	mov	sp, r7
 8000800:	bc80      	pop	{r7}
 8000802:	4770      	bx	lr

08000804 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <HardFault_Handler+0x4>

0800080a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <MemManage_Handler+0x4>

08000810 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <BusFault_Handler+0x4>

08000816 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <UsageFault_Handler+0x4>

0800081c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr

08000828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082c:	bf00      	nop
 800082e:	46bd      	mov	sp, r7
 8000830:	bc80      	pop	{r7}
 8000832:	4770      	bx	lr

08000834 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr

08000840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000844:	f000 f95a 	bl	8000afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}

0800084c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000850:	4802      	ldr	r0, [pc, #8]	; (800085c <USART1_IRQHandler+0x10>)
 8000852:	f001 faaf 	bl	8001db4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200005f8 	.word	0x200005f8

08000860 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <_sbrk+0x50>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d102      	bne.n	8000876 <_sbrk+0x16>
		heap_end = &end;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <_sbrk+0x50>)
 8000872:	4a10      	ldr	r2, [pc, #64]	; (80008b4 <_sbrk+0x54>)
 8000874:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <_sbrk+0x50>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <_sbrk+0x50>)
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	4413      	add	r3, r2
 8000884:	466a      	mov	r2, sp
 8000886:	4293      	cmp	r3, r2
 8000888:	d907      	bls.n	800089a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800088a:	f001 fe3b 	bl	8002504 <__errno>
 800088e:	4602      	mov	r2, r0
 8000890:	230c      	movs	r3, #12
 8000892:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000894:	f04f 33ff 	mov.w	r3, #4294967295
 8000898:	e006      	b.n	80008a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800089a:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <_sbrk+0x50>)
 800089c:	681a      	ldr	r2, [r3, #0]
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4413      	add	r3, r2
 80008a2:	4a03      	ldr	r2, [pc, #12]	; (80008b0 <_sbrk+0x50>)
 80008a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80008a6:	68fb      	ldr	r3, [r7, #12]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3710      	adds	r7, #16
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200001fc 	.word	0x200001fc
 80008b4:	20000640 	.word	0x20000640

080008b8 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80008bc:	4b15      	ldr	r3, [pc, #84]	; (8000914 <SystemInit+0x5c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a14      	ldr	r2, [pc, #80]	; (8000914 <SystemInit+0x5c>)
 80008c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008c6:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <SystemInit+0x5c>)
 80008ca:	689a      	ldr	r2, [r3, #8]
 80008cc:	4911      	ldr	r1, [pc, #68]	; (8000914 <SystemInit+0x5c>)
 80008ce:	4b12      	ldr	r3, [pc, #72]	; (8000918 <SystemInit+0x60>)
 80008d0:	4013      	ands	r3, r2
 80008d2:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80008d4:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <SystemInit+0x5c>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <SystemInit+0x5c>)
 80008da:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80008de:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80008e2:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80008e4:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <SystemInit+0x5c>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a0a      	ldr	r2, [pc, #40]	; (8000914 <SystemInit+0x5c>)
 80008ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008ee:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80008f0:	4b08      	ldr	r3, [pc, #32]	; (8000914 <SystemInit+0x5c>)
 80008f2:	689b      	ldr	r3, [r3, #8]
 80008f4:	4a07      	ldr	r2, [pc, #28]	; (8000914 <SystemInit+0x5c>)
 80008f6:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80008fa:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80008fc:	4b05      	ldr	r3, [pc, #20]	; (8000914 <SystemInit+0x5c>)
 80008fe:	2200      	movs	r2, #0
 8000900:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000902:	4b06      	ldr	r3, [pc, #24]	; (800091c <SystemInit+0x64>)
 8000904:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000908:	609a      	str	r2, [r3, #8]
#endif
}
 800090a:	bf00      	nop
 800090c:	46bd      	mov	sp, r7
 800090e:	bc80      	pop	{r7}
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	88ffc00c 	.word	0x88ffc00c
 800091c:	e000ed00 	.word	0xe000ed00

08000920 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000924:	4b11      	ldr	r3, [pc, #68]	; (800096c <MX_USART1_UART_Init+0x4c>)
 8000926:	4a12      	ldr	r2, [pc, #72]	; (8000970 <MX_USART1_UART_Init+0x50>)
 8000928:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800092a:	4b10      	ldr	r3, [pc, #64]	; (800096c <MX_USART1_UART_Init+0x4c>)
 800092c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000930:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <MX_USART1_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000938:	4b0c      	ldr	r3, [pc, #48]	; (800096c <MX_USART1_UART_Init+0x4c>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800093e:	4b0b      	ldr	r3, [pc, #44]	; (800096c <MX_USART1_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <MX_USART1_UART_Init+0x4c>)
 8000946:	220c      	movs	r2, #12
 8000948:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800094a:	4b08      	ldr	r3, [pc, #32]	; (800096c <MX_USART1_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000950:	4b06      	ldr	r3, [pc, #24]	; (800096c <MX_USART1_UART_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000956:	4805      	ldr	r0, [pc, #20]	; (800096c <MX_USART1_UART_Init+0x4c>)
 8000958:	f001 f946 	bl	8001be8 <HAL_UART_Init>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000962:	f7ff fe35 	bl	80005d0 <Error_Handler>
  }

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200005f8 	.word	0x200005f8
 8000970:	40013800 	.word	0x40013800

08000974 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08a      	sub	sp, #40	; 0x28
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097c:	f107 0314 	add.w	r3, r7, #20
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
 8000984:	605a      	str	r2, [r3, #4]
 8000986:	609a      	str	r2, [r3, #8]
 8000988:	60da      	str	r2, [r3, #12]
 800098a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a1b      	ldr	r2, [pc, #108]	; (8000a00 <HAL_UART_MspInit+0x8c>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d130      	bne.n	80009f8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000996:	4b1b      	ldr	r3, [pc, #108]	; (8000a04 <HAL_UART_MspInit+0x90>)
 8000998:	6a1b      	ldr	r3, [r3, #32]
 800099a:	4a1a      	ldr	r2, [pc, #104]	; (8000a04 <HAL_UART_MspInit+0x90>)
 800099c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009a0:	6213      	str	r3, [r2, #32]
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <HAL_UART_MspInit+0x90>)
 80009a4:	6a1b      	ldr	r3, [r3, #32]
 80009a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <HAL_UART_MspInit+0x90>)
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	4a14      	ldr	r2, [pc, #80]	; (8000a04 <HAL_UART_MspInit+0x90>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	61d3      	str	r3, [r2, #28]
 80009ba:	4b12      	ldr	r3, [pc, #72]	; (8000a04 <HAL_UART_MspInit+0x90>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009c6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009cc:	2302      	movs	r3, #2
 80009ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d4:	2303      	movs	r3, #3
 80009d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009d8:	2307      	movs	r3, #7
 80009da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009dc:	f107 0314 	add.w	r3, r7, #20
 80009e0:	4619      	mov	r1, r3
 80009e2:	4809      	ldr	r0, [pc, #36]	; (8000a08 <HAL_UART_MspInit+0x94>)
 80009e4:	f000 f9f4 	bl	8000dd0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2100      	movs	r1, #0
 80009ec:	2025      	movs	r0, #37	; 0x25
 80009ee:	f000 f978 	bl	8000ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009f2:	2025      	movs	r0, #37	; 0x25
 80009f4:	f000 f991 	bl	8000d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80009f8:	bf00      	nop
 80009fa:	3728      	adds	r7, #40	; 0x28
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40013800 	.word	0x40013800
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020000 	.word	0x40020000

08000a0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a0c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a0e:	e003      	b.n	8000a18 <LoopCopyDataInit>

08000a10 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a10:	4b0b      	ldr	r3, [pc, #44]	; (8000a40 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000a12:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a14:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a16:	3104      	adds	r1, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a18:	480a      	ldr	r0, [pc, #40]	; (8000a44 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000a1a:	4b0b      	ldr	r3, [pc, #44]	; (8000a48 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000a1c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a1e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a20:	d3f6      	bcc.n	8000a10 <CopyDataInit>
  ldr r2, =_sbss
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000a24:	e002      	b.n	8000a2c <LoopFillZerobss>

08000a26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000a28:	f842 3b04 	str.w	r3, [r2], #4

08000a2c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000a2e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a30:	d3f9      	bcc.n	8000a26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a32:	f7ff ff41 	bl	80008b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a36:	f001 fd6b 	bl	8002510 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a3a:	f7ff fc0f 	bl	800025c <main>
  bx lr
 8000a3e:	4770      	bx	lr
  ldr r3, =_sidata
 8000a40:	080031a8 	.word	0x080031a8
  ldr r0, =_sdata
 8000a44:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a48:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 8000a4c:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 8000a50:	20000640 	.word	0x20000640

08000a54 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC1_IRQHandler>

08000a56 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a56:	b580      	push	{r7, lr}
 8000a58:	b082      	sub	sp, #8
 8000a5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f933 	bl	8000ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a66:	2000      	movs	r0, #0
 8000a68:	f000 f80e 	bl	8000a88 <HAL_InitTick>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d002      	beq.n	8000a78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	71fb      	strb	r3, [r7, #7]
 8000a76:	e001      	b.n	8000a7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a78:	f7ff fe8e 	bl	8000798 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
	...

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a90:	2300      	movs	r3, #0
 8000a92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a94:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <HAL_InitTick+0x68>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d022      	beq.n	8000ae2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_InitTick+0x6c>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <HAL_InitTick+0x68>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000aa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8000aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 f940 	bl	8000d36 <HAL_SYSTICK_Config>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d10f      	bne.n	8000adc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	2b0f      	cmp	r3, #15
 8000ac0:	d809      	bhi.n	8000ad6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	6879      	ldr	r1, [r7, #4]
 8000ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8000aca:	f000 f90a 	bl	8000ce2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <HAL_InitTick+0x70>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	6013      	str	r3, [r2, #0]
 8000ad4:	e007      	b.n	8000ae6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	73fb      	strb	r3, [r7, #15]
 8000ada:	e004      	b.n	8000ae6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	73fb      	strb	r3, [r7, #15]
 8000ae0:	e001      	b.n	8000ae6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3710      	adds	r7, #16
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	2000000c 	.word	0x2000000c
 8000af4:	20000004 	.word	0x20000004
 8000af8:	20000008 	.word	0x20000008

08000afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <HAL_IncTick+0x1c>)
 8000b02:	681a      	ldr	r2, [r3, #0]
 8000b04:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_IncTick+0x20>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4413      	add	r3, r2
 8000b0a:	4a03      	ldr	r2, [pc, #12]	; (8000b18 <HAL_IncTick+0x1c>)
 8000b0c:	6013      	str	r3, [r2, #0]
}
 8000b0e:	bf00      	nop
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bc80      	pop	{r7}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	20000638 	.word	0x20000638
 8000b1c:	2000000c 	.word	0x2000000c

08000b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b02      	ldr	r3, [pc, #8]	; (8000b30 <HAL_GetTick+0x10>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr
 8000b30:	20000638 	.word	0x20000638

08000b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b66:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	60d3      	str	r3, [r2, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bc80      	pop	{r7}
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	db0b      	blt.n	8000bc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	f003 021f 	and.w	r2, r3, #31
 8000bb0:	4906      	ldr	r1, [pc, #24]	; (8000bcc <__NVIC_EnableIRQ+0x34>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	095b      	lsrs	r3, r3, #5
 8000bb8:	2001      	movs	r0, #1
 8000bba:	fa00 f202 	lsl.w	r2, r0, r2
 8000bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bc80      	pop	{r7}
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0a      	blt.n	8000bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	; (8000c1c <__NVIC_SetPriority+0x4c>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf8:	e00a      	b.n	8000c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4908      	ldr	r1, [pc, #32]	; (8000c20 <__NVIC_SetPriority+0x50>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3b04      	subs	r3, #4
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	761a      	strb	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f1c3 0307 	rsb	r3, r3, #7
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	bf28      	it	cs
 8000c42:	2304      	movcs	r3, #4
 8000c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d902      	bls.n	8000c54 <NVIC_EncodePriority+0x30>
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3b03      	subs	r3, #3
 8000c52:	e000      	b.n	8000c56 <NVIC_EncodePriority+0x32>
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43da      	mvns	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43d9      	mvns	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	4313      	orrs	r3, r2
         );
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3724      	adds	r7, #36	; 0x24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c98:	d301      	bcc.n	8000c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00f      	b.n	8000cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <SysTick_Config+0x40>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f7ff ff90 	bl	8000bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb8:	2207      	movs	r2, #7
 8000cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	e000e010 	.word	0xe000e010

08000ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ff2d 	bl	8000b34 <__NVIC_SetPriorityGrouping>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf4:	f7ff ff42 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff ff90 	bl	8000c24 <NVIC_EncodePriority>
 8000d04:	4602      	mov	r2, r0
 8000d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff5f 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff35 	bl	8000b98 <__NVIC_EnableIRQ>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffa2 	bl	8000c88 <SysTick_Config>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b084      	sub	sp, #16
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d56:	2300      	movs	r3, #0
 8000d58:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d60:	b2db      	uxtb	r3, r3
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d005      	beq.n	8000d72 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2204      	movs	r2, #4
 8000d6a:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	73fb      	strb	r3, [r7, #15]
 8000d70:	e029      	b.n	8000dc6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f022 020e 	bic.w	r2, r2, #14
 8000d80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	681a      	ldr	r2, [r3, #0]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f022 0201 	bic.w	r2, r2, #1
 8000d90:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f003 021c 	and.w	r2, r3, #28
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d9e:	2101      	movs	r1, #1
 8000da0:	fa01 f202 	lsl.w	r2, r1, r2
 8000da4:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2201      	movs	r2, #1
 8000daa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	2200      	movs	r2, #0
 8000db2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d003      	beq.n	8000dc6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	4798      	blx	r3
    }
  }
  return status;
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000dd0:	b480      	push	{r7}
 8000dd2:	b087      	sub	sp, #28
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000de6:	e14e      	b.n	8001086 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	681a      	ldr	r2, [r3, #0]
 8000dec:	2101      	movs	r1, #1
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	fa01 f303 	lsl.w	r3, r1, r3
 8000df4:	4013      	ands	r3, r2
 8000df6:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f000 8140 	beq.w	8001080 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	2b02      	cmp	r3, #2
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0x40>
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	2b12      	cmp	r3, #18
 8000e0e:	d123      	bne.n	8000e58 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	08da      	lsrs	r2, r3, #3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3208      	adds	r2, #8
 8000e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e1c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	f003 0307 	and.w	r3, r3, #7
 8000e24:	009b      	lsls	r3, r3, #2
 8000e26:	220f      	movs	r2, #15
 8000e28:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	691a      	ldr	r2, [r3, #16]
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	009b      	lsls	r3, r3, #2
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	08da      	lsrs	r2, r3, #3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	3208      	adds	r2, #8
 8000e52:	6939      	ldr	r1, [r7, #16]
 8000e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	f003 0203 	and.w	r2, r3, #3
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	005b      	lsls	r3, r3, #1
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d00b      	beq.n	8000eac <HAL_GPIO_Init+0xdc>
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d007      	beq.n	8000eac <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea0:	2b11      	cmp	r3, #17
 8000ea2:	d003      	beq.n	8000eac <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2b12      	cmp	r3, #18
 8000eaa:	d130      	bne.n	8000f0e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	68da      	ldr	r2, [r3, #12]
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	693a      	ldr	r2, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	091b      	lsrs	r3, r3, #4
 8000ef8:	f003 0201 	and.w	r2, r3, #1
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	693a      	ldr	r2, [r7, #16]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	005b      	lsls	r3, r3, #1
 8000f18:	2203      	movs	r2, #3
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	693a      	ldr	r2, [r7, #16]
 8000f22:	4013      	ands	r3, r2
 8000f24:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	689a      	ldr	r2, [r3, #8]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	005b      	lsls	r3, r3, #1
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	f000 809a 	beq.w	8001080 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4c:	4b54      	ldr	r3, [pc, #336]	; (80010a0 <HAL_GPIO_Init+0x2d0>)
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	4a53      	ldr	r2, [pc, #332]	; (80010a0 <HAL_GPIO_Init+0x2d0>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	6213      	str	r3, [r2, #32]
 8000f58:	4b51      	ldr	r3, [pc, #324]	; (80010a0 <HAL_GPIO_Init+0x2d0>)
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	f003 0301 	and.w	r3, r3, #1
 8000f60:	60bb      	str	r3, [r7, #8]
 8000f62:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8000f64:	4a4f      	ldr	r2, [pc, #316]	; (80010a4 <HAL_GPIO_Init+0x2d4>)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f70:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	f003 0303 	and.w	r3, r3, #3
 8000f78:	009b      	lsls	r3, r3, #2
 8000f7a:	220f      	movs	r2, #15
 8000f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f80:	43db      	mvns	r3, r3
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	4013      	ands	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a47      	ldr	r2, [pc, #284]	; (80010a8 <HAL_GPIO_Init+0x2d8>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d013      	beq.n	8000fb8 <HAL_GPIO_Init+0x1e8>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a46      	ldr	r2, [pc, #280]	; (80010ac <HAL_GPIO_Init+0x2dc>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d00d      	beq.n	8000fb4 <HAL_GPIO_Init+0x1e4>
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	4a45      	ldr	r2, [pc, #276]	; (80010b0 <HAL_GPIO_Init+0x2e0>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d007      	beq.n	8000fb0 <HAL_GPIO_Init+0x1e0>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	4a44      	ldr	r2, [pc, #272]	; (80010b4 <HAL_GPIO_Init+0x2e4>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d101      	bne.n	8000fac <HAL_GPIO_Init+0x1dc>
 8000fa8:	2303      	movs	r3, #3
 8000faa:	e006      	b.n	8000fba <HAL_GPIO_Init+0x1ea>
 8000fac:	2305      	movs	r3, #5
 8000fae:	e004      	b.n	8000fba <HAL_GPIO_Init+0x1ea>
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	e002      	b.n	8000fba <HAL_GPIO_Init+0x1ea>
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e000      	b.n	8000fba <HAL_GPIO_Init+0x1ea>
 8000fb8:	2300      	movs	r3, #0
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	f002 0203 	and.w	r2, r2, #3
 8000fc0:	0092      	lsls	r2, r2, #2
 8000fc2:	4093      	lsls	r3, r2
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fca:	4936      	ldr	r1, [pc, #216]	; (80010a4 <HAL_GPIO_Init+0x2d4>)
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	089b      	lsrs	r3, r3, #2
 8000fd0:	3302      	adds	r3, #2
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fd8:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <HAL_GPIO_Init+0x2e8>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x22c>
        {
          SET_BIT(temp, iocurrent); 
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ffc:	4a2e      	ldr	r2, [pc, #184]	; (80010b8 <HAL_GPIO_Init+0x2e8>)
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001002:	4b2d      	ldr	r3, [pc, #180]	; (80010b8 <HAL_GPIO_Init+0x2e8>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	43db      	mvns	r3, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x256>
        {
          SET_BIT(temp, iocurrent); 
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001026:	4a24      	ldr	r2, [pc, #144]	; (80010b8 <HAL_GPIO_Init+0x2e8>)
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800102c:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <HAL_GPIO_Init+0x2e8>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x280>
        {
          SET_BIT(temp, iocurrent); 
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001050:	4a19      	ldr	r2, [pc, #100]	; (80010b8 <HAL_GPIO_Init+0x2e8>)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <HAL_GPIO_Init+0x2e8>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x2aa>
        {
          SET_BIT(temp, iocurrent); 
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800107a:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <HAL_GPIO_Init+0x2e8>)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	3301      	adds	r3, #1
 8001084:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	fa22 f303 	lsr.w	r3, r2, r3
 8001090:	2b00      	cmp	r3, #0
 8001092:	f47f aea9 	bne.w	8000de8 <HAL_GPIO_Init+0x18>
  } 
}
 8001096:	bf00      	nop
 8001098:	371c      	adds	r7, #28
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40010000 	.word	0x40010000
 80010a8:	40020000 	.word	0x40020000
 80010ac:	40020400 	.word	0x40020400
 80010b0:	40020800 	.word	0x40020800
 80010b4:	40020c00 	.word	0x40020c00
 80010b8:	40010400 	.word	0x40010400

080010bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	460b      	mov	r3, r1
 80010c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	691a      	ldr	r2, [r3, #16]
 80010cc:	887b      	ldrh	r3, [r7, #2]
 80010ce:	4013      	ands	r3, r2
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d002      	beq.n	80010da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80010d4:	2301      	movs	r3, #1
 80010d6:	73fb      	strb	r3, [r7, #15]
 80010d8:	e001      	b.n	80010de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80010da:	2300      	movs	r3, #0
 80010dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80010de:	7bfb      	ldrb	r3, [r7, #15]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3714      	adds	r7, #20
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc80      	pop	{r7}
 80010e8:	4770      	bx	lr

080010ea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b083      	sub	sp, #12
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	460b      	mov	r3, r1
 80010f4:	807b      	strh	r3, [r7, #2]
 80010f6:	4613      	mov	r3, r2
 80010f8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010fa:	787b      	ldrb	r3, [r7, #1]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d003      	beq.n	8001108 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001100:	887a      	ldrh	r2, [r7, #2]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001106:	e003      	b.n	8001110 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001108:	887b      	ldrh	r3, [r7, #2]
 800110a:	041a      	lsls	r2, r3, #16
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	619a      	str	r2, [r3, #24]
}
 8001110:	bf00      	nop
 8001112:	370c      	adds	r7, #12
 8001114:	46bd      	mov	sp, r7
 8001116:	bc80      	pop	{r7}
 8001118:	4770      	bx	lr

0800111a <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices 
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800111a:	b480      	push	{r7}
 800111c:	b083      	sub	sp, #12
 800111e:	af00      	add	r7, sp, #0
 8001120:	6078      	str	r0, [r7, #4]
 8001122:	460b      	mov	r3, r1
 8001124:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	695a      	ldr	r2, [r3, #20]
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	4013      	ands	r3, r2
 800112e:	2b00      	cmp	r3, #0
 8001130:	d004      	beq.n	800113c <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001132:	887b      	ldrh	r3, [r7, #2]
 8001134:	041a      	lsls	r2, r3, #16
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 800113a:	e002      	b.n	8001142 <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800113c:	887a      	ldrh	r2, [r7, #2]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	619a      	str	r2, [r3, #24]
}
 8001142:	bf00      	nop
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e31d      	b.n	800179a <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800115e:	4b94      	ldr	r3, [pc, #592]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	f003 030c 	and.w	r3, r3, #12
 8001166:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001168:	4b91      	ldr	r3, [pc, #580]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001170:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0301 	and.w	r3, r3, #1
 800117a:	2b00      	cmp	r3, #0
 800117c:	d07b      	beq.n	8001276 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	2b08      	cmp	r3, #8
 8001182:	d006      	beq.n	8001192 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	2b0c      	cmp	r3, #12
 8001188:	d10f      	bne.n	80011aa <HAL_RCC_OscConfig+0x5e>
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001190:	d10b      	bne.n	80011aa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001192:	4b87      	ldr	r3, [pc, #540]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d06a      	beq.n	8001274 <HAL_RCC_OscConfig+0x128>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d166      	bne.n	8001274 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e2f7      	b.n	800179a <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d106      	bne.n	80011c0 <HAL_RCC_OscConfig+0x74>
 80011b2:	4b7f      	ldr	r3, [pc, #508]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	4a7e      	ldr	r2, [pc, #504]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 80011b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011bc:	6013      	str	r3, [r2, #0]
 80011be:	e02d      	b.n	800121c <HAL_RCC_OscConfig+0xd0>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10c      	bne.n	80011e2 <HAL_RCC_OscConfig+0x96>
 80011c8:	4b79      	ldr	r3, [pc, #484]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a78      	ldr	r2, [pc, #480]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 80011ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011d2:	6013      	str	r3, [r2, #0]
 80011d4:	4b76      	ldr	r3, [pc, #472]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a75      	ldr	r2, [pc, #468]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 80011da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011de:	6013      	str	r3, [r2, #0]
 80011e0:	e01c      	b.n	800121c <HAL_RCC_OscConfig+0xd0>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	2b05      	cmp	r3, #5
 80011e8:	d10c      	bne.n	8001204 <HAL_RCC_OscConfig+0xb8>
 80011ea:	4b71      	ldr	r3, [pc, #452]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a70      	ldr	r2, [pc, #448]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 80011f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011f4:	6013      	str	r3, [r2, #0]
 80011f6:	4b6e      	ldr	r3, [pc, #440]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a6d      	ldr	r2, [pc, #436]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 80011fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	e00b      	b.n	800121c <HAL_RCC_OscConfig+0xd0>
 8001204:	4b6a      	ldr	r3, [pc, #424]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a69      	ldr	r2, [pc, #420]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 800120a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800120e:	6013      	str	r3, [r2, #0]
 8001210:	4b67      	ldr	r3, [pc, #412]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a66      	ldr	r2, [pc, #408]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 8001216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d013      	beq.n	800124c <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001224:	f7ff fc7c 	bl	8000b20 <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800122c:	f7ff fc78 	bl	8000b20 <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b64      	cmp	r3, #100	; 0x64
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e2ad      	b.n	800179a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800123e:	4b5c      	ldr	r3, [pc, #368]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001246:	2b00      	cmp	r3, #0
 8001248:	d0f0      	beq.n	800122c <HAL_RCC_OscConfig+0xe0>
 800124a:	e014      	b.n	8001276 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800124c:	f7ff fc68 	bl	8000b20 <HAL_GetTick>
 8001250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001252:	e008      	b.n	8001266 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001254:	f7ff fc64 	bl	8000b20 <HAL_GetTick>
 8001258:	4602      	mov	r2, r0
 800125a:	693b      	ldr	r3, [r7, #16]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	2b64      	cmp	r3, #100	; 0x64
 8001260:	d901      	bls.n	8001266 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8001262:	2303      	movs	r3, #3
 8001264:	e299      	b.n	800179a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001266:	4b52      	ldr	r3, [pc, #328]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1f0      	bne.n	8001254 <HAL_RCC_OscConfig+0x108>
 8001272:	e000      	b.n	8001276 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d05a      	beq.n	8001338 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001282:	69bb      	ldr	r3, [r7, #24]
 8001284:	2b04      	cmp	r3, #4
 8001286:	d005      	beq.n	8001294 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	2b0c      	cmp	r3, #12
 800128c:	d119      	bne.n	80012c2 <HAL_RCC_OscConfig+0x176>
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d116      	bne.n	80012c2 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001294:	4b46      	ldr	r3, [pc, #280]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d005      	beq.n	80012ac <HAL_RCC_OscConfig+0x160>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	68db      	ldr	r3, [r3, #12]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d001      	beq.n	80012ac <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	e276      	b.n	800179a <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ac:	4b40      	ldr	r3, [pc, #256]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	691b      	ldr	r3, [r3, #16]
 80012b8:	021b      	lsls	r3, r3, #8
 80012ba:	493d      	ldr	r1, [pc, #244]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 80012bc:	4313      	orrs	r3, r2
 80012be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c0:	e03a      	b.n	8001338 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d020      	beq.n	800130c <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ca:	4b3a      	ldr	r3, [pc, #232]	; (80013b4 <HAL_RCC_OscConfig+0x268>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012d0:	f7ff fc26 	bl	8000b20 <HAL_GetTick>
 80012d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012d6:	e008      	b.n	80012ea <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d8:	f7ff fc22 	bl	8000b20 <HAL_GetTick>
 80012dc:	4602      	mov	r2, r0
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d901      	bls.n	80012ea <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80012e6:	2303      	movs	r3, #3
 80012e8:	e257      	b.n	800179a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80012ea:	4b31      	ldr	r3, [pc, #196]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d0f0      	beq.n	80012d8 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f6:	4b2e      	ldr	r3, [pc, #184]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	691b      	ldr	r3, [r3, #16]
 8001302:	021b      	lsls	r3, r3, #8
 8001304:	492a      	ldr	r1, [pc, #168]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 8001306:	4313      	orrs	r3, r2
 8001308:	604b      	str	r3, [r1, #4]
 800130a:	e015      	b.n	8001338 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800130c:	4b29      	ldr	r3, [pc, #164]	; (80013b4 <HAL_RCC_OscConfig+0x268>)
 800130e:	2200      	movs	r2, #0
 8001310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001312:	f7ff fc05 	bl	8000b20 <HAL_GetTick>
 8001316:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001318:	e008      	b.n	800132c <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800131a:	f7ff fc01 	bl	8000b20 <HAL_GetTick>
 800131e:	4602      	mov	r2, r0
 8001320:	693b      	ldr	r3, [r7, #16]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	2b02      	cmp	r3, #2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e236      	b.n	800179a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800132c:	4b20      	ldr	r3, [pc, #128]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f0      	bne.n	800131a <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0310 	and.w	r3, r3, #16
 8001340:	2b00      	cmp	r3, #0
 8001342:	f000 80b8 	beq.w	80014b6 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d170      	bne.n	800142e <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800134c:	4b18      	ldr	r3, [pc, #96]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <HAL_RCC_OscConfig+0x218>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	2b00      	cmp	r3, #0
 800135e:	d101      	bne.n	8001364 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e21a      	b.n	800179a <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a1a      	ldr	r2, [r3, #32]
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001370:	429a      	cmp	r2, r3
 8001372:	d921      	bls.n	80013b8 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1b      	ldr	r3, [r3, #32]
 8001378:	4618      	mov	r0, r3
 800137a:	f000 fbd5 	bl	8001b28 <RCC_SetFlashLatencyFromMSIRange>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e208      	b.n	800179a <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	4906      	ldr	r1, [pc, #24]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 8001396:	4313      	orrs	r3, r2
 8001398:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	69db      	ldr	r3, [r3, #28]
 80013a6:	061b      	lsls	r3, r3, #24
 80013a8:	4901      	ldr	r1, [pc, #4]	; (80013b0 <HAL_RCC_OscConfig+0x264>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	604b      	str	r3, [r1, #4]
 80013ae:	e020      	b.n	80013f2 <HAL_RCC_OscConfig+0x2a6>
 80013b0:	40023800 	.word	0x40023800
 80013b4:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013b8:	4ba4      	ldr	r3, [pc, #656]	; (800164c <HAL_RCC_OscConfig+0x500>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6a1b      	ldr	r3, [r3, #32]
 80013c4:	49a1      	ldr	r1, [pc, #644]	; (800164c <HAL_RCC_OscConfig+0x500>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ca:	4ba0      	ldr	r3, [pc, #640]	; (800164c <HAL_RCC_OscConfig+0x500>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	061b      	lsls	r3, r3, #24
 80013d8:	499c      	ldr	r1, [pc, #624]	; (800164c <HAL_RCC_OscConfig+0x500>)
 80013da:	4313      	orrs	r3, r2
 80013dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 fba0 	bl	8001b28 <RCC_SetFlashLatencyFromMSIRange>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e1d3      	b.n	800179a <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	0b5b      	lsrs	r3, r3, #13
 80013f8:	3301      	adds	r3, #1
 80013fa:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001402:	4a92      	ldr	r2, [pc, #584]	; (800164c <HAL_RCC_OscConfig+0x500>)
 8001404:	6892      	ldr	r2, [r2, #8]
 8001406:	0912      	lsrs	r2, r2, #4
 8001408:	f002 020f 	and.w	r2, r2, #15
 800140c:	4990      	ldr	r1, [pc, #576]	; (8001650 <HAL_RCC_OscConfig+0x504>)
 800140e:	5c8a      	ldrb	r2, [r1, r2]
 8001410:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001412:	4a90      	ldr	r2, [pc, #576]	; (8001654 <HAL_RCC_OscConfig+0x508>)
 8001414:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001416:	4b90      	ldr	r3, [pc, #576]	; (8001658 <HAL_RCC_OscConfig+0x50c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4618      	mov	r0, r3
 800141c:	f7ff fb34 	bl	8000a88 <HAL_InitTick>
 8001420:	4603      	mov	r3, r0
 8001422:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d045      	beq.n	80014b6 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800142a:	7bfb      	ldrb	r3, [r7, #15]
 800142c:	e1b5      	b.n	800179a <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	699b      	ldr	r3, [r3, #24]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d029      	beq.n	800148a <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001436:	4b89      	ldr	r3, [pc, #548]	; (800165c <HAL_RCC_OscConfig+0x510>)
 8001438:	2201      	movs	r2, #1
 800143a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143c:	f7ff fb70 	bl	8000b20 <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001444:	f7ff fb6c 	bl	8000b20 <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e1a1      	b.n	800179a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001456:	4b7d      	ldr	r3, [pc, #500]	; (800164c <HAL_RCC_OscConfig+0x500>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001462:	4b7a      	ldr	r3, [pc, #488]	; (800164c <HAL_RCC_OscConfig+0x500>)
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	4977      	ldr	r1, [pc, #476]	; (800164c <HAL_RCC_OscConfig+0x500>)
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001474:	4b75      	ldr	r3, [pc, #468]	; (800164c <HAL_RCC_OscConfig+0x500>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	69db      	ldr	r3, [r3, #28]
 8001480:	061b      	lsls	r3, r3, #24
 8001482:	4972      	ldr	r1, [pc, #456]	; (800164c <HAL_RCC_OscConfig+0x500>)
 8001484:	4313      	orrs	r3, r2
 8001486:	604b      	str	r3, [r1, #4]
 8001488:	e015      	b.n	80014b6 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800148a:	4b74      	ldr	r3, [pc, #464]	; (800165c <HAL_RCC_OscConfig+0x510>)
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001490:	f7ff fb46 	bl	8000b20 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001498:	f7ff fb42 	bl	8000b20 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e177      	b.n	800179a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80014aa:	4b68      	ldr	r3, [pc, #416]	; (800164c <HAL_RCC_OscConfig+0x500>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d1f0      	bne.n	8001498 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 0308 	and.w	r3, r3, #8
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d030      	beq.n	8001524 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d016      	beq.n	80014f8 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ca:	4b65      	ldr	r3, [pc, #404]	; (8001660 <HAL_RCC_OscConfig+0x514>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d0:	f7ff fb26 	bl	8000b20 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014d8:	f7ff fb22 	bl	8000b20 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e157      	b.n	800179a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80014ea:	4b58      	ldr	r3, [pc, #352]	; (800164c <HAL_RCC_OscConfig+0x500>)
 80014ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f0      	beq.n	80014d8 <HAL_RCC_OscConfig+0x38c>
 80014f6:	e015      	b.n	8001524 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014f8:	4b59      	ldr	r3, [pc, #356]	; (8001660 <HAL_RCC_OscConfig+0x514>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014fe:	f7ff fb0f 	bl	8000b20 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001506:	f7ff fb0b 	bl	8000b20 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e140      	b.n	800179a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001518:	4b4c      	ldr	r3, [pc, #304]	; (800164c <HAL_RCC_OscConfig+0x500>)
 800151a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f0      	bne.n	8001506 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 80b5 	beq.w	800169c <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001536:	4b45      	ldr	r3, [pc, #276]	; (800164c <HAL_RCC_OscConfig+0x500>)
 8001538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10d      	bne.n	800155e <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	4b42      	ldr	r3, [pc, #264]	; (800164c <HAL_RCC_OscConfig+0x500>)
 8001544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001546:	4a41      	ldr	r2, [pc, #260]	; (800164c <HAL_RCC_OscConfig+0x500>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	6253      	str	r3, [r2, #36]	; 0x24
 800154e:	4b3f      	ldr	r3, [pc, #252]	; (800164c <HAL_RCC_OscConfig+0x500>)
 8001550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800155a:	2301      	movs	r3, #1
 800155c:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155e:	4b41      	ldr	r3, [pc, #260]	; (8001664 <HAL_RCC_OscConfig+0x518>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d118      	bne.n	800159c <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800156a:	4b3e      	ldr	r3, [pc, #248]	; (8001664 <HAL_RCC_OscConfig+0x518>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a3d      	ldr	r2, [pc, #244]	; (8001664 <HAL_RCC_OscConfig+0x518>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001576:	f7ff fad3 	bl	8000b20 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157e:	f7ff facf 	bl	8000b20 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b64      	cmp	r3, #100	; 0x64
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e104      	b.n	800179a <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001590:	4b34      	ldr	r3, [pc, #208]	; (8001664 <HAL_RCC_OscConfig+0x518>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <HAL_RCC_OscConfig+0x466>
 80015a4:	4b29      	ldr	r3, [pc, #164]	; (800164c <HAL_RCC_OscConfig+0x500>)
 80015a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a8:	4a28      	ldr	r2, [pc, #160]	; (800164c <HAL_RCC_OscConfig+0x500>)
 80015aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ae:	6353      	str	r3, [r2, #52]	; 0x34
 80015b0:	e02d      	b.n	800160e <HAL_RCC_OscConfig+0x4c2>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x488>
 80015ba:	4b24      	ldr	r3, [pc, #144]	; (800164c <HAL_RCC_OscConfig+0x500>)
 80015bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015be:	4a23      	ldr	r2, [pc, #140]	; (800164c <HAL_RCC_OscConfig+0x500>)
 80015c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015c4:	6353      	str	r3, [r2, #52]	; 0x34
 80015c6:	4b21      	ldr	r3, [pc, #132]	; (800164c <HAL_RCC_OscConfig+0x500>)
 80015c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ca:	4a20      	ldr	r2, [pc, #128]	; (800164c <HAL_RCC_OscConfig+0x500>)
 80015cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015d0:	6353      	str	r3, [r2, #52]	; 0x34
 80015d2:	e01c      	b.n	800160e <HAL_RCC_OscConfig+0x4c2>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	2b05      	cmp	r3, #5
 80015da:	d10c      	bne.n	80015f6 <HAL_RCC_OscConfig+0x4aa>
 80015dc:	4b1b      	ldr	r3, [pc, #108]	; (800164c <HAL_RCC_OscConfig+0x500>)
 80015de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015e0:	4a1a      	ldr	r2, [pc, #104]	; (800164c <HAL_RCC_OscConfig+0x500>)
 80015e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015e6:	6353      	str	r3, [r2, #52]	; 0x34
 80015e8:	4b18      	ldr	r3, [pc, #96]	; (800164c <HAL_RCC_OscConfig+0x500>)
 80015ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ec:	4a17      	ldr	r2, [pc, #92]	; (800164c <HAL_RCC_OscConfig+0x500>)
 80015ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015f2:	6353      	str	r3, [r2, #52]	; 0x34
 80015f4:	e00b      	b.n	800160e <HAL_RCC_OscConfig+0x4c2>
 80015f6:	4b15      	ldr	r3, [pc, #84]	; (800164c <HAL_RCC_OscConfig+0x500>)
 80015f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015fa:	4a14      	ldr	r2, [pc, #80]	; (800164c <HAL_RCC_OscConfig+0x500>)
 80015fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001600:	6353      	str	r3, [r2, #52]	; 0x34
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <HAL_RCC_OscConfig+0x500>)
 8001604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001606:	4a11      	ldr	r2, [pc, #68]	; (800164c <HAL_RCC_OscConfig+0x500>)
 8001608:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800160c:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d015      	beq.n	8001642 <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001616:	f7ff fa83 	bl	8000b20 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800161c:	e00a      	b.n	8001634 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161e:	f7ff fa7f 	bl	8000b20 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	f241 3288 	movw	r2, #5000	; 0x1388
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e0b2      	b.n	800179a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <HAL_RCC_OscConfig+0x500>)
 8001636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001638:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0ee      	beq.n	800161e <HAL_RCC_OscConfig+0x4d2>
 8001640:	e023      	b.n	800168a <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001642:	f7ff fa6d 	bl	8000b20 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001648:	e019      	b.n	800167e <HAL_RCC_OscConfig+0x532>
 800164a:	bf00      	nop
 800164c:	40023800 	.word	0x40023800
 8001650:	08003048 	.word	0x08003048
 8001654:	20000004 	.word	0x20000004
 8001658:	20000008 	.word	0x20000008
 800165c:	42470020 	.word	0x42470020
 8001660:	42470680 	.word	0x42470680
 8001664:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001668:	f7ff fa5a 	bl	8000b20 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	f241 3288 	movw	r2, #5000	; 0x1388
 8001676:	4293      	cmp	r3, r2
 8001678:	d901      	bls.n	800167e <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e08d      	b.n	800179a <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800167e:	4b49      	ldr	r3, [pc, #292]	; (80017a4 <HAL_RCC_OscConfig+0x658>)
 8001680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001686:	2b00      	cmp	r3, #0
 8001688:	d1ee      	bne.n	8001668 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800168a:	7ffb      	ldrb	r3, [r7, #31]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d105      	bne.n	800169c <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001690:	4b44      	ldr	r3, [pc, #272]	; (80017a4 <HAL_RCC_OscConfig+0x658>)
 8001692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001694:	4a43      	ldr	r2, [pc, #268]	; (80017a4 <HAL_RCC_OscConfig+0x658>)
 8001696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800169a:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d079      	beq.n	8001798 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	2b0c      	cmp	r3, #12
 80016a8:	d056      	beq.n	8001758 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	2b02      	cmp	r3, #2
 80016b0:	d13b      	bne.n	800172a <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b2:	4b3d      	ldr	r3, [pc, #244]	; (80017a8 <HAL_RCC_OscConfig+0x65c>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b8:	f7ff fa32 	bl	8000b20 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c0:	f7ff fa2e 	bl	8000b20 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e063      	b.n	800179a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016d2:	4b34      	ldr	r3, [pc, #208]	; (80017a4 <HAL_RCC_OscConfig+0x658>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016de:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <HAL_RCC_OscConfig+0x658>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ee:	4319      	orrs	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f4:	430b      	orrs	r3, r1
 80016f6:	492b      	ldr	r1, [pc, #172]	; (80017a4 <HAL_RCC_OscConfig+0x658>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016fc:	4b2a      	ldr	r3, [pc, #168]	; (80017a8 <HAL_RCC_OscConfig+0x65c>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7ff fa0d 	bl	8000b20 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170a:	f7ff fa09 	bl	8000b20 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e03e      	b.n	800179a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800171c:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <HAL_RCC_OscConfig+0x658>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x5be>
 8001728:	e036      	b.n	8001798 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172a:	4b1f      	ldr	r3, [pc, #124]	; (80017a8 <HAL_RCC_OscConfig+0x65c>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff f9f6 	bl	8000b20 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001738:	f7ff f9f2 	bl	8000b20 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e027      	b.n	800179a <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800174a:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <HAL_RCC_OscConfig+0x658>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x5ec>
 8001756:	e01f      	b.n	8001798 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	2b01      	cmp	r3, #1
 800175e:	d101      	bne.n	8001764 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e01a      	b.n	800179a <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001764:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <HAL_RCC_OscConfig+0x658>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001774:	429a      	cmp	r2, r3
 8001776:	d10d      	bne.n	8001794 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001782:	429a      	cmp	r2, r3
 8001784:	d106      	bne.n	8001794 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001790:	429a      	cmp	r2, r3
 8001792:	d001      	beq.n	8001798 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e000      	b.n	800179a <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	3720      	adds	r7, #32
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40023800 	.word	0x40023800
 80017a8:	42470060 	.word	0x42470060

080017ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e11a      	b.n	80019f6 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c0:	4b8f      	ldr	r3, [pc, #572]	; (8001a00 <HAL_RCC_ClockConfig+0x254>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0301 	and.w	r3, r3, #1
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d919      	bls.n	8001802 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d105      	bne.n	80017e0 <HAL_RCC_ClockConfig+0x34>
 80017d4:	4b8a      	ldr	r3, [pc, #552]	; (8001a00 <HAL_RCC_ClockConfig+0x254>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a89      	ldr	r2, [pc, #548]	; (8001a00 <HAL_RCC_ClockConfig+0x254>)
 80017da:	f043 0304 	orr.w	r3, r3, #4
 80017de:	6013      	str	r3, [r2, #0]
 80017e0:	4b87      	ldr	r3, [pc, #540]	; (8001a00 <HAL_RCC_ClockConfig+0x254>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f023 0201 	bic.w	r2, r3, #1
 80017e8:	4985      	ldr	r1, [pc, #532]	; (8001a00 <HAL_RCC_ClockConfig+0x254>)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f0:	4b83      	ldr	r3, [pc, #524]	; (8001a00 <HAL_RCC_ClockConfig+0x254>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 0301 	and.w	r3, r3, #1
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d001      	beq.n	8001802 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e0f9      	b.n	80019f6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d008      	beq.n	8001820 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800180e:	4b7d      	ldr	r3, [pc, #500]	; (8001a04 <HAL_RCC_ClockConfig+0x258>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	497a      	ldr	r1, [pc, #488]	; (8001a04 <HAL_RCC_ClockConfig+0x258>)
 800181c:	4313      	orrs	r3, r2
 800181e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 808e 	beq.w	800194a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001836:	4b73      	ldr	r3, [pc, #460]	; (8001a04 <HAL_RCC_ClockConfig+0x258>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d121      	bne.n	8001886 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e0d7      	b.n	80019f6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b03      	cmp	r3, #3
 800184c:	d107      	bne.n	800185e <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800184e:	4b6d      	ldr	r3, [pc, #436]	; (8001a04 <HAL_RCC_ClockConfig+0x258>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d115      	bne.n	8001886 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e0cb      	b.n	80019f6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d107      	bne.n	8001876 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001866:	4b67      	ldr	r3, [pc, #412]	; (8001a04 <HAL_RCC_ClockConfig+0x258>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f003 0302 	and.w	r3, r3, #2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d109      	bne.n	8001886 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e0bf      	b.n	80019f6 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001876:	4b63      	ldr	r3, [pc, #396]	; (8001a04 <HAL_RCC_ClockConfig+0x258>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800187e:	2b00      	cmp	r3, #0
 8001880:	d101      	bne.n	8001886 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e0b7      	b.n	80019f6 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001886:	4b5f      	ldr	r3, [pc, #380]	; (8001a04 <HAL_RCC_ClockConfig+0x258>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f023 0203 	bic.w	r2, r3, #3
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	495c      	ldr	r1, [pc, #368]	; (8001a04 <HAL_RCC_ClockConfig+0x258>)
 8001894:	4313      	orrs	r3, r2
 8001896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001898:	f7ff f942 	bl	8000b20 <HAL_GetTick>
 800189c:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d112      	bne.n	80018cc <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018a6:	e00a      	b.n	80018be <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a8:	f7ff f93a 	bl	8000b20 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e09b      	b.n	80019f6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80018be:	4b51      	ldr	r3, [pc, #324]	; (8001a04 <HAL_RCC_ClockConfig+0x258>)
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f003 030c 	and.w	r3, r3, #12
 80018c6:	2b08      	cmp	r3, #8
 80018c8:	d1ee      	bne.n	80018a8 <HAL_RCC_ClockConfig+0xfc>
 80018ca:	e03e      	b.n	800194a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b03      	cmp	r3, #3
 80018d2:	d112      	bne.n	80018fa <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d4:	e00a      	b.n	80018ec <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d6:	f7ff f923 	bl	8000b20 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e084      	b.n	80019f6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018ec:	4b45      	ldr	r3, [pc, #276]	; (8001a04 <HAL_RCC_ClockConfig+0x258>)
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f003 030c 	and.w	r3, r3, #12
 80018f4:	2b0c      	cmp	r3, #12
 80018f6:	d1ee      	bne.n	80018d6 <HAL_RCC_ClockConfig+0x12a>
 80018f8:	e027      	b.n	800194a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d11d      	bne.n	800193e <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001902:	e00a      	b.n	800191a <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001904:	f7ff f90c 	bl	8000b20 <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001912:	4293      	cmp	r3, r2
 8001914:	d901      	bls.n	800191a <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e06d      	b.n	80019f6 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800191a:	4b3a      	ldr	r3, [pc, #232]	; (8001a04 <HAL_RCC_ClockConfig+0x258>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b04      	cmp	r3, #4
 8001924:	d1ee      	bne.n	8001904 <HAL_RCC_ClockConfig+0x158>
 8001926:	e010      	b.n	800194a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001928:	f7ff f8fa 	bl	8000b20 <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	f241 3288 	movw	r2, #5000	; 0x1388
 8001936:	4293      	cmp	r3, r2
 8001938:	d901      	bls.n	800193e <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e05b      	b.n	80019f6 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800193e:	4b31      	ldr	r3, [pc, #196]	; (8001a04 <HAL_RCC_ClockConfig+0x258>)
 8001940:	689b      	ldr	r3, [r3, #8]
 8001942:	f003 030c 	and.w	r3, r3, #12
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1ee      	bne.n	8001928 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800194a:	4b2d      	ldr	r3, [pc, #180]	; (8001a00 <HAL_RCC_ClockConfig+0x254>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	683a      	ldr	r2, [r7, #0]
 8001954:	429a      	cmp	r2, r3
 8001956:	d219      	bcs.n	800198c <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d105      	bne.n	800196a <HAL_RCC_ClockConfig+0x1be>
 800195e:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <HAL_RCC_ClockConfig+0x254>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a27      	ldr	r2, [pc, #156]	; (8001a00 <HAL_RCC_ClockConfig+0x254>)
 8001964:	f043 0304 	orr.w	r3, r3, #4
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	4b25      	ldr	r3, [pc, #148]	; (8001a00 <HAL_RCC_ClockConfig+0x254>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 0201 	bic.w	r2, r3, #1
 8001972:	4923      	ldr	r1, [pc, #140]	; (8001a00 <HAL_RCC_ClockConfig+0x254>)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	4313      	orrs	r3, r2
 8001978:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800197a:	4b21      	ldr	r3, [pc, #132]	; (8001a00 <HAL_RCC_ClockConfig+0x254>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	683a      	ldr	r2, [r7, #0]
 8001984:	429a      	cmp	r2, r3
 8001986:	d001      	beq.n	800198c <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e034      	b.n	80019f6 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0304 	and.w	r3, r3, #4
 8001994:	2b00      	cmp	r3, #0
 8001996:	d008      	beq.n	80019aa <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001998:	4b1a      	ldr	r3, [pc, #104]	; (8001a04 <HAL_RCC_ClockConfig+0x258>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	4917      	ldr	r1, [pc, #92]	; (8001a04 <HAL_RCC_ClockConfig+0x258>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0308 	and.w	r3, r3, #8
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d009      	beq.n	80019ca <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019b6:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <HAL_RCC_ClockConfig+0x258>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	691b      	ldr	r3, [r3, #16]
 80019c2:	00db      	lsls	r3, r3, #3
 80019c4:	490f      	ldr	r1, [pc, #60]	; (8001a04 <HAL_RCC_ClockConfig+0x258>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80019ca:	f000 f823 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 80019ce:	4601      	mov	r1, r0
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_RCC_ClockConfig+0x258>)
 80019d2:	689b      	ldr	r3, [r3, #8]
 80019d4:	091b      	lsrs	r3, r3, #4
 80019d6:	f003 030f 	and.w	r3, r3, #15
 80019da:	4a0b      	ldr	r2, [pc, #44]	; (8001a08 <HAL_RCC_ClockConfig+0x25c>)
 80019dc:	5cd3      	ldrb	r3, [r2, r3]
 80019de:	fa21 f303 	lsr.w	r3, r1, r3
 80019e2:	4a0a      	ldr	r2, [pc, #40]	; (8001a0c <HAL_RCC_ClockConfig+0x260>)
 80019e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <HAL_RCC_ClockConfig+0x264>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff f84c 	bl	8000a88 <HAL_InitTick>
 80019f0:	4603      	mov	r3, r0
 80019f2:	72fb      	strb	r3, [r7, #11]

  return status;
 80019f4:	7afb      	ldrb	r3, [r7, #11]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023c00 	.word	0x40023c00
 8001a04:	40023800 	.word	0x40023800
 8001a08:	08003048 	.word	0x08003048
 8001a0c:	20000004 	.word	0x20000004
 8001a10:	20000008 	.word	0x20000008

08001a14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001a1a:	4b26      	ldr	r3, [pc, #152]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d006      	beq.n	8001a38 <HAL_RCC_GetSysClockFreq+0x24>
 8001a2a:	2b0c      	cmp	r3, #12
 8001a2c:	d007      	beq.n	8001a3e <HAL_RCC_GetSysClockFreq+0x2a>
 8001a2e:	2b04      	cmp	r3, #4
 8001a30:	d12c      	bne.n	8001a8c <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a32:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a34:	613b      	str	r3, [r7, #16]
      break;
 8001a36:	e037      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a38:	4b20      	ldr	r3, [pc, #128]	; (8001abc <HAL_RCC_GetSysClockFreq+0xa8>)
 8001a3a:	613b      	str	r3, [r7, #16]
      break;
 8001a3c:	e034      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	0c9b      	lsrs	r3, r3, #18
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	4a1e      	ldr	r2, [pc, #120]	; (8001ac0 <HAL_RCC_GetSysClockFreq+0xac>)
 8001a48:	5cd3      	ldrb	r3, [r2, r3]
 8001a4a:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	0d9b      	lsrs	r3, r3, #22
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	3301      	adds	r3, #1
 8001a56:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d008      	beq.n	8001a76 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	4a15      	ldr	r2, [pc, #84]	; (8001abc <HAL_RCC_GetSysClockFreq+0xa8>)
 8001a68:	fb02 f203 	mul.w	r2, r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	e007      	b.n	8001a86 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	4a0f      	ldr	r2, [pc, #60]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a7a:	fb02 f203 	mul.w	r2, r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a84:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	613b      	str	r3, [r7, #16]
      break;
 8001a8a:	e00d      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	0b5b      	lsrs	r3, r3, #13
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	613b      	str	r3, [r7, #16]
      break;
 8001aa6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aa8:	693b      	ldr	r3, [r7, #16]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	371c      	adds	r7, #28
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	00f42400 	.word	0x00f42400
 8001abc:	007a1200 	.word	0x007a1200
 8001ac0:	0800303c 	.word	0x0800303c

08001ac4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac8:	4b02      	ldr	r3, [pc, #8]	; (8001ad4 <HAL_RCC_GetHCLKFreq+0x10>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bc80      	pop	{r7}
 8001ad2:	4770      	bx	lr
 8001ad4:	20000004 	.word	0x20000004

08001ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001adc:	f7ff fff2 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 8001ae0:	4601      	mov	r1, r0
 8001ae2:	4b05      	ldr	r3, [pc, #20]	; (8001af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	0a1b      	lsrs	r3, r3, #8
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	4a03      	ldr	r2, [pc, #12]	; (8001afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aee:	5cd3      	ldrb	r3, [r2, r3]
 8001af0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	40023800 	.word	0x40023800
 8001afc:	08003058 	.word	0x08003058

08001b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b04:	f7ff ffde 	bl	8001ac4 <HAL_RCC_GetHCLKFreq>
 8001b08:	4601      	mov	r1, r0
 8001b0a:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	0adb      	lsrs	r3, r3, #11
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	4a03      	ldr	r2, [pc, #12]	; (8001b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b16:	5cd3      	ldrb	r3, [r2, r3]
 8001b18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40023800 	.word	0x40023800
 8001b24:	08003058 	.word	0x08003058

08001b28 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b087      	sub	sp, #28
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001b30:	2300      	movs	r3, #0
 8001b32:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b34:	4b29      	ldr	r3, [pc, #164]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d12c      	bne.n	8001b9a <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001b40:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b4c:	4b24      	ldr	r3, [pc, #144]	; (8001be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	e016      	b.n	8001b86 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b58:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5c:	4a1f      	ldr	r2, [pc, #124]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b62:	6253      	str	r3, [r2, #36]	; 0x24
 8001b64:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b6c:	60fb      	str	r3, [r7, #12]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001b70:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001b78:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b7a:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	4a17      	ldr	r2, [pc, #92]	; (8001bdc <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b84:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001b8c:	d105      	bne.n	8001b9a <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001b94:	d101      	bne.n	8001b9a <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001b96:	2301      	movs	r3, #1
 8001b98:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d105      	bne.n	8001bac <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001ba0:	4b10      	ldr	r3, [pc, #64]	; (8001be4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a0f      	ldr	r2, [pc, #60]	; (8001be4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ba6:	f043 0304 	orr.w	r3, r3, #4
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f023 0201 	bic.w	r2, r3, #1
 8001bb4:	490b      	ldr	r1, [pc, #44]	; (8001be4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001bbc:	4b09      	ldr	r3, [pc, #36]	; (8001be4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	429a      	cmp	r2, r3
 8001bc8:	d001      	beq.n	8001bce <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e000      	b.n	8001bd0 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001bce:	2300      	movs	r3, #0
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	371c      	adds	r7, #28
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bc80      	pop	{r7}
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40007000 	.word	0x40007000
 8001be4:	40023c00 	.word	0x40023c00

08001be8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d101      	bne.n	8001bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e03f      	b.n	8001c7a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d106      	bne.n	8001c14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f7fe feb0 	bl	8000974 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2224      	movs	r2, #36	; 0x24
 8001c18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	68da      	ldr	r2, [r3, #12]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 fadd 	bl	80021ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	691a      	ldr	r2, [r3, #16]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	695a      	ldr	r2, [r3, #20]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2220      	movs	r2, #32
 8001c6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3708      	adds	r7, #8
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}

08001c82 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b085      	sub	sp, #20
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	60f8      	str	r0, [r7, #12]
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b20      	cmp	r3, #32
 8001c9a:	d130      	bne.n	8001cfe <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <HAL_UART_Transmit_IT+0x26>
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e029      	b.n	8001d00 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d101      	bne.n	8001cba <HAL_UART_Transmit_IT+0x38>
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	e022      	b.n	8001d00 <HAL_UART_Transmit_IT+0x7e>
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	68ba      	ldr	r2, [r7, #8]
 8001cc6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	88fa      	ldrh	r2, [r7, #6]
 8001ccc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	88fa      	ldrh	r2, [r7, #6]
 8001cd2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2221      	movs	r2, #33	; 0x21
 8001cde:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001cf8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	e000      	b.n	8001d00 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001cfe:	2302      	movs	r3, #2
  }
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3714      	adds	r7, #20
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bc80      	pop	{r7}
 8001d08:	4770      	bx	lr

08001d0a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b085      	sub	sp, #20
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	60f8      	str	r0, [r7, #12]
 8001d12:	60b9      	str	r1, [r7, #8]
 8001d14:	4613      	mov	r3, r2
 8001d16:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b20      	cmp	r3, #32
 8001d22:	d140      	bne.n	8001da6 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d002      	beq.n	8001d30 <HAL_UART_Receive_IT+0x26>
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d101      	bne.n	8001d34 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e039      	b.n	8001da8 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_UART_Receive_IT+0x38>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e032      	b.n	8001da8 <HAL_UART_Receive_IT+0x9e>
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	88fa      	ldrh	r2, [r7, #6]
 8001d54:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	88fa      	ldrh	r2, [r7, #6]
 8001d5a:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2222      	movs	r2, #34	; 0x22
 8001d66:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68da      	ldr	r2, [r3, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d80:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695a      	ldr	r2, [r3, #20]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f042 0220 	orr.w	r2, r2, #32
 8001da0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001da2:	2300      	movs	r3, #0
 8001da4:	e000      	b.n	8001da8 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001da6:	2302      	movs	r3, #2
  }
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
	...

08001db4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b088      	sub	sp, #32
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	68db      	ldr	r3, [r3, #12]
 8001dca:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695b      	ldr	r3, [r3, #20]
 8001dd2:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d10d      	bne.n	8001e06 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	f003 0320 	and.w	r3, r3, #32
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d008      	beq.n	8001e06 <HAL_UART_IRQHandler+0x52>
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	f003 0320 	and.w	r3, r3, #32
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f000 f972 	bl	80020e8 <UART_Receive_IT>
      return;
 8001e04:	e0cc      	b.n	8001fa0 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 80ab 	beq.w	8001f64 <HAL_UART_IRQHandler+0x1b0>
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d105      	bne.n	8001e24 <HAL_UART_IRQHandler+0x70>
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 80a0 	beq.w	8001f64 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00a      	beq.n	8001e44 <HAL_UART_IRQHandler+0x90>
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d005      	beq.n	8001e44 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e3c:	f043 0201 	orr.w	r2, r3, #1
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e44:	69fb      	ldr	r3, [r7, #28]
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00a      	beq.n	8001e64 <HAL_UART_IRQHandler+0xb0>
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	f003 0301 	and.w	r3, r3, #1
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d005      	beq.n	8001e64 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e5c:	f043 0202 	orr.w	r2, r3, #2
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d00a      	beq.n	8001e84 <HAL_UART_IRQHandler+0xd0>
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e7c:	f043 0204 	orr.w	r2, r3, #4
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	f003 0308 	and.w	r3, r3, #8
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00a      	beq.n	8001ea4 <HAL_UART_IRQHandler+0xf0>
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f003 0301 	and.w	r3, r3, #1
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e9c:	f043 0208 	orr.w	r2, r3, #8
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d078      	beq.n	8001f9e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f003 0320 	and.w	r3, r3, #32
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d007      	beq.n	8001ec6 <HAL_UART_IRQHandler+0x112>
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	f003 0320 	and.w	r3, r3, #32
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d002      	beq.n	8001ec6 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	f000 f911 	bl	80020e8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	695b      	ldr	r3, [r3, #20]
 8001ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed0:	2b40      	cmp	r3, #64	; 0x40
 8001ed2:	bf0c      	ite	eq
 8001ed4:	2301      	moveq	r3, #1
 8001ed6:	2300      	movne	r3, #0
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d102      	bne.n	8001eee <HAL_UART_IRQHandler+0x13a>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d031      	beq.n	8001f52 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f85c 	bl	8001fac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001efe:	2b40      	cmp	r3, #64	; 0x40
 8001f00:	d123      	bne.n	8001f4a <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	695a      	ldr	r2, [r3, #20]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001f10:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d013      	beq.n	8001f42 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f1e:	4a22      	ldr	r2, [pc, #136]	; (8001fa8 <HAL_UART_IRQHandler+0x1f4>)
 8001f20:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe ff11 	bl	8000d4e <HAL_DMA_Abort_IT>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d016      	beq.n	8001f60 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f38:	687a      	ldr	r2, [r7, #4]
 8001f3a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f40:	e00e      	b.n	8001f60 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7fe fb2e 	bl	80005a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f48:	e00a      	b.n	8001f60 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001f4a:	6878      	ldr	r0, [r7, #4]
 8001f4c:	f7fe fb2a 	bl	80005a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f50:	e006      	b.n	8001f60 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7fe fb26 	bl	80005a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001f5e:	e01e      	b.n	8001f9e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001f60:	bf00      	nop
    return;
 8001f62:	e01c      	b.n	8001f9e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d008      	beq.n	8001f80 <HAL_UART_IRQHandler+0x1cc>
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 f848 	bl	800200e <UART_Transmit_IT>
    return;
 8001f7e:	e00f      	b.n	8001fa0 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d00a      	beq.n	8001fa0 <HAL_UART_IRQHandler+0x1ec>
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d005      	beq.n	8001fa0 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001f94:	6878      	ldr	r0, [r7, #4]
 8001f96:	f000 f88f 	bl	80020b8 <UART_EndTransmit_IT>
    return;
 8001f9a:	bf00      	nop
 8001f9c:	e000      	b.n	8001fa0 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001f9e:	bf00      	nop
  }
}
 8001fa0:	3720      	adds	r7, #32
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	08001fe7 	.word	0x08001fe7

08001fac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001fc2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695a      	ldr	r2, [r3, #20]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2220      	movs	r2, #32
 8001fd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001fdc:	bf00      	nop
 8001fde:	370c      	adds	r7, #12
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bc80      	pop	{r7}
 8001fe4:	4770      	bx	lr

08001fe6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b084      	sub	sp, #16
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002000:	68f8      	ldr	r0, [r7, #12]
 8002002:	f7fe facf 	bl	80005a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002006:	bf00      	nop
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}

0800200e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800200e:	b480      	push	{r7}
 8002010:	b085      	sub	sp, #20
 8002012:	af00      	add	r7, sp, #0
 8002014:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b21      	cmp	r3, #33	; 0x21
 8002020:	d144      	bne.n	80020ac <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800202a:	d11a      	bne.n	8002062 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002040:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d105      	bne.n	8002056 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	1c9a      	adds	r2, r3, #2
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	621a      	str	r2, [r3, #32]
 8002054:	e00e      	b.n	8002074 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	1c5a      	adds	r2, r3, #1
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	621a      	str	r2, [r3, #32]
 8002060:	e008      	b.n	8002074 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	1c59      	adds	r1, r3, #1
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6211      	str	r1, [r2, #32]
 800206c:	781a      	ldrb	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002078:	b29b      	uxth	r3, r3
 800207a:	3b01      	subs	r3, #1
 800207c:	b29b      	uxth	r3, r3
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	4619      	mov	r1, r3
 8002082:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10f      	bne.n	80020a8 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	68da      	ldr	r2, [r3, #12]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002096:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68da      	ldr	r2, [r3, #12]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80020a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	e000      	b.n	80020ae <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80020ac:	2302      	movs	r3, #2
  }
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80020ce:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2220      	movs	r2, #32
 80020d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f7fe fa3f 	bl	800055c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80020de:	2300      	movs	r3, #0
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b084      	sub	sp, #16
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	2b22      	cmp	r3, #34	; 0x22
 80020fa:	d171      	bne.n	80021e0 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002104:	d123      	bne.n	800214e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	691b      	ldr	r3, [r3, #16]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10e      	bne.n	8002132 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	b29b      	uxth	r3, r3
 800211c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002120:	b29a      	uxth	r2, r3
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212a:	1c9a      	adds	r2, r3, #2
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	629a      	str	r2, [r3, #40]	; 0x28
 8002130:	e029      	b.n	8002186 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	b29b      	uxth	r3, r3
 800213a:	b2db      	uxtb	r3, r3
 800213c:	b29a      	uxth	r2, r3
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	629a      	str	r2, [r3, #40]	; 0x28
 800214c:	e01b      	b.n	8002186 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	691b      	ldr	r3, [r3, #16]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d10a      	bne.n	800216c <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	6858      	ldr	r0, [r3, #4]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002160:	1c59      	adds	r1, r3, #1
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6291      	str	r1, [r2, #40]	; 0x28
 8002166:	b2c2      	uxtb	r2, r0
 8002168:	701a      	strb	r2, [r3, #0]
 800216a:	e00c      	b.n	8002186 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	b2da      	uxtb	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002178:	1c58      	adds	r0, r3, #1
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	6288      	str	r0, [r1, #40]	; 0x28
 800217e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002182:	b2d2      	uxtb	r2, r2
 8002184:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800218a:	b29b      	uxth	r3, r3
 800218c:	3b01      	subs	r3, #1
 800218e:	b29b      	uxth	r3, r3
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	4619      	mov	r1, r3
 8002194:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002196:	2b00      	cmp	r3, #0
 8002198:	d120      	bne.n	80021dc <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f022 0220 	bic.w	r2, r2, #32
 80021a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f022 0201 	bic.w	r2, r2, #1
 80021c8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2220      	movs	r2, #32
 80021ce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe f9b4 	bl	8000540 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80021d8:	2300      	movs	r3, #0
 80021da:	e002      	b.n	80021e2 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80021dc:	2300      	movs	r3, #0
 80021de:	e000      	b.n	80021e2 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80021e0:	2302      	movs	r3, #2
  }
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
	...

080021ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	68da      	ldr	r2, [r3, #12]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	430a      	orrs	r2, r1
 8002208:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	689a      	ldr	r2, [r3, #8]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	431a      	orrs	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	695b      	ldr	r3, [r3, #20]
 8002218:	431a      	orrs	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	4313      	orrs	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800222c:	f023 030c 	bic.w	r3, r3, #12
 8002230:	687a      	ldr	r2, [r7, #4]
 8002232:	6812      	ldr	r2, [r2, #0]
 8002234:	68f9      	ldr	r1, [r7, #12]
 8002236:	430b      	orrs	r3, r1
 8002238:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	699a      	ldr	r2, [r3, #24]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002258:	f040 80a5 	bne.w	80023a6 <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4aa4      	ldr	r2, [pc, #656]	; (80024f4 <UART_SetConfig+0x308>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d14f      	bne.n	8002306 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002266:	f7ff fc4b 	bl	8001b00 <HAL_RCC_GetPCLK2Freq>
 800226a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	4613      	mov	r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	009a      	lsls	r2, r3, #2
 8002276:	441a      	add	r2, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002282:	4a9d      	ldr	r2, [pc, #628]	; (80024f8 <UART_SetConfig+0x30c>)
 8002284:	fba2 2303 	umull	r2, r3, r2, r3
 8002288:	095b      	lsrs	r3, r3, #5
 800228a:	0119      	lsls	r1, r3, #4
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	4613      	mov	r3, r2
 8002290:	009b      	lsls	r3, r3, #2
 8002292:	4413      	add	r3, r2
 8002294:	009a      	lsls	r2, r3, #2
 8002296:	441a      	add	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	fbb2 f2f3 	udiv	r2, r2, r3
 80022a2:	4b95      	ldr	r3, [pc, #596]	; (80024f8 <UART_SetConfig+0x30c>)
 80022a4:	fba3 0302 	umull	r0, r3, r3, r2
 80022a8:	095b      	lsrs	r3, r3, #5
 80022aa:	2064      	movs	r0, #100	; 0x64
 80022ac:	fb00 f303 	mul.w	r3, r0, r3
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	00db      	lsls	r3, r3, #3
 80022b4:	3332      	adds	r3, #50	; 0x32
 80022b6:	4a90      	ldr	r2, [pc, #576]	; (80024f8 <UART_SetConfig+0x30c>)
 80022b8:	fba2 2303 	umull	r2, r3, r2, r3
 80022bc:	095b      	lsrs	r3, r3, #5
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80022c4:	4419      	add	r1, r3
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	009a      	lsls	r2, r3, #2
 80022d0:	441a      	add	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80022dc:	4b86      	ldr	r3, [pc, #536]	; (80024f8 <UART_SetConfig+0x30c>)
 80022de:	fba3 0302 	umull	r0, r3, r3, r2
 80022e2:	095b      	lsrs	r3, r3, #5
 80022e4:	2064      	movs	r0, #100	; 0x64
 80022e6:	fb00 f303 	mul.w	r3, r0, r3
 80022ea:	1ad3      	subs	r3, r2, r3
 80022ec:	00db      	lsls	r3, r3, #3
 80022ee:	3332      	adds	r3, #50	; 0x32
 80022f0:	4a81      	ldr	r2, [pc, #516]	; (80024f8 <UART_SetConfig+0x30c>)
 80022f2:	fba2 2303 	umull	r2, r3, r2, r3
 80022f6:	095b      	lsrs	r3, r3, #5
 80022f8:	f003 0207 	and.w	r2, r3, #7
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	440a      	add	r2, r1
 8002302:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002304:	e0f1      	b.n	80024ea <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002306:	f7ff fbe7 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
 800230a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800230c:	68ba      	ldr	r2, [r7, #8]
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	009a      	lsls	r2, r3, #2
 8002316:	441a      	add	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002322:	4a75      	ldr	r2, [pc, #468]	; (80024f8 <UART_SetConfig+0x30c>)
 8002324:	fba2 2303 	umull	r2, r3, r2, r3
 8002328:	095b      	lsrs	r3, r3, #5
 800232a:	0119      	lsls	r1, r3, #4
 800232c:	68ba      	ldr	r2, [r7, #8]
 800232e:	4613      	mov	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	4413      	add	r3, r2
 8002334:	009a      	lsls	r2, r3, #2
 8002336:	441a      	add	r2, r3
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002342:	4b6d      	ldr	r3, [pc, #436]	; (80024f8 <UART_SetConfig+0x30c>)
 8002344:	fba3 0302 	umull	r0, r3, r3, r2
 8002348:	095b      	lsrs	r3, r3, #5
 800234a:	2064      	movs	r0, #100	; 0x64
 800234c:	fb00 f303 	mul.w	r3, r0, r3
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	00db      	lsls	r3, r3, #3
 8002354:	3332      	adds	r3, #50	; 0x32
 8002356:	4a68      	ldr	r2, [pc, #416]	; (80024f8 <UART_SetConfig+0x30c>)
 8002358:	fba2 2303 	umull	r2, r3, r2, r3
 800235c:	095b      	lsrs	r3, r3, #5
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002364:	4419      	add	r1, r3
 8002366:	68ba      	ldr	r2, [r7, #8]
 8002368:	4613      	mov	r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	4413      	add	r3, r2
 800236e:	009a      	lsls	r2, r3, #2
 8002370:	441a      	add	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	005b      	lsls	r3, r3, #1
 8002378:	fbb2 f2f3 	udiv	r2, r2, r3
 800237c:	4b5e      	ldr	r3, [pc, #376]	; (80024f8 <UART_SetConfig+0x30c>)
 800237e:	fba3 0302 	umull	r0, r3, r3, r2
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	2064      	movs	r0, #100	; 0x64
 8002386:	fb00 f303 	mul.w	r3, r0, r3
 800238a:	1ad3      	subs	r3, r2, r3
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	3332      	adds	r3, #50	; 0x32
 8002390:	4a59      	ldr	r2, [pc, #356]	; (80024f8 <UART_SetConfig+0x30c>)
 8002392:	fba2 2303 	umull	r2, r3, r2, r3
 8002396:	095b      	lsrs	r3, r3, #5
 8002398:	f003 0207 	and.w	r2, r3, #7
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	440a      	add	r2, r1
 80023a2:	609a      	str	r2, [r3, #8]
}
 80023a4:	e0a1      	b.n	80024ea <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a52      	ldr	r2, [pc, #328]	; (80024f4 <UART_SetConfig+0x308>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d14e      	bne.n	800244e <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 80023b0:	f7ff fba6 	bl	8001b00 <HAL_RCC_GetPCLK2Freq>
 80023b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	4613      	mov	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4413      	add	r3, r2
 80023be:	009a      	lsls	r2, r3, #2
 80023c0:	441a      	add	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	009b      	lsls	r3, r3, #2
 80023c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023cc:	4a4a      	ldr	r2, [pc, #296]	; (80024f8 <UART_SetConfig+0x30c>)
 80023ce:	fba2 2303 	umull	r2, r3, r2, r3
 80023d2:	095b      	lsrs	r3, r3, #5
 80023d4:	0119      	lsls	r1, r3, #4
 80023d6:	68ba      	ldr	r2, [r7, #8]
 80023d8:	4613      	mov	r3, r2
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	4413      	add	r3, r2
 80023de:	009a      	lsls	r2, r3, #2
 80023e0:	441a      	add	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023ec:	4b42      	ldr	r3, [pc, #264]	; (80024f8 <UART_SetConfig+0x30c>)
 80023ee:	fba3 0302 	umull	r0, r3, r3, r2
 80023f2:	095b      	lsrs	r3, r3, #5
 80023f4:	2064      	movs	r0, #100	; 0x64
 80023f6:	fb00 f303 	mul.w	r3, r0, r3
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	011b      	lsls	r3, r3, #4
 80023fe:	3332      	adds	r3, #50	; 0x32
 8002400:	4a3d      	ldr	r2, [pc, #244]	; (80024f8 <UART_SetConfig+0x30c>)
 8002402:	fba2 2303 	umull	r2, r3, r2, r3
 8002406:	095b      	lsrs	r3, r3, #5
 8002408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800240c:	4419      	add	r1, r3
 800240e:	68ba      	ldr	r2, [r7, #8]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	009a      	lsls	r2, r3, #2
 8002418:	441a      	add	r2, r3
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	fbb2 f2f3 	udiv	r2, r2, r3
 8002424:	4b34      	ldr	r3, [pc, #208]	; (80024f8 <UART_SetConfig+0x30c>)
 8002426:	fba3 0302 	umull	r0, r3, r3, r2
 800242a:	095b      	lsrs	r3, r3, #5
 800242c:	2064      	movs	r0, #100	; 0x64
 800242e:	fb00 f303 	mul.w	r3, r0, r3
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	3332      	adds	r3, #50	; 0x32
 8002438:	4a2f      	ldr	r2, [pc, #188]	; (80024f8 <UART_SetConfig+0x30c>)
 800243a:	fba2 2303 	umull	r2, r3, r2, r3
 800243e:	095b      	lsrs	r3, r3, #5
 8002440:	f003 020f 	and.w	r2, r3, #15
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	440a      	add	r2, r1
 800244a:	609a      	str	r2, [r3, #8]
}
 800244c:	e04d      	b.n	80024ea <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 800244e:	f7ff fb43 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
 8002452:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	4613      	mov	r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	009a      	lsls	r2, r3, #2
 800245e:	441a      	add	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	fbb2 f3f3 	udiv	r3, r2, r3
 800246a:	4a23      	ldr	r2, [pc, #140]	; (80024f8 <UART_SetConfig+0x30c>)
 800246c:	fba2 2303 	umull	r2, r3, r2, r3
 8002470:	095b      	lsrs	r3, r3, #5
 8002472:	0119      	lsls	r1, r3, #4
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	009a      	lsls	r2, r3, #2
 800247e:	441a      	add	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	fbb2 f2f3 	udiv	r2, r2, r3
 800248a:	4b1b      	ldr	r3, [pc, #108]	; (80024f8 <UART_SetConfig+0x30c>)
 800248c:	fba3 0302 	umull	r0, r3, r3, r2
 8002490:	095b      	lsrs	r3, r3, #5
 8002492:	2064      	movs	r0, #100	; 0x64
 8002494:	fb00 f303 	mul.w	r3, r0, r3
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	011b      	lsls	r3, r3, #4
 800249c:	3332      	adds	r3, #50	; 0x32
 800249e:	4a16      	ldr	r2, [pc, #88]	; (80024f8 <UART_SetConfig+0x30c>)
 80024a0:	fba2 2303 	umull	r2, r3, r2, r3
 80024a4:	095b      	lsrs	r3, r3, #5
 80024a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024aa:	4419      	add	r1, r3
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	4613      	mov	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4413      	add	r3, r2
 80024b4:	009a      	lsls	r2, r3, #2
 80024b6:	441a      	add	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	fbb2 f2f3 	udiv	r2, r2, r3
 80024c2:	4b0d      	ldr	r3, [pc, #52]	; (80024f8 <UART_SetConfig+0x30c>)
 80024c4:	fba3 0302 	umull	r0, r3, r3, r2
 80024c8:	095b      	lsrs	r3, r3, #5
 80024ca:	2064      	movs	r0, #100	; 0x64
 80024cc:	fb00 f303 	mul.w	r3, r0, r3
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	3332      	adds	r3, #50	; 0x32
 80024d6:	4a08      	ldr	r2, [pc, #32]	; (80024f8 <UART_SetConfig+0x30c>)
 80024d8:	fba2 2303 	umull	r2, r3, r2, r3
 80024dc:	095b      	lsrs	r3, r3, #5
 80024de:	f003 020f 	and.w	r2, r3, #15
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	440a      	add	r2, r1
 80024e8:	609a      	str	r2, [r3, #8]
}
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40013800 	.word	0x40013800
 80024f8:	51eb851f 	.word	0x51eb851f

080024fc <atoi>:
 80024fc:	220a      	movs	r2, #10
 80024fe:	2100      	movs	r1, #0
 8002500:	f000 b8ce 	b.w	80026a0 <strtol>

08002504 <__errno>:
 8002504:	4b01      	ldr	r3, [pc, #4]	; (800250c <__errno+0x8>)
 8002506:	6818      	ldr	r0, [r3, #0]
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20000010 	.word	0x20000010

08002510 <__libc_init_array>:
 8002510:	b570      	push	{r4, r5, r6, lr}
 8002512:	2500      	movs	r5, #0
 8002514:	4e0c      	ldr	r6, [pc, #48]	; (8002548 <__libc_init_array+0x38>)
 8002516:	4c0d      	ldr	r4, [pc, #52]	; (800254c <__libc_init_array+0x3c>)
 8002518:	1ba4      	subs	r4, r4, r6
 800251a:	10a4      	asrs	r4, r4, #2
 800251c:	42a5      	cmp	r5, r4
 800251e:	d109      	bne.n	8002534 <__libc_init_array+0x24>
 8002520:	f000 fcea 	bl	8002ef8 <_init>
 8002524:	2500      	movs	r5, #0
 8002526:	4e0a      	ldr	r6, [pc, #40]	; (8002550 <__libc_init_array+0x40>)
 8002528:	4c0a      	ldr	r4, [pc, #40]	; (8002554 <__libc_init_array+0x44>)
 800252a:	1ba4      	subs	r4, r4, r6
 800252c:	10a4      	asrs	r4, r4, #2
 800252e:	42a5      	cmp	r5, r4
 8002530:	d105      	bne.n	800253e <__libc_init_array+0x2e>
 8002532:	bd70      	pop	{r4, r5, r6, pc}
 8002534:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002538:	4798      	blx	r3
 800253a:	3501      	adds	r5, #1
 800253c:	e7ee      	b.n	800251c <__libc_init_array+0xc>
 800253e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002542:	4798      	blx	r3
 8002544:	3501      	adds	r5, #1
 8002546:	e7f2      	b.n	800252e <__libc_init_array+0x1e>
 8002548:	080031a0 	.word	0x080031a0
 800254c:	080031a0 	.word	0x080031a0
 8002550:	080031a0 	.word	0x080031a0
 8002554:	080031a4 	.word	0x080031a4

08002558 <memset>:
 8002558:	4603      	mov	r3, r0
 800255a:	4402      	add	r2, r0
 800255c:	4293      	cmp	r3, r2
 800255e:	d100      	bne.n	8002562 <memset+0xa>
 8002560:	4770      	bx	lr
 8002562:	f803 1b01 	strb.w	r1, [r3], #1
 8002566:	e7f9      	b.n	800255c <memset+0x4>

08002568 <siprintf>:
 8002568:	b40e      	push	{r1, r2, r3}
 800256a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800256e:	b500      	push	{lr}
 8002570:	b09c      	sub	sp, #112	; 0x70
 8002572:	ab1d      	add	r3, sp, #116	; 0x74
 8002574:	9002      	str	r0, [sp, #8]
 8002576:	9006      	str	r0, [sp, #24]
 8002578:	9107      	str	r1, [sp, #28]
 800257a:	9104      	str	r1, [sp, #16]
 800257c:	4808      	ldr	r0, [pc, #32]	; (80025a0 <siprintf+0x38>)
 800257e:	4909      	ldr	r1, [pc, #36]	; (80025a4 <siprintf+0x3c>)
 8002580:	f853 2b04 	ldr.w	r2, [r3], #4
 8002584:	9105      	str	r1, [sp, #20]
 8002586:	6800      	ldr	r0, [r0, #0]
 8002588:	a902      	add	r1, sp, #8
 800258a:	9301      	str	r3, [sp, #4]
 800258c:	f000 f90e 	bl	80027ac <_svfiprintf_r>
 8002590:	2200      	movs	r2, #0
 8002592:	9b02      	ldr	r3, [sp, #8]
 8002594:	701a      	strb	r2, [r3, #0]
 8002596:	b01c      	add	sp, #112	; 0x70
 8002598:	f85d eb04 	ldr.w	lr, [sp], #4
 800259c:	b003      	add	sp, #12
 800259e:	4770      	bx	lr
 80025a0:	20000010 	.word	0x20000010
 80025a4:	ffff0208 	.word	0xffff0208

080025a8 <_strtol_l.isra.0>:
 80025a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80025ac:	4680      	mov	r8, r0
 80025ae:	4689      	mov	r9, r1
 80025b0:	4692      	mov	sl, r2
 80025b2:	461e      	mov	r6, r3
 80025b4:	460f      	mov	r7, r1
 80025b6:	463d      	mov	r5, r7
 80025b8:	9808      	ldr	r0, [sp, #32]
 80025ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 80025be:	f000 f885 	bl	80026cc <__locale_ctype_ptr_l>
 80025c2:	4420      	add	r0, r4
 80025c4:	7843      	ldrb	r3, [r0, #1]
 80025c6:	f013 0308 	ands.w	r3, r3, #8
 80025ca:	d132      	bne.n	8002632 <_strtol_l.isra.0+0x8a>
 80025cc:	2c2d      	cmp	r4, #45	; 0x2d
 80025ce:	d132      	bne.n	8002636 <_strtol_l.isra.0+0x8e>
 80025d0:	2201      	movs	r2, #1
 80025d2:	787c      	ldrb	r4, [r7, #1]
 80025d4:	1cbd      	adds	r5, r7, #2
 80025d6:	2e00      	cmp	r6, #0
 80025d8:	d05d      	beq.n	8002696 <_strtol_l.isra.0+0xee>
 80025da:	2e10      	cmp	r6, #16
 80025dc:	d109      	bne.n	80025f2 <_strtol_l.isra.0+0x4a>
 80025de:	2c30      	cmp	r4, #48	; 0x30
 80025e0:	d107      	bne.n	80025f2 <_strtol_l.isra.0+0x4a>
 80025e2:	782b      	ldrb	r3, [r5, #0]
 80025e4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80025e8:	2b58      	cmp	r3, #88	; 0x58
 80025ea:	d14f      	bne.n	800268c <_strtol_l.isra.0+0xe4>
 80025ec:	2610      	movs	r6, #16
 80025ee:	786c      	ldrb	r4, [r5, #1]
 80025f0:	3502      	adds	r5, #2
 80025f2:	2a00      	cmp	r2, #0
 80025f4:	bf14      	ite	ne
 80025f6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80025fa:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80025fe:	2700      	movs	r7, #0
 8002600:	fbb1 fcf6 	udiv	ip, r1, r6
 8002604:	4638      	mov	r0, r7
 8002606:	fb06 1e1c 	mls	lr, r6, ip, r1
 800260a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800260e:	2b09      	cmp	r3, #9
 8002610:	d817      	bhi.n	8002642 <_strtol_l.isra.0+0x9a>
 8002612:	461c      	mov	r4, r3
 8002614:	42a6      	cmp	r6, r4
 8002616:	dd23      	ble.n	8002660 <_strtol_l.isra.0+0xb8>
 8002618:	1c7b      	adds	r3, r7, #1
 800261a:	d007      	beq.n	800262c <_strtol_l.isra.0+0x84>
 800261c:	4584      	cmp	ip, r0
 800261e:	d31c      	bcc.n	800265a <_strtol_l.isra.0+0xb2>
 8002620:	d101      	bne.n	8002626 <_strtol_l.isra.0+0x7e>
 8002622:	45a6      	cmp	lr, r4
 8002624:	db19      	blt.n	800265a <_strtol_l.isra.0+0xb2>
 8002626:	2701      	movs	r7, #1
 8002628:	fb00 4006 	mla	r0, r0, r6, r4
 800262c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002630:	e7eb      	b.n	800260a <_strtol_l.isra.0+0x62>
 8002632:	462f      	mov	r7, r5
 8002634:	e7bf      	b.n	80025b6 <_strtol_l.isra.0+0xe>
 8002636:	2c2b      	cmp	r4, #43	; 0x2b
 8002638:	bf04      	itt	eq
 800263a:	1cbd      	addeq	r5, r7, #2
 800263c:	787c      	ldrbeq	r4, [r7, #1]
 800263e:	461a      	mov	r2, r3
 8002640:	e7c9      	b.n	80025d6 <_strtol_l.isra.0+0x2e>
 8002642:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8002646:	2b19      	cmp	r3, #25
 8002648:	d801      	bhi.n	800264e <_strtol_l.isra.0+0xa6>
 800264a:	3c37      	subs	r4, #55	; 0x37
 800264c:	e7e2      	b.n	8002614 <_strtol_l.isra.0+0x6c>
 800264e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8002652:	2b19      	cmp	r3, #25
 8002654:	d804      	bhi.n	8002660 <_strtol_l.isra.0+0xb8>
 8002656:	3c57      	subs	r4, #87	; 0x57
 8002658:	e7dc      	b.n	8002614 <_strtol_l.isra.0+0x6c>
 800265a:	f04f 37ff 	mov.w	r7, #4294967295
 800265e:	e7e5      	b.n	800262c <_strtol_l.isra.0+0x84>
 8002660:	1c7b      	adds	r3, r7, #1
 8002662:	d108      	bne.n	8002676 <_strtol_l.isra.0+0xce>
 8002664:	2322      	movs	r3, #34	; 0x22
 8002666:	4608      	mov	r0, r1
 8002668:	f8c8 3000 	str.w	r3, [r8]
 800266c:	f1ba 0f00 	cmp.w	sl, #0
 8002670:	d107      	bne.n	8002682 <_strtol_l.isra.0+0xda>
 8002672:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002676:	b102      	cbz	r2, 800267a <_strtol_l.isra.0+0xd2>
 8002678:	4240      	negs	r0, r0
 800267a:	f1ba 0f00 	cmp.w	sl, #0
 800267e:	d0f8      	beq.n	8002672 <_strtol_l.isra.0+0xca>
 8002680:	b10f      	cbz	r7, 8002686 <_strtol_l.isra.0+0xde>
 8002682:	f105 39ff 	add.w	r9, r5, #4294967295
 8002686:	f8ca 9000 	str.w	r9, [sl]
 800268a:	e7f2      	b.n	8002672 <_strtol_l.isra.0+0xca>
 800268c:	2430      	movs	r4, #48	; 0x30
 800268e:	2e00      	cmp	r6, #0
 8002690:	d1af      	bne.n	80025f2 <_strtol_l.isra.0+0x4a>
 8002692:	2608      	movs	r6, #8
 8002694:	e7ad      	b.n	80025f2 <_strtol_l.isra.0+0x4a>
 8002696:	2c30      	cmp	r4, #48	; 0x30
 8002698:	d0a3      	beq.n	80025e2 <_strtol_l.isra.0+0x3a>
 800269a:	260a      	movs	r6, #10
 800269c:	e7a9      	b.n	80025f2 <_strtol_l.isra.0+0x4a>
	...

080026a0 <strtol>:
 80026a0:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <strtol+0x24>)
 80026a2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80026a4:	681c      	ldr	r4, [r3, #0]
 80026a6:	4d08      	ldr	r5, [pc, #32]	; (80026c8 <strtol+0x28>)
 80026a8:	6a23      	ldr	r3, [r4, #32]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	bf08      	it	eq
 80026ae:	462b      	moveq	r3, r5
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	4613      	mov	r3, r2
 80026b4:	460a      	mov	r2, r1
 80026b6:	4601      	mov	r1, r0
 80026b8:	4620      	mov	r0, r4
 80026ba:	f7ff ff75 	bl	80025a8 <_strtol_l.isra.0>
 80026be:	b003      	add	sp, #12
 80026c0:	bd30      	pop	{r4, r5, pc}
 80026c2:	bf00      	nop
 80026c4:	20000010 	.word	0x20000010
 80026c8:	20000074 	.word	0x20000074

080026cc <__locale_ctype_ptr_l>:
 80026cc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80026d0:	4770      	bx	lr

080026d2 <__ascii_mbtowc>:
 80026d2:	b082      	sub	sp, #8
 80026d4:	b901      	cbnz	r1, 80026d8 <__ascii_mbtowc+0x6>
 80026d6:	a901      	add	r1, sp, #4
 80026d8:	b142      	cbz	r2, 80026ec <__ascii_mbtowc+0x1a>
 80026da:	b14b      	cbz	r3, 80026f0 <__ascii_mbtowc+0x1e>
 80026dc:	7813      	ldrb	r3, [r2, #0]
 80026de:	600b      	str	r3, [r1, #0]
 80026e0:	7812      	ldrb	r2, [r2, #0]
 80026e2:	1c10      	adds	r0, r2, #0
 80026e4:	bf18      	it	ne
 80026e6:	2001      	movne	r0, #1
 80026e8:	b002      	add	sp, #8
 80026ea:	4770      	bx	lr
 80026ec:	4610      	mov	r0, r2
 80026ee:	e7fb      	b.n	80026e8 <__ascii_mbtowc+0x16>
 80026f0:	f06f 0001 	mvn.w	r0, #1
 80026f4:	e7f8      	b.n	80026e8 <__ascii_mbtowc+0x16>

080026f6 <__ssputs_r>:
 80026f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026fa:	688e      	ldr	r6, [r1, #8]
 80026fc:	4682      	mov	sl, r0
 80026fe:	429e      	cmp	r6, r3
 8002700:	460c      	mov	r4, r1
 8002702:	4690      	mov	r8, r2
 8002704:	4699      	mov	r9, r3
 8002706:	d837      	bhi.n	8002778 <__ssputs_r+0x82>
 8002708:	898a      	ldrh	r2, [r1, #12]
 800270a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800270e:	d031      	beq.n	8002774 <__ssputs_r+0x7e>
 8002710:	2302      	movs	r3, #2
 8002712:	6825      	ldr	r5, [r4, #0]
 8002714:	6909      	ldr	r1, [r1, #16]
 8002716:	1a6f      	subs	r7, r5, r1
 8002718:	6965      	ldr	r5, [r4, #20]
 800271a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800271e:	fb95 f5f3 	sdiv	r5, r5, r3
 8002722:	f109 0301 	add.w	r3, r9, #1
 8002726:	443b      	add	r3, r7
 8002728:	429d      	cmp	r5, r3
 800272a:	bf38      	it	cc
 800272c:	461d      	movcc	r5, r3
 800272e:	0553      	lsls	r3, r2, #21
 8002730:	d530      	bpl.n	8002794 <__ssputs_r+0x9e>
 8002732:	4629      	mov	r1, r5
 8002734:	f000 fb46 	bl	8002dc4 <_malloc_r>
 8002738:	4606      	mov	r6, r0
 800273a:	b950      	cbnz	r0, 8002752 <__ssputs_r+0x5c>
 800273c:	230c      	movs	r3, #12
 800273e:	f04f 30ff 	mov.w	r0, #4294967295
 8002742:	f8ca 3000 	str.w	r3, [sl]
 8002746:	89a3      	ldrh	r3, [r4, #12]
 8002748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800274c:	81a3      	strh	r3, [r4, #12]
 800274e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002752:	463a      	mov	r2, r7
 8002754:	6921      	ldr	r1, [r4, #16]
 8002756:	f000 fac4 	bl	8002ce2 <memcpy>
 800275a:	89a3      	ldrh	r3, [r4, #12]
 800275c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002764:	81a3      	strh	r3, [r4, #12]
 8002766:	6126      	str	r6, [r4, #16]
 8002768:	443e      	add	r6, r7
 800276a:	6026      	str	r6, [r4, #0]
 800276c:	464e      	mov	r6, r9
 800276e:	6165      	str	r5, [r4, #20]
 8002770:	1bed      	subs	r5, r5, r7
 8002772:	60a5      	str	r5, [r4, #8]
 8002774:	454e      	cmp	r6, r9
 8002776:	d900      	bls.n	800277a <__ssputs_r+0x84>
 8002778:	464e      	mov	r6, r9
 800277a:	4632      	mov	r2, r6
 800277c:	4641      	mov	r1, r8
 800277e:	6820      	ldr	r0, [r4, #0]
 8002780:	f000 faba 	bl	8002cf8 <memmove>
 8002784:	68a3      	ldr	r3, [r4, #8]
 8002786:	2000      	movs	r0, #0
 8002788:	1b9b      	subs	r3, r3, r6
 800278a:	60a3      	str	r3, [r4, #8]
 800278c:	6823      	ldr	r3, [r4, #0]
 800278e:	441e      	add	r6, r3
 8002790:	6026      	str	r6, [r4, #0]
 8002792:	e7dc      	b.n	800274e <__ssputs_r+0x58>
 8002794:	462a      	mov	r2, r5
 8002796:	f000 fb6f 	bl	8002e78 <_realloc_r>
 800279a:	4606      	mov	r6, r0
 800279c:	2800      	cmp	r0, #0
 800279e:	d1e2      	bne.n	8002766 <__ssputs_r+0x70>
 80027a0:	6921      	ldr	r1, [r4, #16]
 80027a2:	4650      	mov	r0, sl
 80027a4:	f000 fac2 	bl	8002d2c <_free_r>
 80027a8:	e7c8      	b.n	800273c <__ssputs_r+0x46>
	...

080027ac <_svfiprintf_r>:
 80027ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027b0:	461d      	mov	r5, r3
 80027b2:	898b      	ldrh	r3, [r1, #12]
 80027b4:	b09d      	sub	sp, #116	; 0x74
 80027b6:	061f      	lsls	r7, r3, #24
 80027b8:	4680      	mov	r8, r0
 80027ba:	460c      	mov	r4, r1
 80027bc:	4616      	mov	r6, r2
 80027be:	d50f      	bpl.n	80027e0 <_svfiprintf_r+0x34>
 80027c0:	690b      	ldr	r3, [r1, #16]
 80027c2:	b96b      	cbnz	r3, 80027e0 <_svfiprintf_r+0x34>
 80027c4:	2140      	movs	r1, #64	; 0x40
 80027c6:	f000 fafd 	bl	8002dc4 <_malloc_r>
 80027ca:	6020      	str	r0, [r4, #0]
 80027cc:	6120      	str	r0, [r4, #16]
 80027ce:	b928      	cbnz	r0, 80027dc <_svfiprintf_r+0x30>
 80027d0:	230c      	movs	r3, #12
 80027d2:	f8c8 3000 	str.w	r3, [r8]
 80027d6:	f04f 30ff 	mov.w	r0, #4294967295
 80027da:	e0c8      	b.n	800296e <_svfiprintf_r+0x1c2>
 80027dc:	2340      	movs	r3, #64	; 0x40
 80027de:	6163      	str	r3, [r4, #20]
 80027e0:	2300      	movs	r3, #0
 80027e2:	9309      	str	r3, [sp, #36]	; 0x24
 80027e4:	2320      	movs	r3, #32
 80027e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80027ea:	2330      	movs	r3, #48	; 0x30
 80027ec:	f04f 0b01 	mov.w	fp, #1
 80027f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80027f4:	9503      	str	r5, [sp, #12]
 80027f6:	4637      	mov	r7, r6
 80027f8:	463d      	mov	r5, r7
 80027fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80027fe:	b10b      	cbz	r3, 8002804 <_svfiprintf_r+0x58>
 8002800:	2b25      	cmp	r3, #37	; 0x25
 8002802:	d13e      	bne.n	8002882 <_svfiprintf_r+0xd6>
 8002804:	ebb7 0a06 	subs.w	sl, r7, r6
 8002808:	d00b      	beq.n	8002822 <_svfiprintf_r+0x76>
 800280a:	4653      	mov	r3, sl
 800280c:	4632      	mov	r2, r6
 800280e:	4621      	mov	r1, r4
 8002810:	4640      	mov	r0, r8
 8002812:	f7ff ff70 	bl	80026f6 <__ssputs_r>
 8002816:	3001      	adds	r0, #1
 8002818:	f000 80a4 	beq.w	8002964 <_svfiprintf_r+0x1b8>
 800281c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800281e:	4453      	add	r3, sl
 8002820:	9309      	str	r3, [sp, #36]	; 0x24
 8002822:	783b      	ldrb	r3, [r7, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	f000 809d 	beq.w	8002964 <_svfiprintf_r+0x1b8>
 800282a:	2300      	movs	r3, #0
 800282c:	f04f 32ff 	mov.w	r2, #4294967295
 8002830:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002834:	9304      	str	r3, [sp, #16]
 8002836:	9307      	str	r3, [sp, #28]
 8002838:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800283c:	931a      	str	r3, [sp, #104]	; 0x68
 800283e:	462f      	mov	r7, r5
 8002840:	2205      	movs	r2, #5
 8002842:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002846:	4850      	ldr	r0, [pc, #320]	; (8002988 <_svfiprintf_r+0x1dc>)
 8002848:	f000 fa3d 	bl	8002cc6 <memchr>
 800284c:	9b04      	ldr	r3, [sp, #16]
 800284e:	b9d0      	cbnz	r0, 8002886 <_svfiprintf_r+0xda>
 8002850:	06d9      	lsls	r1, r3, #27
 8002852:	bf44      	itt	mi
 8002854:	2220      	movmi	r2, #32
 8002856:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800285a:	071a      	lsls	r2, r3, #28
 800285c:	bf44      	itt	mi
 800285e:	222b      	movmi	r2, #43	; 0x2b
 8002860:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002864:	782a      	ldrb	r2, [r5, #0]
 8002866:	2a2a      	cmp	r2, #42	; 0x2a
 8002868:	d015      	beq.n	8002896 <_svfiprintf_r+0xea>
 800286a:	462f      	mov	r7, r5
 800286c:	2000      	movs	r0, #0
 800286e:	250a      	movs	r5, #10
 8002870:	9a07      	ldr	r2, [sp, #28]
 8002872:	4639      	mov	r1, r7
 8002874:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002878:	3b30      	subs	r3, #48	; 0x30
 800287a:	2b09      	cmp	r3, #9
 800287c:	d94d      	bls.n	800291a <_svfiprintf_r+0x16e>
 800287e:	b1b8      	cbz	r0, 80028b0 <_svfiprintf_r+0x104>
 8002880:	e00f      	b.n	80028a2 <_svfiprintf_r+0xf6>
 8002882:	462f      	mov	r7, r5
 8002884:	e7b8      	b.n	80027f8 <_svfiprintf_r+0x4c>
 8002886:	4a40      	ldr	r2, [pc, #256]	; (8002988 <_svfiprintf_r+0x1dc>)
 8002888:	463d      	mov	r5, r7
 800288a:	1a80      	subs	r0, r0, r2
 800288c:	fa0b f000 	lsl.w	r0, fp, r0
 8002890:	4318      	orrs	r0, r3
 8002892:	9004      	str	r0, [sp, #16]
 8002894:	e7d3      	b.n	800283e <_svfiprintf_r+0x92>
 8002896:	9a03      	ldr	r2, [sp, #12]
 8002898:	1d11      	adds	r1, r2, #4
 800289a:	6812      	ldr	r2, [r2, #0]
 800289c:	9103      	str	r1, [sp, #12]
 800289e:	2a00      	cmp	r2, #0
 80028a0:	db01      	blt.n	80028a6 <_svfiprintf_r+0xfa>
 80028a2:	9207      	str	r2, [sp, #28]
 80028a4:	e004      	b.n	80028b0 <_svfiprintf_r+0x104>
 80028a6:	4252      	negs	r2, r2
 80028a8:	f043 0302 	orr.w	r3, r3, #2
 80028ac:	9207      	str	r2, [sp, #28]
 80028ae:	9304      	str	r3, [sp, #16]
 80028b0:	783b      	ldrb	r3, [r7, #0]
 80028b2:	2b2e      	cmp	r3, #46	; 0x2e
 80028b4:	d10c      	bne.n	80028d0 <_svfiprintf_r+0x124>
 80028b6:	787b      	ldrb	r3, [r7, #1]
 80028b8:	2b2a      	cmp	r3, #42	; 0x2a
 80028ba:	d133      	bne.n	8002924 <_svfiprintf_r+0x178>
 80028bc:	9b03      	ldr	r3, [sp, #12]
 80028be:	3702      	adds	r7, #2
 80028c0:	1d1a      	adds	r2, r3, #4
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	9203      	str	r2, [sp, #12]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	bfb8      	it	lt
 80028ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80028ce:	9305      	str	r3, [sp, #20]
 80028d0:	4d2e      	ldr	r5, [pc, #184]	; (800298c <_svfiprintf_r+0x1e0>)
 80028d2:	2203      	movs	r2, #3
 80028d4:	7839      	ldrb	r1, [r7, #0]
 80028d6:	4628      	mov	r0, r5
 80028d8:	f000 f9f5 	bl	8002cc6 <memchr>
 80028dc:	b138      	cbz	r0, 80028ee <_svfiprintf_r+0x142>
 80028de:	2340      	movs	r3, #64	; 0x40
 80028e0:	1b40      	subs	r0, r0, r5
 80028e2:	fa03 f000 	lsl.w	r0, r3, r0
 80028e6:	9b04      	ldr	r3, [sp, #16]
 80028e8:	3701      	adds	r7, #1
 80028ea:	4303      	orrs	r3, r0
 80028ec:	9304      	str	r3, [sp, #16]
 80028ee:	7839      	ldrb	r1, [r7, #0]
 80028f0:	2206      	movs	r2, #6
 80028f2:	4827      	ldr	r0, [pc, #156]	; (8002990 <_svfiprintf_r+0x1e4>)
 80028f4:	1c7e      	adds	r6, r7, #1
 80028f6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80028fa:	f000 f9e4 	bl	8002cc6 <memchr>
 80028fe:	2800      	cmp	r0, #0
 8002900:	d038      	beq.n	8002974 <_svfiprintf_r+0x1c8>
 8002902:	4b24      	ldr	r3, [pc, #144]	; (8002994 <_svfiprintf_r+0x1e8>)
 8002904:	bb13      	cbnz	r3, 800294c <_svfiprintf_r+0x1a0>
 8002906:	9b03      	ldr	r3, [sp, #12]
 8002908:	3307      	adds	r3, #7
 800290a:	f023 0307 	bic.w	r3, r3, #7
 800290e:	3308      	adds	r3, #8
 8002910:	9303      	str	r3, [sp, #12]
 8002912:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002914:	444b      	add	r3, r9
 8002916:	9309      	str	r3, [sp, #36]	; 0x24
 8002918:	e76d      	b.n	80027f6 <_svfiprintf_r+0x4a>
 800291a:	fb05 3202 	mla	r2, r5, r2, r3
 800291e:	2001      	movs	r0, #1
 8002920:	460f      	mov	r7, r1
 8002922:	e7a6      	b.n	8002872 <_svfiprintf_r+0xc6>
 8002924:	2300      	movs	r3, #0
 8002926:	250a      	movs	r5, #10
 8002928:	4619      	mov	r1, r3
 800292a:	3701      	adds	r7, #1
 800292c:	9305      	str	r3, [sp, #20]
 800292e:	4638      	mov	r0, r7
 8002930:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002934:	3a30      	subs	r2, #48	; 0x30
 8002936:	2a09      	cmp	r2, #9
 8002938:	d903      	bls.n	8002942 <_svfiprintf_r+0x196>
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0c8      	beq.n	80028d0 <_svfiprintf_r+0x124>
 800293e:	9105      	str	r1, [sp, #20]
 8002940:	e7c6      	b.n	80028d0 <_svfiprintf_r+0x124>
 8002942:	fb05 2101 	mla	r1, r5, r1, r2
 8002946:	2301      	movs	r3, #1
 8002948:	4607      	mov	r7, r0
 800294a:	e7f0      	b.n	800292e <_svfiprintf_r+0x182>
 800294c:	ab03      	add	r3, sp, #12
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	4622      	mov	r2, r4
 8002952:	4b11      	ldr	r3, [pc, #68]	; (8002998 <_svfiprintf_r+0x1ec>)
 8002954:	a904      	add	r1, sp, #16
 8002956:	4640      	mov	r0, r8
 8002958:	f3af 8000 	nop.w
 800295c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002960:	4681      	mov	r9, r0
 8002962:	d1d6      	bne.n	8002912 <_svfiprintf_r+0x166>
 8002964:	89a3      	ldrh	r3, [r4, #12]
 8002966:	065b      	lsls	r3, r3, #25
 8002968:	f53f af35 	bmi.w	80027d6 <_svfiprintf_r+0x2a>
 800296c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800296e:	b01d      	add	sp, #116	; 0x74
 8002970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002974:	ab03      	add	r3, sp, #12
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	4622      	mov	r2, r4
 800297a:	4b07      	ldr	r3, [pc, #28]	; (8002998 <_svfiprintf_r+0x1ec>)
 800297c:	a904      	add	r1, sp, #16
 800297e:	4640      	mov	r0, r8
 8002980:	f000 f882 	bl	8002a88 <_printf_i>
 8002984:	e7ea      	b.n	800295c <_svfiprintf_r+0x1b0>
 8002986:	bf00      	nop
 8002988:	0800306a 	.word	0x0800306a
 800298c:	08003070 	.word	0x08003070
 8002990:	08003074 	.word	0x08003074
 8002994:	00000000 	.word	0x00000000
 8002998:	080026f7 	.word	0x080026f7

0800299c <_printf_common>:
 800299c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029a0:	4691      	mov	r9, r2
 80029a2:	461f      	mov	r7, r3
 80029a4:	688a      	ldr	r2, [r1, #8]
 80029a6:	690b      	ldr	r3, [r1, #16]
 80029a8:	4606      	mov	r6, r0
 80029aa:	4293      	cmp	r3, r2
 80029ac:	bfb8      	it	lt
 80029ae:	4613      	movlt	r3, r2
 80029b0:	f8c9 3000 	str.w	r3, [r9]
 80029b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80029b8:	460c      	mov	r4, r1
 80029ba:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80029be:	b112      	cbz	r2, 80029c6 <_printf_common+0x2a>
 80029c0:	3301      	adds	r3, #1
 80029c2:	f8c9 3000 	str.w	r3, [r9]
 80029c6:	6823      	ldr	r3, [r4, #0]
 80029c8:	0699      	lsls	r1, r3, #26
 80029ca:	bf42      	ittt	mi
 80029cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 80029d0:	3302      	addmi	r3, #2
 80029d2:	f8c9 3000 	strmi.w	r3, [r9]
 80029d6:	6825      	ldr	r5, [r4, #0]
 80029d8:	f015 0506 	ands.w	r5, r5, #6
 80029dc:	d107      	bne.n	80029ee <_printf_common+0x52>
 80029de:	f104 0a19 	add.w	sl, r4, #25
 80029e2:	68e3      	ldr	r3, [r4, #12]
 80029e4:	f8d9 2000 	ldr.w	r2, [r9]
 80029e8:	1a9b      	subs	r3, r3, r2
 80029ea:	42ab      	cmp	r3, r5
 80029ec:	dc29      	bgt.n	8002a42 <_printf_common+0xa6>
 80029ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80029f2:	6822      	ldr	r2, [r4, #0]
 80029f4:	3300      	adds	r3, #0
 80029f6:	bf18      	it	ne
 80029f8:	2301      	movne	r3, #1
 80029fa:	0692      	lsls	r2, r2, #26
 80029fc:	d42e      	bmi.n	8002a5c <_printf_common+0xc0>
 80029fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002a02:	4639      	mov	r1, r7
 8002a04:	4630      	mov	r0, r6
 8002a06:	47c0      	blx	r8
 8002a08:	3001      	adds	r0, #1
 8002a0a:	d021      	beq.n	8002a50 <_printf_common+0xb4>
 8002a0c:	6823      	ldr	r3, [r4, #0]
 8002a0e:	68e5      	ldr	r5, [r4, #12]
 8002a10:	f003 0306 	and.w	r3, r3, #6
 8002a14:	2b04      	cmp	r3, #4
 8002a16:	bf18      	it	ne
 8002a18:	2500      	movne	r5, #0
 8002a1a:	f8d9 2000 	ldr.w	r2, [r9]
 8002a1e:	f04f 0900 	mov.w	r9, #0
 8002a22:	bf08      	it	eq
 8002a24:	1aad      	subeq	r5, r5, r2
 8002a26:	68a3      	ldr	r3, [r4, #8]
 8002a28:	6922      	ldr	r2, [r4, #16]
 8002a2a:	bf08      	it	eq
 8002a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002a30:	4293      	cmp	r3, r2
 8002a32:	bfc4      	itt	gt
 8002a34:	1a9b      	subgt	r3, r3, r2
 8002a36:	18ed      	addgt	r5, r5, r3
 8002a38:	341a      	adds	r4, #26
 8002a3a:	454d      	cmp	r5, r9
 8002a3c:	d11a      	bne.n	8002a74 <_printf_common+0xd8>
 8002a3e:	2000      	movs	r0, #0
 8002a40:	e008      	b.n	8002a54 <_printf_common+0xb8>
 8002a42:	2301      	movs	r3, #1
 8002a44:	4652      	mov	r2, sl
 8002a46:	4639      	mov	r1, r7
 8002a48:	4630      	mov	r0, r6
 8002a4a:	47c0      	blx	r8
 8002a4c:	3001      	adds	r0, #1
 8002a4e:	d103      	bne.n	8002a58 <_printf_common+0xbc>
 8002a50:	f04f 30ff 	mov.w	r0, #4294967295
 8002a54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a58:	3501      	adds	r5, #1
 8002a5a:	e7c2      	b.n	80029e2 <_printf_common+0x46>
 8002a5c:	2030      	movs	r0, #48	; 0x30
 8002a5e:	18e1      	adds	r1, r4, r3
 8002a60:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a6a:	4422      	add	r2, r4
 8002a6c:	3302      	adds	r3, #2
 8002a6e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a72:	e7c4      	b.n	80029fe <_printf_common+0x62>
 8002a74:	2301      	movs	r3, #1
 8002a76:	4622      	mov	r2, r4
 8002a78:	4639      	mov	r1, r7
 8002a7a:	4630      	mov	r0, r6
 8002a7c:	47c0      	blx	r8
 8002a7e:	3001      	adds	r0, #1
 8002a80:	d0e6      	beq.n	8002a50 <_printf_common+0xb4>
 8002a82:	f109 0901 	add.w	r9, r9, #1
 8002a86:	e7d8      	b.n	8002a3a <_printf_common+0x9e>

08002a88 <_printf_i>:
 8002a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a8c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002a90:	460c      	mov	r4, r1
 8002a92:	7e09      	ldrb	r1, [r1, #24]
 8002a94:	b085      	sub	sp, #20
 8002a96:	296e      	cmp	r1, #110	; 0x6e
 8002a98:	4617      	mov	r7, r2
 8002a9a:	4606      	mov	r6, r0
 8002a9c:	4698      	mov	r8, r3
 8002a9e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002aa0:	f000 80b3 	beq.w	8002c0a <_printf_i+0x182>
 8002aa4:	d822      	bhi.n	8002aec <_printf_i+0x64>
 8002aa6:	2963      	cmp	r1, #99	; 0x63
 8002aa8:	d036      	beq.n	8002b18 <_printf_i+0x90>
 8002aaa:	d80a      	bhi.n	8002ac2 <_printf_i+0x3a>
 8002aac:	2900      	cmp	r1, #0
 8002aae:	f000 80b9 	beq.w	8002c24 <_printf_i+0x19c>
 8002ab2:	2958      	cmp	r1, #88	; 0x58
 8002ab4:	f000 8083 	beq.w	8002bbe <_printf_i+0x136>
 8002ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002abc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002ac0:	e032      	b.n	8002b28 <_printf_i+0xa0>
 8002ac2:	2964      	cmp	r1, #100	; 0x64
 8002ac4:	d001      	beq.n	8002aca <_printf_i+0x42>
 8002ac6:	2969      	cmp	r1, #105	; 0x69
 8002ac8:	d1f6      	bne.n	8002ab8 <_printf_i+0x30>
 8002aca:	6820      	ldr	r0, [r4, #0]
 8002acc:	6813      	ldr	r3, [r2, #0]
 8002ace:	0605      	lsls	r5, r0, #24
 8002ad0:	f103 0104 	add.w	r1, r3, #4
 8002ad4:	d52a      	bpl.n	8002b2c <_printf_i+0xa4>
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	6011      	str	r1, [r2, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	da03      	bge.n	8002ae6 <_printf_i+0x5e>
 8002ade:	222d      	movs	r2, #45	; 0x2d
 8002ae0:	425b      	negs	r3, r3
 8002ae2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002ae6:	486f      	ldr	r0, [pc, #444]	; (8002ca4 <_printf_i+0x21c>)
 8002ae8:	220a      	movs	r2, #10
 8002aea:	e039      	b.n	8002b60 <_printf_i+0xd8>
 8002aec:	2973      	cmp	r1, #115	; 0x73
 8002aee:	f000 809d 	beq.w	8002c2c <_printf_i+0x1a4>
 8002af2:	d808      	bhi.n	8002b06 <_printf_i+0x7e>
 8002af4:	296f      	cmp	r1, #111	; 0x6f
 8002af6:	d020      	beq.n	8002b3a <_printf_i+0xb2>
 8002af8:	2970      	cmp	r1, #112	; 0x70
 8002afa:	d1dd      	bne.n	8002ab8 <_printf_i+0x30>
 8002afc:	6823      	ldr	r3, [r4, #0]
 8002afe:	f043 0320 	orr.w	r3, r3, #32
 8002b02:	6023      	str	r3, [r4, #0]
 8002b04:	e003      	b.n	8002b0e <_printf_i+0x86>
 8002b06:	2975      	cmp	r1, #117	; 0x75
 8002b08:	d017      	beq.n	8002b3a <_printf_i+0xb2>
 8002b0a:	2978      	cmp	r1, #120	; 0x78
 8002b0c:	d1d4      	bne.n	8002ab8 <_printf_i+0x30>
 8002b0e:	2378      	movs	r3, #120	; 0x78
 8002b10:	4865      	ldr	r0, [pc, #404]	; (8002ca8 <_printf_i+0x220>)
 8002b12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002b16:	e055      	b.n	8002bc4 <_printf_i+0x13c>
 8002b18:	6813      	ldr	r3, [r2, #0]
 8002b1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b1e:	1d19      	adds	r1, r3, #4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6011      	str	r1, [r2, #0]
 8002b24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e08c      	b.n	8002c46 <_printf_i+0x1be>
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002b32:	6011      	str	r1, [r2, #0]
 8002b34:	bf18      	it	ne
 8002b36:	b21b      	sxthne	r3, r3
 8002b38:	e7cf      	b.n	8002ada <_printf_i+0x52>
 8002b3a:	6813      	ldr	r3, [r2, #0]
 8002b3c:	6825      	ldr	r5, [r4, #0]
 8002b3e:	1d18      	adds	r0, r3, #4
 8002b40:	6010      	str	r0, [r2, #0]
 8002b42:	0628      	lsls	r0, r5, #24
 8002b44:	d501      	bpl.n	8002b4a <_printf_i+0xc2>
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	e002      	b.n	8002b50 <_printf_i+0xc8>
 8002b4a:	0668      	lsls	r0, r5, #25
 8002b4c:	d5fb      	bpl.n	8002b46 <_printf_i+0xbe>
 8002b4e:	881b      	ldrh	r3, [r3, #0]
 8002b50:	296f      	cmp	r1, #111	; 0x6f
 8002b52:	bf14      	ite	ne
 8002b54:	220a      	movne	r2, #10
 8002b56:	2208      	moveq	r2, #8
 8002b58:	4852      	ldr	r0, [pc, #328]	; (8002ca4 <_printf_i+0x21c>)
 8002b5a:	2100      	movs	r1, #0
 8002b5c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002b60:	6865      	ldr	r5, [r4, #4]
 8002b62:	2d00      	cmp	r5, #0
 8002b64:	60a5      	str	r5, [r4, #8]
 8002b66:	f2c0 8095 	blt.w	8002c94 <_printf_i+0x20c>
 8002b6a:	6821      	ldr	r1, [r4, #0]
 8002b6c:	f021 0104 	bic.w	r1, r1, #4
 8002b70:	6021      	str	r1, [r4, #0]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d13d      	bne.n	8002bf2 <_printf_i+0x16a>
 8002b76:	2d00      	cmp	r5, #0
 8002b78:	f040 808e 	bne.w	8002c98 <_printf_i+0x210>
 8002b7c:	4665      	mov	r5, ip
 8002b7e:	2a08      	cmp	r2, #8
 8002b80:	d10b      	bne.n	8002b9a <_printf_i+0x112>
 8002b82:	6823      	ldr	r3, [r4, #0]
 8002b84:	07db      	lsls	r3, r3, #31
 8002b86:	d508      	bpl.n	8002b9a <_printf_i+0x112>
 8002b88:	6923      	ldr	r3, [r4, #16]
 8002b8a:	6862      	ldr	r2, [r4, #4]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	bfde      	ittt	le
 8002b90:	2330      	movle	r3, #48	; 0x30
 8002b92:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b96:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b9a:	ebac 0305 	sub.w	r3, ip, r5
 8002b9e:	6123      	str	r3, [r4, #16]
 8002ba0:	f8cd 8000 	str.w	r8, [sp]
 8002ba4:	463b      	mov	r3, r7
 8002ba6:	aa03      	add	r2, sp, #12
 8002ba8:	4621      	mov	r1, r4
 8002baa:	4630      	mov	r0, r6
 8002bac:	f7ff fef6 	bl	800299c <_printf_common>
 8002bb0:	3001      	adds	r0, #1
 8002bb2:	d14d      	bne.n	8002c50 <_printf_i+0x1c8>
 8002bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb8:	b005      	add	sp, #20
 8002bba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002bbe:	4839      	ldr	r0, [pc, #228]	; (8002ca4 <_printf_i+0x21c>)
 8002bc0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002bc4:	6813      	ldr	r3, [r2, #0]
 8002bc6:	6821      	ldr	r1, [r4, #0]
 8002bc8:	1d1d      	adds	r5, r3, #4
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6015      	str	r5, [r2, #0]
 8002bce:	060a      	lsls	r2, r1, #24
 8002bd0:	d50b      	bpl.n	8002bea <_printf_i+0x162>
 8002bd2:	07ca      	lsls	r2, r1, #31
 8002bd4:	bf44      	itt	mi
 8002bd6:	f041 0120 	orrmi.w	r1, r1, #32
 8002bda:	6021      	strmi	r1, [r4, #0]
 8002bdc:	b91b      	cbnz	r3, 8002be6 <_printf_i+0x15e>
 8002bde:	6822      	ldr	r2, [r4, #0]
 8002be0:	f022 0220 	bic.w	r2, r2, #32
 8002be4:	6022      	str	r2, [r4, #0]
 8002be6:	2210      	movs	r2, #16
 8002be8:	e7b7      	b.n	8002b5a <_printf_i+0xd2>
 8002bea:	064d      	lsls	r5, r1, #25
 8002bec:	bf48      	it	mi
 8002bee:	b29b      	uxthmi	r3, r3
 8002bf0:	e7ef      	b.n	8002bd2 <_printf_i+0x14a>
 8002bf2:	4665      	mov	r5, ip
 8002bf4:	fbb3 f1f2 	udiv	r1, r3, r2
 8002bf8:	fb02 3311 	mls	r3, r2, r1, r3
 8002bfc:	5cc3      	ldrb	r3, [r0, r3]
 8002bfe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002c02:	460b      	mov	r3, r1
 8002c04:	2900      	cmp	r1, #0
 8002c06:	d1f5      	bne.n	8002bf4 <_printf_i+0x16c>
 8002c08:	e7b9      	b.n	8002b7e <_printf_i+0xf6>
 8002c0a:	6813      	ldr	r3, [r2, #0]
 8002c0c:	6825      	ldr	r5, [r4, #0]
 8002c0e:	1d18      	adds	r0, r3, #4
 8002c10:	6961      	ldr	r1, [r4, #20]
 8002c12:	6010      	str	r0, [r2, #0]
 8002c14:	0628      	lsls	r0, r5, #24
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	d501      	bpl.n	8002c1e <_printf_i+0x196>
 8002c1a:	6019      	str	r1, [r3, #0]
 8002c1c:	e002      	b.n	8002c24 <_printf_i+0x19c>
 8002c1e:	066a      	lsls	r2, r5, #25
 8002c20:	d5fb      	bpl.n	8002c1a <_printf_i+0x192>
 8002c22:	8019      	strh	r1, [r3, #0]
 8002c24:	2300      	movs	r3, #0
 8002c26:	4665      	mov	r5, ip
 8002c28:	6123      	str	r3, [r4, #16]
 8002c2a:	e7b9      	b.n	8002ba0 <_printf_i+0x118>
 8002c2c:	6813      	ldr	r3, [r2, #0]
 8002c2e:	1d19      	adds	r1, r3, #4
 8002c30:	6011      	str	r1, [r2, #0]
 8002c32:	681d      	ldr	r5, [r3, #0]
 8002c34:	6862      	ldr	r2, [r4, #4]
 8002c36:	2100      	movs	r1, #0
 8002c38:	4628      	mov	r0, r5
 8002c3a:	f000 f844 	bl	8002cc6 <memchr>
 8002c3e:	b108      	cbz	r0, 8002c44 <_printf_i+0x1bc>
 8002c40:	1b40      	subs	r0, r0, r5
 8002c42:	6060      	str	r0, [r4, #4]
 8002c44:	6863      	ldr	r3, [r4, #4]
 8002c46:	6123      	str	r3, [r4, #16]
 8002c48:	2300      	movs	r3, #0
 8002c4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002c4e:	e7a7      	b.n	8002ba0 <_printf_i+0x118>
 8002c50:	6923      	ldr	r3, [r4, #16]
 8002c52:	462a      	mov	r2, r5
 8002c54:	4639      	mov	r1, r7
 8002c56:	4630      	mov	r0, r6
 8002c58:	47c0      	blx	r8
 8002c5a:	3001      	adds	r0, #1
 8002c5c:	d0aa      	beq.n	8002bb4 <_printf_i+0x12c>
 8002c5e:	6823      	ldr	r3, [r4, #0]
 8002c60:	079b      	lsls	r3, r3, #30
 8002c62:	d413      	bmi.n	8002c8c <_printf_i+0x204>
 8002c64:	68e0      	ldr	r0, [r4, #12]
 8002c66:	9b03      	ldr	r3, [sp, #12]
 8002c68:	4298      	cmp	r0, r3
 8002c6a:	bfb8      	it	lt
 8002c6c:	4618      	movlt	r0, r3
 8002c6e:	e7a3      	b.n	8002bb8 <_printf_i+0x130>
 8002c70:	2301      	movs	r3, #1
 8002c72:	464a      	mov	r2, r9
 8002c74:	4639      	mov	r1, r7
 8002c76:	4630      	mov	r0, r6
 8002c78:	47c0      	blx	r8
 8002c7a:	3001      	adds	r0, #1
 8002c7c:	d09a      	beq.n	8002bb4 <_printf_i+0x12c>
 8002c7e:	3501      	adds	r5, #1
 8002c80:	68e3      	ldr	r3, [r4, #12]
 8002c82:	9a03      	ldr	r2, [sp, #12]
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	42ab      	cmp	r3, r5
 8002c88:	dcf2      	bgt.n	8002c70 <_printf_i+0x1e8>
 8002c8a:	e7eb      	b.n	8002c64 <_printf_i+0x1dc>
 8002c8c:	2500      	movs	r5, #0
 8002c8e:	f104 0919 	add.w	r9, r4, #25
 8002c92:	e7f5      	b.n	8002c80 <_printf_i+0x1f8>
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1ac      	bne.n	8002bf2 <_printf_i+0x16a>
 8002c98:	7803      	ldrb	r3, [r0, #0]
 8002c9a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ca2:	e76c      	b.n	8002b7e <_printf_i+0xf6>
 8002ca4:	0800307b 	.word	0x0800307b
 8002ca8:	0800308c 	.word	0x0800308c

08002cac <__ascii_wctomb>:
 8002cac:	b149      	cbz	r1, 8002cc2 <__ascii_wctomb+0x16>
 8002cae:	2aff      	cmp	r2, #255	; 0xff
 8002cb0:	bf8b      	itete	hi
 8002cb2:	238a      	movhi	r3, #138	; 0x8a
 8002cb4:	700a      	strbls	r2, [r1, #0]
 8002cb6:	6003      	strhi	r3, [r0, #0]
 8002cb8:	2001      	movls	r0, #1
 8002cba:	bf88      	it	hi
 8002cbc:	f04f 30ff 	movhi.w	r0, #4294967295
 8002cc0:	4770      	bx	lr
 8002cc2:	4608      	mov	r0, r1
 8002cc4:	4770      	bx	lr

08002cc6 <memchr>:
 8002cc6:	b510      	push	{r4, lr}
 8002cc8:	b2c9      	uxtb	r1, r1
 8002cca:	4402      	add	r2, r0
 8002ccc:	4290      	cmp	r0, r2
 8002cce:	4603      	mov	r3, r0
 8002cd0:	d101      	bne.n	8002cd6 <memchr+0x10>
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	e003      	b.n	8002cde <memchr+0x18>
 8002cd6:	781c      	ldrb	r4, [r3, #0]
 8002cd8:	3001      	adds	r0, #1
 8002cda:	428c      	cmp	r4, r1
 8002cdc:	d1f6      	bne.n	8002ccc <memchr+0x6>
 8002cde:	4618      	mov	r0, r3
 8002ce0:	bd10      	pop	{r4, pc}

08002ce2 <memcpy>:
 8002ce2:	b510      	push	{r4, lr}
 8002ce4:	1e43      	subs	r3, r0, #1
 8002ce6:	440a      	add	r2, r1
 8002ce8:	4291      	cmp	r1, r2
 8002cea:	d100      	bne.n	8002cee <memcpy+0xc>
 8002cec:	bd10      	pop	{r4, pc}
 8002cee:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002cf2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002cf6:	e7f7      	b.n	8002ce8 <memcpy+0x6>

08002cf8 <memmove>:
 8002cf8:	4288      	cmp	r0, r1
 8002cfa:	b510      	push	{r4, lr}
 8002cfc:	eb01 0302 	add.w	r3, r1, r2
 8002d00:	d807      	bhi.n	8002d12 <memmove+0x1a>
 8002d02:	1e42      	subs	r2, r0, #1
 8002d04:	4299      	cmp	r1, r3
 8002d06:	d00a      	beq.n	8002d1e <memmove+0x26>
 8002d08:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002d0c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002d10:	e7f8      	b.n	8002d04 <memmove+0xc>
 8002d12:	4283      	cmp	r3, r0
 8002d14:	d9f5      	bls.n	8002d02 <memmove+0xa>
 8002d16:	1881      	adds	r1, r0, r2
 8002d18:	1ad2      	subs	r2, r2, r3
 8002d1a:	42d3      	cmn	r3, r2
 8002d1c:	d100      	bne.n	8002d20 <memmove+0x28>
 8002d1e:	bd10      	pop	{r4, pc}
 8002d20:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d24:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002d28:	e7f7      	b.n	8002d1a <memmove+0x22>
	...

08002d2c <_free_r>:
 8002d2c:	b538      	push	{r3, r4, r5, lr}
 8002d2e:	4605      	mov	r5, r0
 8002d30:	2900      	cmp	r1, #0
 8002d32:	d043      	beq.n	8002dbc <_free_r+0x90>
 8002d34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d38:	1f0c      	subs	r4, r1, #4
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	bfb8      	it	lt
 8002d3e:	18e4      	addlt	r4, r4, r3
 8002d40:	f000 f8d0 	bl	8002ee4 <__malloc_lock>
 8002d44:	4a1e      	ldr	r2, [pc, #120]	; (8002dc0 <_free_r+0x94>)
 8002d46:	6813      	ldr	r3, [r2, #0]
 8002d48:	4610      	mov	r0, r2
 8002d4a:	b933      	cbnz	r3, 8002d5a <_free_r+0x2e>
 8002d4c:	6063      	str	r3, [r4, #4]
 8002d4e:	6014      	str	r4, [r2, #0]
 8002d50:	4628      	mov	r0, r5
 8002d52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d56:	f000 b8c6 	b.w	8002ee6 <__malloc_unlock>
 8002d5a:	42a3      	cmp	r3, r4
 8002d5c:	d90b      	bls.n	8002d76 <_free_r+0x4a>
 8002d5e:	6821      	ldr	r1, [r4, #0]
 8002d60:	1862      	adds	r2, r4, r1
 8002d62:	4293      	cmp	r3, r2
 8002d64:	bf01      	itttt	eq
 8002d66:	681a      	ldreq	r2, [r3, #0]
 8002d68:	685b      	ldreq	r3, [r3, #4]
 8002d6a:	1852      	addeq	r2, r2, r1
 8002d6c:	6022      	streq	r2, [r4, #0]
 8002d6e:	6063      	str	r3, [r4, #4]
 8002d70:	6004      	str	r4, [r0, #0]
 8002d72:	e7ed      	b.n	8002d50 <_free_r+0x24>
 8002d74:	4613      	mov	r3, r2
 8002d76:	685a      	ldr	r2, [r3, #4]
 8002d78:	b10a      	cbz	r2, 8002d7e <_free_r+0x52>
 8002d7a:	42a2      	cmp	r2, r4
 8002d7c:	d9fa      	bls.n	8002d74 <_free_r+0x48>
 8002d7e:	6819      	ldr	r1, [r3, #0]
 8002d80:	1858      	adds	r0, r3, r1
 8002d82:	42a0      	cmp	r0, r4
 8002d84:	d10b      	bne.n	8002d9e <_free_r+0x72>
 8002d86:	6820      	ldr	r0, [r4, #0]
 8002d88:	4401      	add	r1, r0
 8002d8a:	1858      	adds	r0, r3, r1
 8002d8c:	4282      	cmp	r2, r0
 8002d8e:	6019      	str	r1, [r3, #0]
 8002d90:	d1de      	bne.n	8002d50 <_free_r+0x24>
 8002d92:	6810      	ldr	r0, [r2, #0]
 8002d94:	6852      	ldr	r2, [r2, #4]
 8002d96:	4401      	add	r1, r0
 8002d98:	6019      	str	r1, [r3, #0]
 8002d9a:	605a      	str	r2, [r3, #4]
 8002d9c:	e7d8      	b.n	8002d50 <_free_r+0x24>
 8002d9e:	d902      	bls.n	8002da6 <_free_r+0x7a>
 8002da0:	230c      	movs	r3, #12
 8002da2:	602b      	str	r3, [r5, #0]
 8002da4:	e7d4      	b.n	8002d50 <_free_r+0x24>
 8002da6:	6820      	ldr	r0, [r4, #0]
 8002da8:	1821      	adds	r1, r4, r0
 8002daa:	428a      	cmp	r2, r1
 8002dac:	bf01      	itttt	eq
 8002dae:	6811      	ldreq	r1, [r2, #0]
 8002db0:	6852      	ldreq	r2, [r2, #4]
 8002db2:	1809      	addeq	r1, r1, r0
 8002db4:	6021      	streq	r1, [r4, #0]
 8002db6:	6062      	str	r2, [r4, #4]
 8002db8:	605c      	str	r4, [r3, #4]
 8002dba:	e7c9      	b.n	8002d50 <_free_r+0x24>
 8002dbc:	bd38      	pop	{r3, r4, r5, pc}
 8002dbe:	bf00      	nop
 8002dc0:	20000200 	.word	0x20000200

08002dc4 <_malloc_r>:
 8002dc4:	b570      	push	{r4, r5, r6, lr}
 8002dc6:	1ccd      	adds	r5, r1, #3
 8002dc8:	f025 0503 	bic.w	r5, r5, #3
 8002dcc:	3508      	adds	r5, #8
 8002dce:	2d0c      	cmp	r5, #12
 8002dd0:	bf38      	it	cc
 8002dd2:	250c      	movcc	r5, #12
 8002dd4:	2d00      	cmp	r5, #0
 8002dd6:	4606      	mov	r6, r0
 8002dd8:	db01      	blt.n	8002dde <_malloc_r+0x1a>
 8002dda:	42a9      	cmp	r1, r5
 8002ddc:	d903      	bls.n	8002de6 <_malloc_r+0x22>
 8002dde:	230c      	movs	r3, #12
 8002de0:	6033      	str	r3, [r6, #0]
 8002de2:	2000      	movs	r0, #0
 8002de4:	bd70      	pop	{r4, r5, r6, pc}
 8002de6:	f000 f87d 	bl	8002ee4 <__malloc_lock>
 8002dea:	4a21      	ldr	r2, [pc, #132]	; (8002e70 <_malloc_r+0xac>)
 8002dec:	6814      	ldr	r4, [r2, #0]
 8002dee:	4621      	mov	r1, r4
 8002df0:	b991      	cbnz	r1, 8002e18 <_malloc_r+0x54>
 8002df2:	4c20      	ldr	r4, [pc, #128]	; (8002e74 <_malloc_r+0xb0>)
 8002df4:	6823      	ldr	r3, [r4, #0]
 8002df6:	b91b      	cbnz	r3, 8002e00 <_malloc_r+0x3c>
 8002df8:	4630      	mov	r0, r6
 8002dfa:	f000 f863 	bl	8002ec4 <_sbrk_r>
 8002dfe:	6020      	str	r0, [r4, #0]
 8002e00:	4629      	mov	r1, r5
 8002e02:	4630      	mov	r0, r6
 8002e04:	f000 f85e 	bl	8002ec4 <_sbrk_r>
 8002e08:	1c43      	adds	r3, r0, #1
 8002e0a:	d124      	bne.n	8002e56 <_malloc_r+0x92>
 8002e0c:	230c      	movs	r3, #12
 8002e0e:	4630      	mov	r0, r6
 8002e10:	6033      	str	r3, [r6, #0]
 8002e12:	f000 f868 	bl	8002ee6 <__malloc_unlock>
 8002e16:	e7e4      	b.n	8002de2 <_malloc_r+0x1e>
 8002e18:	680b      	ldr	r3, [r1, #0]
 8002e1a:	1b5b      	subs	r3, r3, r5
 8002e1c:	d418      	bmi.n	8002e50 <_malloc_r+0x8c>
 8002e1e:	2b0b      	cmp	r3, #11
 8002e20:	d90f      	bls.n	8002e42 <_malloc_r+0x7e>
 8002e22:	600b      	str	r3, [r1, #0]
 8002e24:	18cc      	adds	r4, r1, r3
 8002e26:	50cd      	str	r5, [r1, r3]
 8002e28:	4630      	mov	r0, r6
 8002e2a:	f000 f85c 	bl	8002ee6 <__malloc_unlock>
 8002e2e:	f104 000b 	add.w	r0, r4, #11
 8002e32:	1d23      	adds	r3, r4, #4
 8002e34:	f020 0007 	bic.w	r0, r0, #7
 8002e38:	1ac3      	subs	r3, r0, r3
 8002e3a:	d0d3      	beq.n	8002de4 <_malloc_r+0x20>
 8002e3c:	425a      	negs	r2, r3
 8002e3e:	50e2      	str	r2, [r4, r3]
 8002e40:	e7d0      	b.n	8002de4 <_malloc_r+0x20>
 8002e42:	684b      	ldr	r3, [r1, #4]
 8002e44:	428c      	cmp	r4, r1
 8002e46:	bf16      	itet	ne
 8002e48:	6063      	strne	r3, [r4, #4]
 8002e4a:	6013      	streq	r3, [r2, #0]
 8002e4c:	460c      	movne	r4, r1
 8002e4e:	e7eb      	b.n	8002e28 <_malloc_r+0x64>
 8002e50:	460c      	mov	r4, r1
 8002e52:	6849      	ldr	r1, [r1, #4]
 8002e54:	e7cc      	b.n	8002df0 <_malloc_r+0x2c>
 8002e56:	1cc4      	adds	r4, r0, #3
 8002e58:	f024 0403 	bic.w	r4, r4, #3
 8002e5c:	42a0      	cmp	r0, r4
 8002e5e:	d005      	beq.n	8002e6c <_malloc_r+0xa8>
 8002e60:	1a21      	subs	r1, r4, r0
 8002e62:	4630      	mov	r0, r6
 8002e64:	f000 f82e 	bl	8002ec4 <_sbrk_r>
 8002e68:	3001      	adds	r0, #1
 8002e6a:	d0cf      	beq.n	8002e0c <_malloc_r+0x48>
 8002e6c:	6025      	str	r5, [r4, #0]
 8002e6e:	e7db      	b.n	8002e28 <_malloc_r+0x64>
 8002e70:	20000200 	.word	0x20000200
 8002e74:	20000204 	.word	0x20000204

08002e78 <_realloc_r>:
 8002e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e7a:	4607      	mov	r7, r0
 8002e7c:	4614      	mov	r4, r2
 8002e7e:	460e      	mov	r6, r1
 8002e80:	b921      	cbnz	r1, 8002e8c <_realloc_r+0x14>
 8002e82:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002e86:	4611      	mov	r1, r2
 8002e88:	f7ff bf9c 	b.w	8002dc4 <_malloc_r>
 8002e8c:	b922      	cbnz	r2, 8002e98 <_realloc_r+0x20>
 8002e8e:	f7ff ff4d 	bl	8002d2c <_free_r>
 8002e92:	4625      	mov	r5, r4
 8002e94:	4628      	mov	r0, r5
 8002e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e98:	f000 f826 	bl	8002ee8 <_malloc_usable_size_r>
 8002e9c:	42a0      	cmp	r0, r4
 8002e9e:	d20f      	bcs.n	8002ec0 <_realloc_r+0x48>
 8002ea0:	4621      	mov	r1, r4
 8002ea2:	4638      	mov	r0, r7
 8002ea4:	f7ff ff8e 	bl	8002dc4 <_malloc_r>
 8002ea8:	4605      	mov	r5, r0
 8002eaa:	2800      	cmp	r0, #0
 8002eac:	d0f2      	beq.n	8002e94 <_realloc_r+0x1c>
 8002eae:	4631      	mov	r1, r6
 8002eb0:	4622      	mov	r2, r4
 8002eb2:	f7ff ff16 	bl	8002ce2 <memcpy>
 8002eb6:	4631      	mov	r1, r6
 8002eb8:	4638      	mov	r0, r7
 8002eba:	f7ff ff37 	bl	8002d2c <_free_r>
 8002ebe:	e7e9      	b.n	8002e94 <_realloc_r+0x1c>
 8002ec0:	4635      	mov	r5, r6
 8002ec2:	e7e7      	b.n	8002e94 <_realloc_r+0x1c>

08002ec4 <_sbrk_r>:
 8002ec4:	b538      	push	{r3, r4, r5, lr}
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	4c05      	ldr	r4, [pc, #20]	; (8002ee0 <_sbrk_r+0x1c>)
 8002eca:	4605      	mov	r5, r0
 8002ecc:	4608      	mov	r0, r1
 8002ece:	6023      	str	r3, [r4, #0]
 8002ed0:	f7fd fcc6 	bl	8000860 <_sbrk>
 8002ed4:	1c43      	adds	r3, r0, #1
 8002ed6:	d102      	bne.n	8002ede <_sbrk_r+0x1a>
 8002ed8:	6823      	ldr	r3, [r4, #0]
 8002eda:	b103      	cbz	r3, 8002ede <_sbrk_r+0x1a>
 8002edc:	602b      	str	r3, [r5, #0]
 8002ede:	bd38      	pop	{r3, r4, r5, pc}
 8002ee0:	2000063c 	.word	0x2000063c

08002ee4 <__malloc_lock>:
 8002ee4:	4770      	bx	lr

08002ee6 <__malloc_unlock>:
 8002ee6:	4770      	bx	lr

08002ee8 <_malloc_usable_size_r>:
 8002ee8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002eec:	1f18      	subs	r0, r3, #4
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	bfbc      	itt	lt
 8002ef2:	580b      	ldrlt	r3, [r1, r0]
 8002ef4:	18c0      	addlt	r0, r0, r3
 8002ef6:	4770      	bx	lr

08002ef8 <_init>:
 8002ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002efa:	bf00      	nop
 8002efc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002efe:	bc08      	pop	{r3}
 8002f00:	469e      	mov	lr, r3
 8002f02:	4770      	bx	lr

08002f04 <_fini>:
 8002f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f06:	bf00      	nop
 8002f08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f0a:	bc08      	pop	{r3}
 8002f0c:	469e      	mov	lr, r3
 8002f0e:	4770      	bx	lr

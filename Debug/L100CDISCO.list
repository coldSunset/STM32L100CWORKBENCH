
L100CDISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000214  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000350  08000350  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000350  08000350  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000350  08000350  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000350  08000350  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000350  08000350  00010350  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000354  08000354  00010354  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000358  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800035c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800035c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001005  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004d0  00000000  00000000  00021032  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001b0  00000000  00000000  00021508  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000168  00000000  00000000  000216b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000065b  00000000  00000000  00021820  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001c32  00000000  00000000  00021e7b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000793e6  00000000  00000000  00023aad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0009ce93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000004f8  00000000  00000000  0009cf10  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000004 	.word	0x20000004
 8000158:	00000000 	.word	0x00000000
 800015c:	08000338 	.word	0x08000338

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000008 	.word	0x20000008
 8000178:	08000338 	.word	0x08000338

0800017c <main>:
//#include "stm32l1xx_hal_rcc.h"



int main()
{
 800017c:	b480      	push	{r7}
 800017e:	b083      	sub	sp, #12
 8000180:	af00      	add	r7, sp, #0
	volatile uint32_t *GPIOA_MODER = 0x0;
 8000182:	2300      	movs	r3, #0
 8000184:	607b      	str	r3, [r7, #4]
	volatile uint32_t *GPIOA_ODR = 0x0;
 8000186:	2300      	movs	r3, #0
 8000188:	603b      	str	r3, [r7, #0]

	GPIOA_MODER = (uint32_t*)0x40020000 ; // address of GPIOA -> MODER register
 800018a:	4b0b      	ldr	r3, [pc, #44]	; (80001b8 <main+0x3c>)
 800018c:	607b      	str	r3, [r7, #4]
	GPIOA_ODR = (uint32_t*)(0x40020000 + 0x14); // address of GPIOA -> ODR register
 800018e:	4b0b      	ldr	r3, [pc, #44]	; (80001bc <main+0x40>)
 8000190:	603b      	str	r3, [r7, #0]

	// this ensure that the peripheral is enabled and connected to the AHB1 bus
	RCC -> AHBENR |= 1 ;
 8000192:	4b0b      	ldr	r3, [pc, #44]	; (80001c0 <main+0x44>)
 8000194:	69db      	ldr	r3, [r3, #28]
 8000196:	4a0a      	ldr	r2, [pc, #40]	; (80001c0 <main+0x44>)
 8000198:	f043 0301 	orr.w	r3, r3, #1
 800019c:	61d3      	str	r3, [r2, #28]

	*GPIOA_MODER = *GPIOA_MODER | 0x1<<2;
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	f043 0204 	orr.w	r2, r3, #4
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	601a      	str	r2, [r3, #0]
	*GPIOA_ODR = *GPIOA_ODR | 1<<1;
 80001aa:	683b      	ldr	r3, [r7, #0]
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	f043 0202 	orr.w	r2, r3, #2
 80001b2:	683b      	ldr	r3, [r7, #0]
 80001b4:	601a      	str	r2, [r3, #0]

	while(1);
 80001b6:	e7fe      	b.n	80001b6 <main+0x3a>
 80001b8:	40020000 	.word	0x40020000
 80001bc:	40020014 	.word	0x40020014
 80001c0:	40023800 	.word	0x40023800

080001c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80001c8:	bf00      	nop
 80001ca:	46bd      	mov	sp, r7
 80001cc:	bc80      	pop	{r7}
 80001ce:	4770      	bx	lr

080001d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80001d4:	e7fe      	b.n	80001d4 <HardFault_Handler+0x4>

080001d6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80001d6:	b480      	push	{r7}
 80001d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80001da:	e7fe      	b.n	80001da <MemManage_Handler+0x4>

080001dc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80001e0:	e7fe      	b.n	80001e0 <BusFault_Handler+0x4>

080001e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80001e2:	b480      	push	{r7}
 80001e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80001e6:	e7fe      	b.n	80001e6 <UsageFault_Handler+0x4>

080001e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80001ec:	bf00      	nop
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bc80      	pop	{r7}
 80001f2:	4770      	bx	lr

080001f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80001f4:	b480      	push	{r7}
 80001f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80001f8:	bf00      	nop
 80001fa:	46bd      	mov	sp, r7
 80001fc:	bc80      	pop	{r7}
 80001fe:	4770      	bx	lr

08000200 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000204:	bf00      	nop
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr

0800020c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000210:	f000 f85c 	bl	80002cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000214:	bf00      	nop
 8000216:	bd80      	pop	{r7, pc}

08000218 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 800021c:	4b15      	ldr	r3, [pc, #84]	; (8000274 <SystemInit+0x5c>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a14      	ldr	r2, [pc, #80]	; (8000274 <SystemInit+0x5c>)
 8000222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000226:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000228:	4b12      	ldr	r3, [pc, #72]	; (8000274 <SystemInit+0x5c>)
 800022a:	689a      	ldr	r2, [r3, #8]
 800022c:	4911      	ldr	r1, [pc, #68]	; (8000274 <SystemInit+0x5c>)
 800022e:	4b12      	ldr	r3, [pc, #72]	; (8000278 <SystemInit+0x60>)
 8000230:	4013      	ands	r3, r2
 8000232:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000234:	4b0f      	ldr	r3, [pc, #60]	; (8000274 <SystemInit+0x5c>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	4a0e      	ldr	r2, [pc, #56]	; (8000274 <SystemInit+0x5c>)
 800023a:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800023e:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8000242:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000244:	4b0b      	ldr	r3, [pc, #44]	; (8000274 <SystemInit+0x5c>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a0a      	ldr	r2, [pc, #40]	; (8000274 <SystemInit+0x5c>)
 800024a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800024e:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000250:	4b08      	ldr	r3, [pc, #32]	; (8000274 <SystemInit+0x5c>)
 8000252:	689b      	ldr	r3, [r3, #8]
 8000254:	4a07      	ldr	r2, [pc, #28]	; (8000274 <SystemInit+0x5c>)
 8000256:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800025a:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 800025c:	4b05      	ldr	r3, [pc, #20]	; (8000274 <SystemInit+0x5c>)
 800025e:	2200      	movs	r2, #0
 8000260:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000262:	4b06      	ldr	r3, [pc, #24]	; (800027c <SystemInit+0x64>)
 8000264:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000268:	609a      	str	r2, [r3, #8]
#endif
}
 800026a:	bf00      	nop
 800026c:	46bd      	mov	sp, r7
 800026e:	bc80      	pop	{r7}
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40023800 	.word	0x40023800
 8000278:	88ffc00c 	.word	0x88ffc00c
 800027c:	e000ed00 	.word	0xe000ed00

08000280 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000280:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000282:	e003      	b.n	800028c <LoopCopyDataInit>

08000284 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000284:	4b0b      	ldr	r3, [pc, #44]	; (80002b4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000286:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000288:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800028a:	3104      	adds	r1, #4

0800028c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800028c:	480a      	ldr	r0, [pc, #40]	; (80002b8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800028e:	4b0b      	ldr	r3, [pc, #44]	; (80002bc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000290:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000292:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000294:	d3f6      	bcc.n	8000284 <CopyDataInit>
  ldr r2, =_sbss
 8000296:	4a0a      	ldr	r2, [pc, #40]	; (80002c0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000298:	e002      	b.n	80002a0 <LoopFillZerobss>

0800029a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800029a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800029c:	f842 3b04 	str.w	r3, [r2], #4

080002a0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80002a0:	4b08      	ldr	r3, [pc, #32]	; (80002c4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80002a2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80002a4:	d3f9      	bcc.n	800029a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80002a6:	f7ff ffb7 	bl	8000218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80002aa:	f000 f821 	bl	80002f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ae:	f7ff ff65 	bl	800017c <main>
  bx lr
 80002b2:	4770      	bx	lr
  ldr r3, =_sidata
 80002b4:	08000358 	.word	0x08000358
  ldr r0, =_sdata
 80002b8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80002bc:	20000004 	.word	0x20000004
  ldr r2, =_sbss
 80002c0:	20000004 	.word	0x20000004
  ldr r3, = _ebss
 80002c4:	20000024 	.word	0x20000024

080002c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c8:	e7fe      	b.n	80002c8 <ADC1_IRQHandler>
	...

080002cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002d0:	4b05      	ldr	r3, [pc, #20]	; (80002e8 <HAL_IncTick+0x1c>)
 80002d2:	681a      	ldr	r2, [r3, #0]
 80002d4:	4b05      	ldr	r3, [pc, #20]	; (80002ec <HAL_IncTick+0x20>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4413      	add	r3, r2
 80002da:	4a03      	ldr	r2, [pc, #12]	; (80002e8 <HAL_IncTick+0x1c>)
 80002dc:	6013      	str	r3, [r2, #0]
}
 80002de:	bf00      	nop
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bc80      	pop	{r7}
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	20000020 	.word	0x20000020
 80002ec:	20000000 	.word	0x20000000

080002f0 <__libc_init_array>:
 80002f0:	b570      	push	{r4, r5, r6, lr}
 80002f2:	2500      	movs	r5, #0
 80002f4:	4e0c      	ldr	r6, [pc, #48]	; (8000328 <__libc_init_array+0x38>)
 80002f6:	4c0d      	ldr	r4, [pc, #52]	; (800032c <__libc_init_array+0x3c>)
 80002f8:	1ba4      	subs	r4, r4, r6
 80002fa:	10a4      	asrs	r4, r4, #2
 80002fc:	42a5      	cmp	r5, r4
 80002fe:	d109      	bne.n	8000314 <__libc_init_array+0x24>
 8000300:	f000 f81a 	bl	8000338 <_init>
 8000304:	2500      	movs	r5, #0
 8000306:	4e0a      	ldr	r6, [pc, #40]	; (8000330 <__libc_init_array+0x40>)
 8000308:	4c0a      	ldr	r4, [pc, #40]	; (8000334 <__libc_init_array+0x44>)
 800030a:	1ba4      	subs	r4, r4, r6
 800030c:	10a4      	asrs	r4, r4, #2
 800030e:	42a5      	cmp	r5, r4
 8000310:	d105      	bne.n	800031e <__libc_init_array+0x2e>
 8000312:	bd70      	pop	{r4, r5, r6, pc}
 8000314:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000318:	4798      	blx	r3
 800031a:	3501      	adds	r5, #1
 800031c:	e7ee      	b.n	80002fc <__libc_init_array+0xc>
 800031e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000322:	4798      	blx	r3
 8000324:	3501      	adds	r5, #1
 8000326:	e7f2      	b.n	800030e <__libc_init_array+0x1e>
 8000328:	08000350 	.word	0x08000350
 800032c:	08000350 	.word	0x08000350
 8000330:	08000350 	.word	0x08000350
 8000334:	08000354 	.word	0x08000354

08000338 <_init>:
 8000338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033a:	bf00      	nop
 800033c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800033e:	bc08      	pop	{r3}
 8000340:	469e      	mov	lr, r3
 8000342:	4770      	bx	lr

08000344 <_fini>:
 8000344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000346:	bf00      	nop
 8000348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800034a:	bc08      	pop	{r3}
 800034c:	469e      	mov	lr, r3
 800034e:	4770      	bx	lr


L100CDISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d70  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08002eac  08002eac  00012eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003124  08003124  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08003124  08003124  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003124  08003124  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003124  08003124  00013124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003128  08003128  00013128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800312c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000460  200001e0  0800330c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  0800330c  00020640  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007e79  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a33  00000000  00000000  00028082  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000720  00000000  00000000  00029ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000638  00000000  00000000  0002a1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015862  00000000  00000000  0002a810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007098  00000000  00000000  00040072  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080db2  00000000  00000000  0004710a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c7ebc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f90  00000000  00000000  000c7f38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001e0 	.word	0x200001e0
 8000158:	00000000 	.word	0x00000000
 800015c:	08002e94 	.word	0x08002e94

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e4 	.word	0x200001e4
 8000178:	08002e94 	.word	0x08002e94

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b08a      	sub	sp, #40	; 0x28
 8000190:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000192:	f107 0314 	add.w	r3, r7, #20
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
 800019a:	605a      	str	r2, [r3, #4]
 800019c:	609a      	str	r2, [r3, #8]
 800019e:	60da      	str	r2, [r3, #12]
 80001a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001a2:	4b2a      	ldr	r3, [pc, #168]	; (800024c <MX_GPIO_Init+0xc0>)
 80001a4:	69db      	ldr	r3, [r3, #28]
 80001a6:	4a29      	ldr	r2, [pc, #164]	; (800024c <MX_GPIO_Init+0xc0>)
 80001a8:	f043 0304 	orr.w	r3, r3, #4
 80001ac:	61d3      	str	r3, [r2, #28]
 80001ae:	4b27      	ldr	r3, [pc, #156]	; (800024c <MX_GPIO_Init+0xc0>)
 80001b0:	69db      	ldr	r3, [r3, #28]
 80001b2:	f003 0304 	and.w	r3, r3, #4
 80001b6:	613b      	str	r3, [r7, #16]
 80001b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80001ba:	4b24      	ldr	r3, [pc, #144]	; (800024c <MX_GPIO_Init+0xc0>)
 80001bc:	69db      	ldr	r3, [r3, #28]
 80001be:	4a23      	ldr	r2, [pc, #140]	; (800024c <MX_GPIO_Init+0xc0>)
 80001c0:	f043 0320 	orr.w	r3, r3, #32
 80001c4:	61d3      	str	r3, [r2, #28]
 80001c6:	4b21      	ldr	r3, [pc, #132]	; (800024c <MX_GPIO_Init+0xc0>)
 80001c8:	69db      	ldr	r3, [r3, #28]
 80001ca:	f003 0320 	and.w	r3, r3, #32
 80001ce:	60fb      	str	r3, [r7, #12]
 80001d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001d2:	4b1e      	ldr	r3, [pc, #120]	; (800024c <MX_GPIO_Init+0xc0>)
 80001d4:	69db      	ldr	r3, [r3, #28]
 80001d6:	4a1d      	ldr	r2, [pc, #116]	; (800024c <MX_GPIO_Init+0xc0>)
 80001d8:	f043 0301 	orr.w	r3, r3, #1
 80001dc:	61d3      	str	r3, [r2, #28]
 80001de:	4b1b      	ldr	r3, [pc, #108]	; (800024c <MX_GPIO_Init+0xc0>)
 80001e0:	69db      	ldr	r3, [r3, #28]
 80001e2:	f003 0301 	and.w	r3, r3, #1
 80001e6:	60bb      	str	r3, [r7, #8]
 80001e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001ea:	4b18      	ldr	r3, [pc, #96]	; (800024c <MX_GPIO_Init+0xc0>)
 80001ec:	69db      	ldr	r3, [r3, #28]
 80001ee:	4a17      	ldr	r2, [pc, #92]	; (800024c <MX_GPIO_Init+0xc0>)
 80001f0:	f043 0302 	orr.w	r3, r3, #2
 80001f4:	61d3      	str	r3, [r2, #28]
 80001f6:	4b15      	ldr	r3, [pc, #84]	; (800024c <MX_GPIO_Init+0xc0>)
 80001f8:	69db      	ldr	r3, [r3, #28]
 80001fa:	f003 0302 	and.w	r3, r3, #2
 80001fe:	607b      	str	r3, [r7, #4]
 8000200:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000208:	4811      	ldr	r0, [pc, #68]	; (8000250 <MX_GPIO_Init+0xc4>)
 800020a:	f000 ff34 	bl	8001076 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800020e:	2301      	movs	r3, #1
 8000210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000212:	4b10      	ldr	r3, [pc, #64]	; (8000254 <MX_GPIO_Init+0xc8>)
 8000214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021a:	f107 0314 	add.w	r3, r7, #20
 800021e:	4619      	mov	r1, r3
 8000220:	480d      	ldr	r0, [pc, #52]	; (8000258 <MX_GPIO_Init+0xcc>)
 8000222:	f000 fd9b 	bl	8000d5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000226:	f44f 7340 	mov.w	r3, #768	; 0x300
 800022a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800022c:	2301      	movs	r3, #1
 800022e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000230:	2300      	movs	r3, #0
 8000232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000234:	2300      	movs	r3, #0
 8000236:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	4619      	mov	r1, r3
 800023e:	4804      	ldr	r0, [pc, #16]	; (8000250 <MX_GPIO_Init+0xc4>)
 8000240:	f000 fd8c 	bl	8000d5c <HAL_GPIO_Init>

}
 8000244:	bf00      	nop
 8000246:	3728      	adds	r7, #40	; 0x28
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	40023800 	.word	0x40023800
 8000250:	40020800 	.word	0x40020800
 8000254:	10110000 	.word	0x10110000
 8000258:	40020000 	.word	0x40020000

0800025c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t opt = 0;
 8000262:	2300      	movs	r3, #0
 8000264:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000266:	f000 fbbc 	bl	80009e2 <HAL_Init>

  /* USER CODE BEGIN Init */
  RingBuffer_Init(&txBuf);
 800026a:	480d      	ldr	r0, [pc, #52]	; (80002a0 <main+0x44>)
 800026c:	f000 f9be 	bl	80005ec <RingBuffer_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000270:	f000 f818 	bl	80002a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000274:	f7ff ff8a 	bl	800018c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000278:	f000 fb18 	bl	80008ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printMessage:
  	  printWelcomeMessage();
 800027c:	f000 f860 	bl	8000340 <printWelcomeMessage>
  while (1)
  {
	   //printTestMessage();
    /* USER CODE END WHILE */

	    opt = readUserInput();
 8000280:	f000 f8aa 	bl	80003d8 <readUserInput>
 8000284:	4603      	mov	r3, r0
 8000286:	71fb      	strb	r3, [r7, #7]
	    if(opt > 0)
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	2b00      	cmp	r3, #0
 800028c:	d0f8      	beq.n	8000280 <main+0x24>
	    {
	      processUserInput(opt);
 800028e:	79fb      	ldrb	r3, [r7, #7]
 8000290:	4618      	mov	r0, r3
 8000292:	f000 f8c3 	bl	800041c <processUserInput>
	      if(opt == 3)
 8000296:	79fb      	ldrb	r3, [r7, #7]
 8000298:	2b03      	cmp	r3, #3
 800029a:	d1f1      	bne.n	8000280 <main+0x24>
	      {
	        goto printMessage;
 800029c:	e7ee      	b.n	800027c <main+0x20>
 800029e:	bf00      	nop
 80002a0:	20000208 	.word	0x20000208

080002a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b092      	sub	sp, #72	; 0x48
 80002a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002aa:	f107 0314 	add.w	r3, r7, #20
 80002ae:	2234      	movs	r2, #52	; 0x34
 80002b0:	2100      	movs	r1, #0
 80002b2:	4618      	mov	r0, r3
 80002b4:	f002 f91e 	bl	80024f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b8:	463b      	mov	r3, r7
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002c6:	4b1d      	ldr	r3, [pc, #116]	; (800033c <SystemClock_Config+0x98>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80002ce:	4a1b      	ldr	r2, [pc, #108]	; (800033c <SystemClock_Config+0x98>)
 80002d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002d4:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002d6:	2302      	movs	r3, #2
 80002d8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002da:	2301      	movs	r3, #1
 80002dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002de:	2310      	movs	r3, #16
 80002e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e2:	2302      	movs	r3, #2
 80002e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002e6:	2300      	movs	r3, #0
 80002e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80002ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80002f0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80002f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f6:	f107 0314 	add.w	r3, r7, #20
 80002fa:	4618      	mov	r0, r3
 80002fc:	f000 feec 	bl	80010d8 <HAL_RCC_OscConfig>
 8000300:	4603      	mov	r3, r0
 8000302:	2b00      	cmp	r3, #0
 8000304:	d001      	beq.n	800030a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000306:	f000 f929 	bl	800055c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800030a:	230f      	movs	r3, #15
 800030c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800030e:	2303      	movs	r3, #3
 8000310:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000312:	2300      	movs	r3, #0
 8000314:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000316:	2300      	movs	r3, #0
 8000318:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800031a:	2300      	movs	r3, #0
 800031c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800031e:	463b      	mov	r3, r7
 8000320:	2101      	movs	r1, #1
 8000322:	4618      	mov	r0, r3
 8000324:	f001 fa08 	bl	8001738 <HAL_RCC_ClockConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800032e:	f000 f915 	bl	800055c <Error_Handler>
  }
}
 8000332:	bf00      	nop
 8000334:	3748      	adds	r7, #72	; 0x48
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
 800033a:	bf00      	nop
 800033c:	40007000 	.word	0x40007000

08000340 <printWelcomeMessage>:

/* USER CODE BEGIN 4 */
void printWelcomeMessage(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	UART_Transmit(&huart1, (uint8_t*)"\033[0;0H", strlen("\033[0;0H"));
 8000344:	2206      	movs	r2, #6
 8000346:	490d      	ldr	r1, [pc, #52]	; (800037c <printWelcomeMessage+0x3c>)
 8000348:	480d      	ldr	r0, [pc, #52]	; (8000380 <printWelcomeMessage+0x40>)
 800034a:	f000 f823 	bl	8000394 <UART_Transmit>
	UART_Transmit(&huart1, (uint8_t*)"\033[2J", strlen("\033[2J"));
 800034e:	2204      	movs	r2, #4
 8000350:	490c      	ldr	r1, [pc, #48]	; (8000384 <printWelcomeMessage+0x44>)
 8000352:	480b      	ldr	r0, [pc, #44]	; (8000380 <printWelcomeMessage+0x40>)
 8000354:	f000 f81e 	bl	8000394 <UART_Transmit>
	UART_Transmit(&huart1, (uint8_t*)WELCOME_MSG, strlen(WELCOME_MSG));
 8000358:	222c      	movs	r2, #44	; 0x2c
 800035a:	490b      	ldr	r1, [pc, #44]	; (8000388 <printWelcomeMessage+0x48>)
 800035c:	4808      	ldr	r0, [pc, #32]	; (8000380 <printWelcomeMessage+0x40>)
 800035e:	f000 f819 	bl	8000394 <UART_Transmit>
	UART_Transmit(&huart1, (uint8_t*)MAIN_MENU, strlen(MAIN_MENU));
 8000362:	228b      	movs	r2, #139	; 0x8b
 8000364:	4909      	ldr	r1, [pc, #36]	; (800038c <printWelcomeMessage+0x4c>)
 8000366:	4806      	ldr	r0, [pc, #24]	; (8000380 <printWelcomeMessage+0x40>)
 8000368:	f000 f814 	bl	8000394 <UART_Transmit>
	UART_Transmit(&huart1, (uint8_t*)PROMPT, strlen(PROMPT));
 800036c:	2204      	movs	r2, #4
 800036e:	4908      	ldr	r1, [pc, #32]	; (8000390 <printWelcomeMessage+0x50>)
 8000370:	4803      	ldr	r0, [pc, #12]	; (8000380 <printWelcomeMessage+0x40>)
 8000372:	f000 f80f 	bl	8000394 <UART_Transmit>
}
 8000376:	bf00      	nop
 8000378:	bd80      	pop	{r7, pc}
 800037a:	bf00      	nop
 800037c:	08002eac 	.word	0x08002eac
 8000380:	200005f8 	.word	0x200005f8
 8000384:	08002eb4 	.word	0x08002eb4
 8000388:	08002ebc 	.word	0x08002ebc
 800038c:	08002eec 	.word	0x08002eec
 8000390:	08002f78 	.word	0x08002f78

08000394 <UART_Transmit>:
	UART_Transmit(&huart1, (uint8_t*)"\033[2J", strlen("\033[2J"));
	UART_Transmit(&huart1, (uint8_t*)TEST, strlen(TEST));
}

uint8_t UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t len)
{
 8000394:	b580      	push	{r7, lr}
 8000396:	b084      	sub	sp, #16
 8000398:	af00      	add	r7, sp, #0
 800039a:	60f8      	str	r0, [r7, #12]
 800039c:	60b9      	str	r1, [r7, #8]
 800039e:	4613      	mov	r3, r2
 80003a0:	80fb      	strh	r3, [r7, #6]
	if(HAL_UART_Transmit_IT(huart, pData, len) != HAL_OK)
 80003a2:	88fb      	ldrh	r3, [r7, #6]
 80003a4:	461a      	mov	r2, r3
 80003a6:	68b9      	ldr	r1, [r7, #8]
 80003a8:	68f8      	ldr	r0, [r7, #12]
 80003aa:	f001 fc30 	bl	8001c0e <HAL_UART_Transmit_IT>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d00a      	beq.n	80003ca <UART_Transmit+0x36>
	{
		if(RingBuffer_Write(&txBuf, pData, len) != RING_BUFFER_OK)
 80003b4:	88fb      	ldrh	r3, [r7, #6]
 80003b6:	461a      	mov	r2, r3
 80003b8:	68b9      	ldr	r1, [r7, #8]
 80003ba:	4806      	ldr	r0, [pc, #24]	; (80003d4 <UART_Transmit+0x40>)
 80003bc:	f000 f96e 	bl	800069c <RingBuffer_Write>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <UART_Transmit+0x36>
			return 0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	e000      	b.n	80003cc <UART_Transmit+0x38>
	}
	return 1;
 80003ca:	2301      	movs	r3, #1
}
 80003cc:	4618      	mov	r0, r3
 80003ce:	3710      	adds	r7, #16
 80003d0:	46bd      	mov	sp, r7
 80003d2:	bd80      	pop	{r7, pc}
 80003d4:	20000208 	.word	0x20000208

080003d8 <readUserInput>:

uint8_t readUserInput(void) {
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
	int8_t retVal = -1;
 80003de:	23ff      	movs	r3, #255	; 0xff
 80003e0:	71fb      	strb	r3, [r7, #7]

	if(UartReady == SET) {
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <readUserInput+0x38>)
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	d10c      	bne.n	8000406 <readUserInput+0x2e>
	UartReady = RESET;
 80003ec:	4b08      	ldr	r3, [pc, #32]	; (8000410 <readUserInput+0x38>)
 80003ee:	2200      	movs	r2, #0
 80003f0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, (uint8_t*)readBuf, 1);
 80003f2:	2201      	movs	r2, #1
 80003f4:	4907      	ldr	r1, [pc, #28]	; (8000414 <readUserInput+0x3c>)
 80003f6:	4808      	ldr	r0, [pc, #32]	; (8000418 <readUserInput+0x40>)
 80003f8:	f001 fc4d 	bl	8001c96 <HAL_UART_Receive_IT>
	retVal = atoi(readBuf);
 80003fc:	4805      	ldr	r0, [pc, #20]	; (8000414 <readUserInput+0x3c>)
 80003fe:	f002 f84b 	bl	8002498 <atoi>
 8000402:	4603      	mov	r3, r0
 8000404:	71fb      	strb	r3, [r7, #7]
	}
	return retVal;
 8000406:	79fb      	ldrb	r3, [r7, #7]
}
 8000408:	4618      	mov	r0, r3
 800040a:	3708      	adds	r7, #8
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000000 	.word	0x20000000
 8000414:	200005f4 	.word	0x200005f4
 8000418:	200005f8 	.word	0x200005f8

0800041c <processUserInput>:


uint8_t processUserInput(uint8_t opt) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b08a      	sub	sp, #40	; 0x28
 8000420:	af00      	add	r7, sp, #0
 8000422:	4603      	mov	r3, r0
 8000424:	71fb      	strb	r3, [r7, #7]
	char msg[30];

	if(!opt || opt > 3)
 8000426:	79fb      	ldrb	r3, [r7, #7]
 8000428:	2b00      	cmp	r3, #0
 800042a:	d002      	beq.n	8000432 <processUserInput+0x16>
 800042c:	79fb      	ldrb	r3, [r7, #7]
 800042e:	2b03      	cmp	r3, #3
 8000430:	d901      	bls.n	8000436 <processUserInput+0x1a>
		return 0;
 8000432:	2300      	movs	r3, #0
 8000434:	e04b      	b.n	80004ce <processUserInput+0xb2>

	sprintf(msg, "%d", opt);
 8000436:	79fa      	ldrb	r2, [r7, #7]
 8000438:	f107 0308 	add.w	r3, r7, #8
 800043c:	4926      	ldr	r1, [pc, #152]	; (80004d8 <processUserInput+0xbc>)
 800043e:	4618      	mov	r0, r3
 8000440:	f002 f860 	bl	8002504 <siprintf>
	UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg));
 8000444:	f107 0308 	add.w	r3, r7, #8
 8000448:	4618      	mov	r0, r3
 800044a:	f7ff fe97 	bl	800017c <strlen>
 800044e:	4603      	mov	r3, r0
 8000450:	b29a      	uxth	r2, r3
 8000452:	f107 0308 	add.w	r3, r7, #8
 8000456:	4619      	mov	r1, r3
 8000458:	4820      	ldr	r0, [pc, #128]	; (80004dc <processUserInput+0xc0>)
 800045a:	f7ff ff9b 	bl	8000394 <UART_Transmit>

	switch(opt) {
 800045e:	79fb      	ldrb	r3, [r7, #7]
 8000460:	2b02      	cmp	r3, #2
 8000462:	d013      	beq.n	800048c <processUserInput+0x70>
 8000464:	2b03      	cmp	r3, #3
 8000466:	d02f      	beq.n	80004c8 <processUserInput+0xac>
 8000468:	2b01      	cmp	r3, #1
 800046a:	d12f      	bne.n	80004cc <processUserInput+0xb0>
	case 1:
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 800046c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000470:	481b      	ldr	r0, [pc, #108]	; (80004e0 <processUserInput+0xc4>)
 8000472:	f000 fe18 	bl	80010a6 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000476:	f44f 7100 	mov.w	r1, #512	; 0x200
 800047a:	4819      	ldr	r0, [pc, #100]	; (80004e0 <processUserInput+0xc4>)
 800047c:	f000 fe13 	bl	80010a6 <HAL_GPIO_TogglePin>
		UART_Transmit(&huart1, (uint8_t*)"\r\n", strlen("\r\n"));
 8000480:	2202      	movs	r2, #2
 8000482:	4918      	ldr	r1, [pc, #96]	; (80004e4 <processUserInput+0xc8>)
 8000484:	4815      	ldr	r0, [pc, #84]	; (80004dc <processUserInput+0xc0>)
 8000486:	f7ff ff85 	bl	8000394 <UART_Transmit>
		break;
 800048a:	e01f      	b.n	80004cc <processUserInput+0xb0>
	case 2:
		sprintf(msg, "\r\nUSER BUTTON status: %s\r\n", HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET ? "RELEASED" : "PRESSED");
 800048c:	2101      	movs	r1, #1
 800048e:	4816      	ldr	r0, [pc, #88]	; (80004e8 <processUserInput+0xcc>)
 8000490:	f000 fdda 	bl	8001048 <HAL_GPIO_ReadPin>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d101      	bne.n	800049e <processUserInput+0x82>
 800049a:	4a14      	ldr	r2, [pc, #80]	; (80004ec <processUserInput+0xd0>)
 800049c:	e000      	b.n	80004a0 <processUserInput+0x84>
 800049e:	4a14      	ldr	r2, [pc, #80]	; (80004f0 <processUserInput+0xd4>)
 80004a0:	f107 0308 	add.w	r3, r7, #8
 80004a4:	4913      	ldr	r1, [pc, #76]	; (80004f4 <processUserInput+0xd8>)
 80004a6:	4618      	mov	r0, r3
 80004a8:	f002 f82c 	bl	8002504 <siprintf>
		UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg));
 80004ac:	f107 0308 	add.w	r3, r7, #8
 80004b0:	4618      	mov	r0, r3
 80004b2:	f7ff fe63 	bl	800017c <strlen>
 80004b6:	4603      	mov	r3, r0
 80004b8:	b29a      	uxth	r2, r3
 80004ba:	f107 0308 	add.w	r3, r7, #8
 80004be:	4619      	mov	r1, r3
 80004c0:	4806      	ldr	r0, [pc, #24]	; (80004dc <processUserInput+0xc0>)
 80004c2:	f7ff ff67 	bl	8000394 <UART_Transmit>
		break;
 80004c6:	e001      	b.n	80004cc <processUserInput+0xb0>
	case 3:
		return 2;
 80004c8:	2302      	movs	r3, #2
 80004ca:	e000      	b.n	80004ce <processUserInput+0xb2>
	};

	return 1;
 80004cc:	2301      	movs	r3, #1
}
 80004ce:	4618      	mov	r0, r3
 80004d0:	3728      	adds	r7, #40	; 0x28
 80004d2:	46bd      	mov	sp, r7
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	08002f88 	.word	0x08002f88
 80004dc:	200005f8 	.word	0x200005f8
 80004e0:	40020800 	.word	0x40020800
 80004e4:	08002f8c 	.word	0x08002f8c
 80004e8:	40020000 	.word	0x40020000
 80004ec:	08002f90 	.word	0x08002f90
 80004f0:	08002f9c 	.word	0x08002f9c
 80004f4:	08002fa4 	.word	0x08002fa4

080004f8 <HAL_UART_RxCpltCallback>:
 void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart1)
 {
 80004f8:	b480      	push	{r7}
 80004fa:	b083      	sub	sp, #12
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
 /* Set transmission flag: transfer complete*/
 UartReady = SET;
 8000500:	4b03      	ldr	r3, [pc, #12]	; (8000510 <HAL_UART_RxCpltCallback+0x18>)
 8000502:	2201      	movs	r2, #1
 8000504:	701a      	strb	r2, [r3, #0]
 }
 8000506:	bf00      	nop
 8000508:	370c      	adds	r7, #12
 800050a:	46bd      	mov	sp, r7
 800050c:	bc80      	pop	{r7}
 800050e:	4770      	bx	lr
 8000510:	20000000 	.word	0x20000000

08000514 <HAL_UART_TxCpltCallback>:

 void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart1)
 {
 8000514:	b580      	push	{r7, lr}
 8000516:	b084      	sub	sp, #16
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	 uint8_t txData = txBuf.tail;
 800051c:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <HAL_UART_TxCpltCallback+0x44>)
 800051e:	f8b3 33ea 	ldrh.w	r3, [r3, #1002]	; 0x3ea
 8000522:	b2db      	uxtb	r3, r3
 8000524:	73fb      	strb	r3, [r7, #15]
	 if(RingBuffer_GetDataLength(&txBuf) > 0)
 8000526:	480c      	ldr	r0, [pc, #48]	; (8000558 <HAL_UART_TxCpltCallback+0x44>)
 8000528:	f000 f850 	bl	80005cc <RingBuffer_GetDataLength>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d00d      	beq.n	800054e <HAL_UART_TxCpltCallback+0x3a>
	 	{
		 RingBuffer_Read(&txBuf, &txData, 1);
 8000532:	f107 030f 	add.w	r3, r7, #15
 8000536:	2201      	movs	r2, #1
 8000538:	4619      	mov	r1, r3
 800053a:	4807      	ldr	r0, [pc, #28]	; (8000558 <HAL_UART_TxCpltCallback+0x44>)
 800053c:	f000 f870 	bl	8000620 <RingBuffer_Read>
		 HAL_UART_Transmit_IT(huart1, &txData, 1);
 8000540:	f107 030f 	add.w	r3, r7, #15
 8000544:	2201      	movs	r2, #1
 8000546:	4619      	mov	r1, r3
 8000548:	6878      	ldr	r0, [r7, #4]
 800054a:	f001 fb60 	bl	8001c0e <HAL_UART_Transmit_IT>
	 	}
 }
 800054e:	bf00      	nop
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	20000208 	.word	0x20000208

0800055c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000560:	bf00      	nop
 8000562:	46bd      	mov	sp, r7
 8000564:	bc80      	pop	{r7}
 8000566:	4770      	bx	lr

08000568 <RingBuffer_GetFreeSpace>:
#include "ringbuffer.h"
#include <string.h>

uint16_t RingBuffer_GetFreeSpace(RingBuffer *buf)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	if(buf->tail == buf->head)
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 800057c:	429a      	cmp	r2, r3
 800057e:	d102      	bne.n	8000586 <RingBuffer_GetFreeSpace+0x1e>
		return RING_BUFFER_LENGTH - 1;
 8000580:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000584:	e01d      	b.n	80005c2 <RingBuffer_GetFreeSpace+0x5a>

	if(buf->head > buf->tail)
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	f8b3 23e8 	ldrh.w	r2, [r3, #1000]	; 0x3e8
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	f8b3 33ea 	ldrh.w	r3, [r3, #1002]	; 0x3ea
 8000592:	429a      	cmp	r2, r3
 8000594:	d90b      	bls.n	80005ae <RingBuffer_GetFreeSpace+0x46>
		return RING_BUFFER_LENGTH - ((buf->head - buf->tail) + 1);
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 80005a2:	1ad3      	subs	r3, r2, r3
 80005a4:	b29b      	uxth	r3, r3
 80005a6:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	e009      	b.n	80005c2 <RingBuffer_GetFreeSpace+0x5a>
	else
		return  (buf->tail - buf->head) - 1;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 80005ba:	1ad3      	subs	r3, r2, r3
 80005bc:	b29b      	uxth	r3, r3
 80005be:	3b01      	subs	r3, #1
 80005c0:	b29b      	uxth	r3, r3
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr

080005cc <RingBuffer_GetDataLength>:

uint16_t RingBuffer_GetDataLength(RingBuffer *buf)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	return RING_BUFFER_LENGTH - (RingBuffer_GetFreeSpace(buf) + 1);
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f7ff ffc7 	bl	8000568 <RingBuffer_GetFreeSpace>
 80005da:	4603      	mov	r3, r0
 80005dc:	f5c3 7379 	rsb	r3, r3, #996	; 0x3e4
 80005e0:	3303      	adds	r3, #3
 80005e2:	b29b      	uxth	r3, r3
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <RingBuffer_Init>:


void RingBuffer_Init(RingBuffer *buf)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
	buf->head = buf->tail = 0;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	2200      	movs	r2, #0
 80005f8:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
	memset(buf->buf, 0, RING_BUFFER_LENGTH);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800060e:	2100      	movs	r1, #0
 8000610:	4618      	mov	r0, r3
 8000612:	f001 ff6f 	bl	80024f4 <memset>
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
	...

08000620 <RingBuffer_Read>:

uint16_t RingBuffer_Read(RingBuffer *buf, uint8_t *data, uint16_t len)
{
 8000620:	b480      	push	{r7}
 8000622:	b087      	sub	sp, #28
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	4613      	mov	r3, r2
 800062c:	80fb      	strh	r3, [r7, #6]
	uint16_t counter = 0;
 800062e:	2300      	movs	r3, #0
 8000630:	82fb      	strh	r3, [r7, #22]

	while(buf->tail != buf->head && counter < len) {
 8000632:	e01f      	b.n	8000674 <RingBuffer_Read+0x54>
		data[counter++] = buf->buf[buf->tail];
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f8b3 33ea 	ldrh.w	r3, [r3, #1002]	; 0x3ea
 800063a:	4619      	mov	r1, r3
 800063c:	8afb      	ldrh	r3, [r7, #22]
 800063e:	1c5a      	adds	r2, r3, #1
 8000640:	82fa      	strh	r2, [r7, #22]
 8000642:	461a      	mov	r2, r3
 8000644:	68bb      	ldr	r3, [r7, #8]
 8000646:	4413      	add	r3, r2
 8000648:	68fa      	ldr	r2, [r7, #12]
 800064a:	5c52      	ldrb	r2, [r2, r1]
 800064c:	701a      	strb	r2, [r3, #0]
		buf->tail = (buf->tail + 1) % RING_BUFFER_LENGTH;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	f8b3 33ea 	ldrh.w	r3, [r3, #1002]	; 0x3ea
 8000654:	3301      	adds	r3, #1
 8000656:	4a10      	ldr	r2, [pc, #64]	; (8000698 <RingBuffer_Read+0x78>)
 8000658:	fb82 1203 	smull	r1, r2, r2, r3
 800065c:	1191      	asrs	r1, r2, #6
 800065e:	17da      	asrs	r2, r3, #31
 8000660:	1a8a      	subs	r2, r1, r2
 8000662:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000666:	fb01 f202 	mul.w	r2, r1, r2
 800066a:	1a9a      	subs	r2, r3, r2
 800066c:	b292      	uxth	r2, r2
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	f8a3 23ea 	strh.w	r2, [r3, #1002]	; 0x3ea
	while(buf->tail != buf->head && counter < len) {
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	f8b3 23ea 	ldrh.w	r2, [r3, #1002]	; 0x3ea
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 8000680:	429a      	cmp	r2, r3
 8000682:	d003      	beq.n	800068c <RingBuffer_Read+0x6c>
 8000684:	8afa      	ldrh	r2, [r7, #22]
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	429a      	cmp	r2, r3
 800068a:	d3d3      	bcc.n	8000634 <RingBuffer_Read+0x14>
	}
	return counter;
 800068c:	8afb      	ldrh	r3, [r7, #22]
}
 800068e:	4618      	mov	r0, r3
 8000690:	371c      	adds	r7, #28
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	10624dd3 	.word	0x10624dd3

0800069c <RingBuffer_Write>:

uint8_t RingBuffer_Write(RingBuffer *buf, uint8_t *data, uint16_t len)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	4613      	mov	r3, r2
 80006a8:	80fb      	strh	r3, [r7, #6]
	uint16_t counter = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	82fb      	strh	r3, [r7, #22]
	uint16_t freeSpace = RingBuffer_GetFreeSpace(buf);
 80006ae:	68f8      	ldr	r0, [r7, #12]
 80006b0:	f7ff ff5a 	bl	8000568 <RingBuffer_GetFreeSpace>
 80006b4:	4603      	mov	r3, r0
 80006b6:	82bb      	strh	r3, [r7, #20]

	if(freeSpace == 0)
 80006b8:	8abb      	ldrh	r3, [r7, #20]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d101      	bne.n	80006c2 <RingBuffer_Write+0x26>
		return RING_BUFFER_FULL;
 80006be:	2301      	movs	r3, #1
 80006c0:	e029      	b.n	8000716 <RingBuffer_Write+0x7a>
	else if (freeSpace < len)
 80006c2:	8aba      	ldrh	r2, [r7, #20]
 80006c4:	88fb      	ldrh	r3, [r7, #6]
 80006c6:	429a      	cmp	r2, r3
 80006c8:	d220      	bcs.n	800070c <RingBuffer_Write+0x70>
		return RING_BUFFER_NO_SUFFICIENT_SPACE;
 80006ca:	2302      	movs	r3, #2
 80006cc:	e023      	b.n	8000716 <RingBuffer_Write+0x7a>

	while(counter < len) {
		buf->buf[buf->head] = data[counter++];
 80006ce:	8afb      	ldrh	r3, [r7, #22]
 80006d0:	1c5a      	adds	r2, r3, #1
 80006d2:	82fa      	strh	r2, [r7, #22]
 80006d4:	461a      	mov	r2, r3
 80006d6:	68bb      	ldr	r3, [r7, #8]
 80006d8:	4413      	add	r3, r2
 80006da:	68fa      	ldr	r2, [r7, #12]
 80006dc:	f8b2 23e8 	ldrh.w	r2, [r2, #1000]	; 0x3e8
 80006e0:	7819      	ldrb	r1, [r3, #0]
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	5499      	strb	r1, [r3, r2]
		buf->head = (buf->head + 1) % RING_BUFFER_LENGTH;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	f8b3 33e8 	ldrh.w	r3, [r3, #1000]	; 0x3e8
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a0c      	ldr	r2, [pc, #48]	; (8000720 <RingBuffer_Write+0x84>)
 80006f0:	fb82 1203 	smull	r1, r2, r2, r3
 80006f4:	1191      	asrs	r1, r2, #6
 80006f6:	17da      	asrs	r2, r3, #31
 80006f8:	1a8a      	subs	r2, r1, r2
 80006fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006fe:	fb01 f202 	mul.w	r2, r1, r2
 8000702:	1a9a      	subs	r2, r3, r2
 8000704:	b292      	uxth	r2, r2
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	f8a3 23e8 	strh.w	r2, [r3, #1000]	; 0x3e8
	while(counter < len) {
 800070c:	8afa      	ldrh	r2, [r7, #22]
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	429a      	cmp	r2, r3
 8000712:	d3dc      	bcc.n	80006ce <RingBuffer_Write+0x32>
	}
 	return RING_BUFFER_OK;
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	3718      	adds	r7, #24
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	10624dd3 	.word	0x10624dd3

08000724 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <HAL_MspInit+0x5c>)
 800072c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800072e:	4a14      	ldr	r2, [pc, #80]	; (8000780 <HAL_MspInit+0x5c>)
 8000730:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000734:	6253      	str	r3, [r2, #36]	; 0x24
 8000736:	4b12      	ldr	r3, [pc, #72]	; (8000780 <HAL_MspInit+0x5c>)
 8000738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800073a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800073e:	60fb      	str	r3, [r7, #12]
 8000740:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000742:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <HAL_MspInit+0x5c>)
 8000744:	6a1b      	ldr	r3, [r3, #32]
 8000746:	4a0e      	ldr	r2, [pc, #56]	; (8000780 <HAL_MspInit+0x5c>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6213      	str	r3, [r2, #32]
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <HAL_MspInit+0x5c>)
 8000750:	6a1b      	ldr	r3, [r3, #32]
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60bb      	str	r3, [r7, #8]
 8000758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <HAL_MspInit+0x5c>)
 800075c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075e:	4a08      	ldr	r2, [pc, #32]	; (8000780 <HAL_MspInit+0x5c>)
 8000760:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000764:	6253      	str	r3, [r2, #36]	; 0x24
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <HAL_MspInit+0x5c>)
 8000768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800076a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000772:	2007      	movs	r0, #7
 8000774:	f000 fa70 	bl	8000c58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000778:	bf00      	nop
 800077a:	3710      	adds	r7, #16
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	40023800 	.word	0x40023800

08000784 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	46bd      	mov	sp, r7
 800078c:	bc80      	pop	{r7}
 800078e:	4770      	bx	lr

08000790 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000794:	e7fe      	b.n	8000794 <HardFault_Handler+0x4>

08000796 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000796:	b480      	push	{r7}
 8000798:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800079a:	e7fe      	b.n	800079a <MemManage_Handler+0x4>

0800079c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <BusFault_Handler+0x4>

080007a2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007a6:	e7fe      	b.n	80007a6 <UsageFault_Handler+0x4>

080007a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007c4:	bf00      	nop
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bc80      	pop	{r7}
 80007ca:	4770      	bx	lr

080007cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d0:	f000 f95a 	bl	8000a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007d4:	bf00      	nop
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007dc:	4802      	ldr	r0, [pc, #8]	; (80007e8 <USART1_IRQHandler+0x10>)
 80007de:	f001 faaf 	bl	8001d40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007e2:	bf00      	nop
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	200005f8 	.word	0x200005f8

080007ec <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80007f4:	4b11      	ldr	r3, [pc, #68]	; (800083c <_sbrk+0x50>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d102      	bne.n	8000802 <_sbrk+0x16>
		heap_end = &end;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <_sbrk+0x50>)
 80007fe:	4a10      	ldr	r2, [pc, #64]	; (8000840 <_sbrk+0x54>)
 8000800:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <_sbrk+0x50>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <_sbrk+0x50>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4413      	add	r3, r2
 8000810:	466a      	mov	r2, sp
 8000812:	4293      	cmp	r3, r2
 8000814:	d907      	bls.n	8000826 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000816:	f001 fe43 	bl	80024a0 <__errno>
 800081a:	4602      	mov	r2, r0
 800081c:	230c      	movs	r3, #12
 800081e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000820:	f04f 33ff 	mov.w	r3, #4294967295
 8000824:	e006      	b.n	8000834 <_sbrk+0x48>
	}

	heap_end += incr;
 8000826:	4b05      	ldr	r3, [pc, #20]	; (800083c <_sbrk+0x50>)
 8000828:	681a      	ldr	r2, [r3, #0]
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	4413      	add	r3, r2
 800082e:	4a03      	ldr	r2, [pc, #12]	; (800083c <_sbrk+0x50>)
 8000830:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000832:	68fb      	ldr	r3, [r7, #12]
}
 8000834:	4618      	mov	r0, r3
 8000836:	3710      	adds	r7, #16
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	200001fc 	.word	0x200001fc
 8000840:	20000640 	.word	0x20000640

08000844 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000848:	4b15      	ldr	r3, [pc, #84]	; (80008a0 <SystemInit+0x5c>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a14      	ldr	r2, [pc, #80]	; (80008a0 <SystemInit+0x5c>)
 800084e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000852:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000854:	4b12      	ldr	r3, [pc, #72]	; (80008a0 <SystemInit+0x5c>)
 8000856:	689a      	ldr	r2, [r3, #8]
 8000858:	4911      	ldr	r1, [pc, #68]	; (80008a0 <SystemInit+0x5c>)
 800085a:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <SystemInit+0x60>)
 800085c:	4013      	ands	r3, r2
 800085e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000860:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <SystemInit+0x5c>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <SystemInit+0x5c>)
 8000866:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800086a:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800086e:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000870:	4b0b      	ldr	r3, [pc, #44]	; (80008a0 <SystemInit+0x5c>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a0a      	ldr	r2, [pc, #40]	; (80008a0 <SystemInit+0x5c>)
 8000876:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800087a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <SystemInit+0x5c>)
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <SystemInit+0x5c>)
 8000882:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000886:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000888:	4b05      	ldr	r3, [pc, #20]	; (80008a0 <SystemInit+0x5c>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800088e:	4b06      	ldr	r3, [pc, #24]	; (80008a8 <SystemInit+0x64>)
 8000890:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000894:	609a      	str	r2, [r3, #8]
#endif
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	bc80      	pop	{r7}
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800
 80008a4:	88ffc00c 	.word	0x88ffc00c
 80008a8:	e000ed00 	.word	0xe000ed00

080008ac <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <MX_USART1_UART_Init+0x50>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_USART1_UART_Init+0x4c>)
 80008e4:	f001 f946 	bl	8001b74 <HAL_UART_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80008ee:	f7ff fe35 	bl	800055c <Error_Handler>
  }

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200005f8 	.word	0x200005f8
 80008fc:	40013800 	.word	0x40013800

08000900 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2200      	movs	r2, #0
 800090e:	601a      	str	r2, [r3, #0]
 8000910:	605a      	str	r2, [r3, #4]
 8000912:	609a      	str	r2, [r3, #8]
 8000914:	60da      	str	r2, [r3, #12]
 8000916:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a1b      	ldr	r2, [pc, #108]	; (800098c <HAL_UART_MspInit+0x8c>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d130      	bne.n	8000984 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000922:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <HAL_UART_MspInit+0x90>)
 8000924:	6a1b      	ldr	r3, [r3, #32]
 8000926:	4a1a      	ldr	r2, [pc, #104]	; (8000990 <HAL_UART_MspInit+0x90>)
 8000928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092c:	6213      	str	r3, [r2, #32]
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <HAL_UART_MspInit+0x90>)
 8000930:	6a1b      	ldr	r3, [r3, #32]
 8000932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000936:	613b      	str	r3, [r7, #16]
 8000938:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <HAL_UART_MspInit+0x90>)
 800093c:	69db      	ldr	r3, [r3, #28]
 800093e:	4a14      	ldr	r2, [pc, #80]	; (8000990 <HAL_UART_MspInit+0x90>)
 8000940:	f043 0301 	orr.w	r3, r3, #1
 8000944:	61d3      	str	r3, [r2, #28]
 8000946:	4b12      	ldr	r3, [pc, #72]	; (8000990 <HAL_UART_MspInit+0x90>)
 8000948:	69db      	ldr	r3, [r3, #28]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000952:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000956:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000958:	2302      	movs	r3, #2
 800095a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000960:	2303      	movs	r3, #3
 8000962:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000964:	2307      	movs	r3, #7
 8000966:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000968:	f107 0314 	add.w	r3, r7, #20
 800096c:	4619      	mov	r1, r3
 800096e:	4809      	ldr	r0, [pc, #36]	; (8000994 <HAL_UART_MspInit+0x94>)
 8000970:	f000 f9f4 	bl	8000d5c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000974:	2200      	movs	r2, #0
 8000976:	2100      	movs	r1, #0
 8000978:	2025      	movs	r0, #37	; 0x25
 800097a:	f000 f978 	bl	8000c6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800097e:	2025      	movs	r0, #37	; 0x25
 8000980:	f000 f991 	bl	8000ca6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000984:	bf00      	nop
 8000986:	3728      	adds	r7, #40	; 0x28
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}
 800098c:	40013800 	.word	0x40013800
 8000990:	40023800 	.word	0x40023800
 8000994:	40020000 	.word	0x40020000

08000998 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000998:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800099a:	e003      	b.n	80009a4 <LoopCopyDataInit>

0800099c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800099c:	4b0b      	ldr	r3, [pc, #44]	; (80009cc <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800099e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80009a0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80009a2:	3104      	adds	r1, #4

080009a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80009a4:	480a      	ldr	r0, [pc, #40]	; (80009d0 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80009a8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80009aa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80009ac:	d3f6      	bcc.n	800099c <CopyDataInit>
  ldr r2, =_sbss
 80009ae:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80009b0:	e002      	b.n	80009b8 <LoopFillZerobss>

080009b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80009b2:	2300      	movs	r3, #0
  str r3, [r2], #4
 80009b4:	f842 3b04 	str.w	r3, [r2], #4

080009b8 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <LoopFillZerobss+0x24>)
  cmp r2, r3
 80009ba:	429a      	cmp	r2, r3
  bcc FillZerobss
 80009bc:	d3f9      	bcc.n	80009b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80009be:	f7ff ff41 	bl	8000844 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009c2:	f001 fd73 	bl	80024ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009c6:	f7ff fc49 	bl	800025c <main>
  bx lr
 80009ca:	4770      	bx	lr
  ldr r3, =_sidata
 80009cc:	0800312c 	.word	0x0800312c
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80009d4:	200001e0 	.word	0x200001e0
  ldr r2, =_sbss
 80009d8:	200001e0 	.word	0x200001e0
  ldr r3, = _ebss
 80009dc:	20000640 	.word	0x20000640

080009e0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009e0:	e7fe      	b.n	80009e0 <ADC1_IRQHandler>

080009e2 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009e2:	b580      	push	{r7, lr}
 80009e4:	b082      	sub	sp, #8
 80009e6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009e8:	2300      	movs	r3, #0
 80009ea:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ec:	2003      	movs	r0, #3
 80009ee:	f000 f933 	bl	8000c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009f2:	2000      	movs	r0, #0
 80009f4:	f000 f80e 	bl	8000a14 <HAL_InitTick>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d002      	beq.n	8000a04 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
 8000a00:	71fb      	strb	r3, [r7, #7]
 8000a02:	e001      	b.n	8000a08 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a04:	f7ff fe8e 	bl	8000724 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a08:	79fb      	ldrb	r3, [r7, #7]
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000a20:	4b16      	ldr	r3, [pc, #88]	; (8000a7c <HAL_InitTick+0x68>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d022      	beq.n	8000a6e <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <HAL_InitTick+0x6c>)
 8000a2a:	681a      	ldr	r2, [r3, #0]
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <HAL_InitTick+0x68>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000a34:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f000 f940 	bl	8000cc2 <HAL_SYSTICK_Config>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d10f      	bne.n	8000a68 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b0f      	cmp	r3, #15
 8000a4c:	d809      	bhi.n	8000a62 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	6879      	ldr	r1, [r7, #4]
 8000a52:	f04f 30ff 	mov.w	r0, #4294967295
 8000a56:	f000 f90a 	bl	8000c6e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <HAL_InitTick+0x70>)
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	6013      	str	r3, [r2, #0]
 8000a60:	e007      	b.n	8000a72 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	73fb      	strb	r3, [r7, #15]
 8000a66:	e004      	b.n	8000a72 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	73fb      	strb	r3, [r7, #15]
 8000a6c:	e001      	b.n	8000a72 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a72:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3710      	adds	r7, #16
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	2000000c 	.word	0x2000000c
 8000a80:	20000004 	.word	0x20000004
 8000a84:	20000008 	.word	0x20000008

08000a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <HAL_IncTick+0x1c>)
 8000a8e:	681a      	ldr	r2, [r3, #0]
 8000a90:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <HAL_IncTick+0x20>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4413      	add	r3, r2
 8000a96:	4a03      	ldr	r2, [pc, #12]	; (8000aa4 <HAL_IncTick+0x1c>)
 8000a98:	6013      	str	r3, [r2, #0]
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bc80      	pop	{r7}
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000638 	.word	0x20000638
 8000aa8:	2000000c 	.word	0x2000000c

08000aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab0:	4b02      	ldr	r3, [pc, #8]	; (8000abc <HAL_GetTick+0x10>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	20000638 	.word	0x20000638

08000ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b085      	sub	sp, #20
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	f003 0307 	and.w	r3, r3, #7
 8000ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad0:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000adc:	4013      	ands	r3, r2
 8000ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af2:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <__NVIC_SetPriorityGrouping+0x44>)
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	60d3      	str	r3, [r2, #12]
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	bc80      	pop	{r7}
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b0c:	4b04      	ldr	r3, [pc, #16]	; (8000b20 <__NVIC_GetPriorityGrouping+0x18>)
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	0a1b      	lsrs	r3, r3, #8
 8000b12:	f003 0307 	and.w	r3, r3, #7
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bc80      	pop	{r7}
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	db0b      	blt.n	8000b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b36:	79fb      	ldrb	r3, [r7, #7]
 8000b38:	f003 021f 	and.w	r2, r3, #31
 8000b3c:	4906      	ldr	r1, [pc, #24]	; (8000b58 <__NVIC_EnableIRQ+0x34>)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	095b      	lsrs	r3, r3, #5
 8000b44:	2001      	movs	r0, #1
 8000b46:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr
 8000b58:	e000e100 	.word	0xe000e100

08000b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	6039      	str	r1, [r7, #0]
 8000b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	db0a      	blt.n	8000b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	490c      	ldr	r1, [pc, #48]	; (8000ba8 <__NVIC_SetPriority+0x4c>)
 8000b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b7a:	0112      	lsls	r2, r2, #4
 8000b7c:	b2d2      	uxtb	r2, r2
 8000b7e:	440b      	add	r3, r1
 8000b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b84:	e00a      	b.n	8000b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	b2da      	uxtb	r2, r3
 8000b8a:	4908      	ldr	r1, [pc, #32]	; (8000bac <__NVIC_SetPriority+0x50>)
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	f003 030f 	and.w	r3, r3, #15
 8000b92:	3b04      	subs	r3, #4
 8000b94:	0112      	lsls	r2, r2, #4
 8000b96:	b2d2      	uxtb	r2, r2
 8000b98:	440b      	add	r3, r1
 8000b9a:	761a      	strb	r2, [r3, #24]
}
 8000b9c:	bf00      	nop
 8000b9e:	370c      	adds	r7, #12
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bc80      	pop	{r7}
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000e100 	.word	0xe000e100
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b089      	sub	sp, #36	; 0x24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	60f8      	str	r0, [r7, #12]
 8000bb8:	60b9      	str	r1, [r7, #8]
 8000bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f003 0307 	and.w	r3, r3, #7
 8000bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc4:	69fb      	ldr	r3, [r7, #28]
 8000bc6:	f1c3 0307 	rsb	r3, r3, #7
 8000bca:	2b04      	cmp	r3, #4
 8000bcc:	bf28      	it	cs
 8000bce:	2304      	movcs	r3, #4
 8000bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	3304      	adds	r3, #4
 8000bd6:	2b06      	cmp	r3, #6
 8000bd8:	d902      	bls.n	8000be0 <NVIC_EncodePriority+0x30>
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3b03      	subs	r3, #3
 8000bde:	e000      	b.n	8000be2 <NVIC_EncodePriority+0x32>
 8000be0:	2300      	movs	r3, #0
 8000be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be4:	f04f 32ff 	mov.w	r2, #4294967295
 8000be8:	69bb      	ldr	r3, [r7, #24]
 8000bea:	fa02 f303 	lsl.w	r3, r2, r3
 8000bee:	43da      	mvns	r2, r3
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	401a      	ands	r2, r3
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8000c02:	43d9      	mvns	r1, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	4313      	orrs	r3, r2
         );
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3724      	adds	r7, #36	; 0x24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bc80      	pop	{r7}
 8000c12:	4770      	bx	lr

08000c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	3b01      	subs	r3, #1
 8000c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c24:	d301      	bcc.n	8000c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c26:	2301      	movs	r3, #1
 8000c28:	e00f      	b.n	8000c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <SysTick_Config+0x40>)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c32:	210f      	movs	r1, #15
 8000c34:	f04f 30ff 	mov.w	r0, #4294967295
 8000c38:	f7ff ff90 	bl	8000b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <SysTick_Config+0x40>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c42:	4b04      	ldr	r3, [pc, #16]	; (8000c54 <SysTick_Config+0x40>)
 8000c44:	2207      	movs	r2, #7
 8000c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	e000e010 	.word	0xe000e010

08000c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f7ff ff2d 	bl	8000ac0 <__NVIC_SetPriorityGrouping>
}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	b086      	sub	sp, #24
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	4603      	mov	r3, r0
 8000c76:	60b9      	str	r1, [r7, #8]
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c80:	f7ff ff42 	bl	8000b08 <__NVIC_GetPriorityGrouping>
 8000c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c86:	687a      	ldr	r2, [r7, #4]
 8000c88:	68b9      	ldr	r1, [r7, #8]
 8000c8a:	6978      	ldr	r0, [r7, #20]
 8000c8c:	f7ff ff90 	bl	8000bb0 <NVIC_EncodePriority>
 8000c90:	4602      	mov	r2, r0
 8000c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c96:	4611      	mov	r1, r2
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff5f 	bl	8000b5c <__NVIC_SetPriority>
}
 8000c9e:	bf00      	nop
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}

08000ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	4603      	mov	r3, r0
 8000cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff ff35 	bl	8000b24 <__NVIC_EnableIRQ>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ffa2 	bl	8000c14 <SysTick_Config>
 8000cd0:	4603      	mov	r3, r0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cda:	b580      	push	{r7, lr}
 8000cdc:	b084      	sub	sp, #16
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	d005      	beq.n	8000cfe <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2204      	movs	r2, #4
 8000cf6:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	73fb      	strb	r3, [r7, #15]
 8000cfc:	e029      	b.n	8000d52 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f022 020e 	bic.w	r2, r2, #14
 8000d0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f022 0201 	bic.w	r2, r2, #1
 8000d1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f003 021c 	and.w	r2, r3, #28
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d30:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2201      	movs	r2, #1
 8000d36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d003      	beq.n	8000d52 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	4798      	blx	r3
    }
  }
  return status;
 8000d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000d5c:	b480      	push	{r7}
 8000d5e:	b087      	sub	sp, #28
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000d72:	e14e      	b.n	8001012 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	2101      	movs	r1, #1
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000d80:	4013      	ands	r3, r2
 8000d82:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	f000 8140 	beq.w	800100c <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b02      	cmp	r3, #2
 8000d92:	d003      	beq.n	8000d9c <HAL_GPIO_Init+0x40>
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	2b12      	cmp	r3, #18
 8000d9a:	d123      	bne.n	8000de4 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	08da      	lsrs	r2, r3, #3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	3208      	adds	r2, #8
 8000da4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000da8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000daa:	697b      	ldr	r3, [r7, #20]
 8000dac:	f003 0307 	and.w	r3, r3, #7
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	220f      	movs	r2, #15
 8000db4:	fa02 f303 	lsl.w	r3, r2, r3
 8000db8:	43db      	mvns	r3, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	691a      	ldr	r2, [r3, #16]
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	f003 0307 	and.w	r3, r3, #7
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	08da      	lsrs	r2, r3, #3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	3208      	adds	r2, #8
 8000dde:	6939      	ldr	r1, [r7, #16]
 8000de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f003 0203 	and.w	r2, r3, #3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	693a      	ldr	r2, [r7, #16]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d00b      	beq.n	8000e38 <HAL_GPIO_Init+0xdc>
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b02      	cmp	r3, #2
 8000e26:	d007      	beq.n	8000e38 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000e2c:	2b11      	cmp	r3, #17
 8000e2e:	d003      	beq.n	8000e38 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	2b12      	cmp	r3, #18
 8000e36:	d130      	bne.n	8000e9a <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000e6e:	2201      	movs	r2, #1
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43db      	mvns	r3, r3
 8000e78:	693a      	ldr	r2, [r7, #16]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	091b      	lsrs	r3, r3, #4
 8000e84:	f003 0201 	and.w	r2, r3, #1
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4313      	orrs	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	693a      	ldr	r2, [r7, #16]
 8000e98:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	689a      	ldr	r2, [r3, #8]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f000 809a 	beq.w	800100c <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed8:	4b54      	ldr	r3, [pc, #336]	; (800102c <HAL_GPIO_Init+0x2d0>)
 8000eda:	6a1b      	ldr	r3, [r3, #32]
 8000edc:	4a53      	ldr	r2, [pc, #332]	; (800102c <HAL_GPIO_Init+0x2d0>)
 8000ede:	f043 0301 	orr.w	r3, r3, #1
 8000ee2:	6213      	str	r3, [r2, #32]
 8000ee4:	4b51      	ldr	r3, [pc, #324]	; (800102c <HAL_GPIO_Init+0x2d0>)
 8000ee6:	6a1b      	ldr	r3, [r3, #32]
 8000ee8:	f003 0301 	and.w	r3, r3, #1
 8000eec:	60bb      	str	r3, [r7, #8]
 8000eee:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8000ef0:	4a4f      	ldr	r2, [pc, #316]	; (8001030 <HAL_GPIO_Init+0x2d4>)
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	089b      	lsrs	r3, r3, #2
 8000ef6:	3302      	adds	r3, #2
 8000ef8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000efc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	220f      	movs	r2, #15
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	693a      	ldr	r2, [r7, #16]
 8000f10:	4013      	ands	r3, r2
 8000f12:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	4a47      	ldr	r2, [pc, #284]	; (8001034 <HAL_GPIO_Init+0x2d8>)
 8000f18:	4293      	cmp	r3, r2
 8000f1a:	d013      	beq.n	8000f44 <HAL_GPIO_Init+0x1e8>
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	4a46      	ldr	r2, [pc, #280]	; (8001038 <HAL_GPIO_Init+0x2dc>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d00d      	beq.n	8000f40 <HAL_GPIO_Init+0x1e4>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a45      	ldr	r2, [pc, #276]	; (800103c <HAL_GPIO_Init+0x2e0>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d007      	beq.n	8000f3c <HAL_GPIO_Init+0x1e0>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a44      	ldr	r2, [pc, #272]	; (8001040 <HAL_GPIO_Init+0x2e4>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d101      	bne.n	8000f38 <HAL_GPIO_Init+0x1dc>
 8000f34:	2303      	movs	r3, #3
 8000f36:	e006      	b.n	8000f46 <HAL_GPIO_Init+0x1ea>
 8000f38:	2305      	movs	r3, #5
 8000f3a:	e004      	b.n	8000f46 <HAL_GPIO_Init+0x1ea>
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	e002      	b.n	8000f46 <HAL_GPIO_Init+0x1ea>
 8000f40:	2301      	movs	r3, #1
 8000f42:	e000      	b.n	8000f46 <HAL_GPIO_Init+0x1ea>
 8000f44:	2300      	movs	r3, #0
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	f002 0203 	and.w	r2, r2, #3
 8000f4c:	0092      	lsls	r2, r2, #2
 8000f4e:	4093      	lsls	r3, r2
 8000f50:	693a      	ldr	r2, [r7, #16]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f56:	4936      	ldr	r1, [pc, #216]	; (8001030 <HAL_GPIO_Init+0x2d4>)
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	089b      	lsrs	r3, r3, #2
 8000f5c:	3302      	adds	r3, #2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f64:	4b37      	ldr	r3, [pc, #220]	; (8001044 <HAL_GPIO_Init+0x2e8>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_GPIO_Init+0x22c>
        {
          SET_BIT(temp, iocurrent); 
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000f88:	4a2e      	ldr	r2, [pc, #184]	; (8001044 <HAL_GPIO_Init+0x2e8>)
 8000f8a:	693b      	ldr	r3, [r7, #16]
 8000f8c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000f8e:	4b2d      	ldr	r3, [pc, #180]	; (8001044 <HAL_GPIO_Init+0x2e8>)
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	43db      	mvns	r3, r3
 8000f98:	693a      	ldr	r2, [r7, #16]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <HAL_GPIO_Init+0x256>
        {
          SET_BIT(temp, iocurrent); 
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fb2:	4a24      	ldr	r2, [pc, #144]	; (8001044 <HAL_GPIO_Init+0x2e8>)
 8000fb4:	693b      	ldr	r3, [r7, #16]
 8000fb6:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb8:	4b22      	ldr	r3, [pc, #136]	; (8001044 <HAL_GPIO_Init+0x2e8>)
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	43db      	mvns	r3, r3
 8000fc2:	693a      	ldr	r2, [r7, #16]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d003      	beq.n	8000fdc <HAL_GPIO_Init+0x280>
        {
          SET_BIT(temp, iocurrent); 
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fdc:	4a19      	ldr	r2, [pc, #100]	; (8001044 <HAL_GPIO_Init+0x2e8>)
 8000fde:	693b      	ldr	r3, [r7, #16]
 8000fe0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <HAL_GPIO_Init+0x2e8>)
 8000fe4:	68db      	ldr	r3, [r3, #12]
 8000fe6:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d003      	beq.n	8001006 <HAL_GPIO_Init+0x2aa>
        {
          SET_BIT(temp, iocurrent); 
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001006:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <HAL_GPIO_Init+0x2e8>)
 8001008:	693b      	ldr	r3, [r7, #16]
 800100a:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	3301      	adds	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	fa22 f303 	lsr.w	r3, r2, r3
 800101c:	2b00      	cmp	r3, #0
 800101e:	f47f aea9 	bne.w	8000d74 <HAL_GPIO_Init+0x18>
  } 
}
 8001022:	bf00      	nop
 8001024:	371c      	adds	r7, #28
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr
 800102c:	40023800 	.word	0x40023800
 8001030:	40010000 	.word	0x40010000
 8001034:	40020000 	.word	0x40020000
 8001038:	40020400 	.word	0x40020400
 800103c:	40020800 	.word	0x40020800
 8001040:	40020c00 	.word	0x40020c00
 8001044:	40010400 	.word	0x40010400

08001048 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001048:	b480      	push	{r7}
 800104a:	b085      	sub	sp, #20
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	460b      	mov	r3, r1
 8001052:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	691a      	ldr	r2, [r3, #16]
 8001058:	887b      	ldrh	r3, [r7, #2]
 800105a:	4013      	ands	r3, r2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d002      	beq.n	8001066 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001060:	2301      	movs	r3, #1
 8001062:	73fb      	strb	r3, [r7, #15]
 8001064:	e001      	b.n	800106a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001066:	2300      	movs	r3, #0
 8001068:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800106a:	7bfb      	ldrb	r3, [r7, #15]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr

08001076 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	460b      	mov	r3, r1
 8001080:	807b      	strh	r3, [r7, #2]
 8001082:	4613      	mov	r3, r2
 8001084:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001086:	787b      	ldrb	r3, [r7, #1]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800108c:	887a      	ldrh	r2, [r7, #2]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8001092:	e003      	b.n	800109c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001094:	887b      	ldrh	r3, [r7, #2]
 8001096:	041a      	lsls	r2, r3, #16
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	619a      	str	r2, [r3, #24]
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bc80      	pop	{r7}
 80010a4:	4770      	bx	lr

080010a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices 
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010a6:	b480      	push	{r7}
 80010a8:	b083      	sub	sp, #12
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
 80010ae:	460b      	mov	r3, r1
 80010b0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	695a      	ldr	r2, [r3, #20]
 80010b6:	887b      	ldrh	r3, [r7, #2]
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d004      	beq.n	80010c8 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80010be:	887b      	ldrh	r3, [r7, #2]
 80010c0:	041a      	lsls	r2, r3, #16
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80010c6:	e002      	b.n	80010ce <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010c8:	887a      	ldrh	r2, [r7, #2]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	619a      	str	r2, [r3, #24]
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bc80      	pop	{r7}
 80010d6:	4770      	bx	lr

080010d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d101      	bne.n	80010ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e31d      	b.n	8001726 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80010ea:	4b94      	ldr	r3, [pc, #592]	; (800133c <HAL_RCC_OscConfig+0x264>)
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 030c 	and.w	r3, r3, #12
 80010f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80010f4:	4b91      	ldr	r3, [pc, #580]	; (800133c <HAL_RCC_OscConfig+0x264>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010fc:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	2b00      	cmp	r3, #0
 8001108:	d07b      	beq.n	8001202 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	2b08      	cmp	r3, #8
 800110e:	d006      	beq.n	800111e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001110:	69bb      	ldr	r3, [r7, #24]
 8001112:	2b0c      	cmp	r3, #12
 8001114:	d10f      	bne.n	8001136 <HAL_RCC_OscConfig+0x5e>
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800111c:	d10b      	bne.n	8001136 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800111e:	4b87      	ldr	r3, [pc, #540]	; (800133c <HAL_RCC_OscConfig+0x264>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001126:	2b00      	cmp	r3, #0
 8001128:	d06a      	beq.n	8001200 <HAL_RCC_OscConfig+0x128>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d166      	bne.n	8001200 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e2f7      	b.n	8001726 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b01      	cmp	r3, #1
 800113c:	d106      	bne.n	800114c <HAL_RCC_OscConfig+0x74>
 800113e:	4b7f      	ldr	r3, [pc, #508]	; (800133c <HAL_RCC_OscConfig+0x264>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a7e      	ldr	r2, [pc, #504]	; (800133c <HAL_RCC_OscConfig+0x264>)
 8001144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e02d      	b.n	80011a8 <HAL_RCC_OscConfig+0xd0>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	2b00      	cmp	r3, #0
 8001152:	d10c      	bne.n	800116e <HAL_RCC_OscConfig+0x96>
 8001154:	4b79      	ldr	r3, [pc, #484]	; (800133c <HAL_RCC_OscConfig+0x264>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a78      	ldr	r2, [pc, #480]	; (800133c <HAL_RCC_OscConfig+0x264>)
 800115a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800115e:	6013      	str	r3, [r2, #0]
 8001160:	4b76      	ldr	r3, [pc, #472]	; (800133c <HAL_RCC_OscConfig+0x264>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a75      	ldr	r2, [pc, #468]	; (800133c <HAL_RCC_OscConfig+0x264>)
 8001166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800116a:	6013      	str	r3, [r2, #0]
 800116c:	e01c      	b.n	80011a8 <HAL_RCC_OscConfig+0xd0>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b05      	cmp	r3, #5
 8001174:	d10c      	bne.n	8001190 <HAL_RCC_OscConfig+0xb8>
 8001176:	4b71      	ldr	r3, [pc, #452]	; (800133c <HAL_RCC_OscConfig+0x264>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a70      	ldr	r2, [pc, #448]	; (800133c <HAL_RCC_OscConfig+0x264>)
 800117c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001180:	6013      	str	r3, [r2, #0]
 8001182:	4b6e      	ldr	r3, [pc, #440]	; (800133c <HAL_RCC_OscConfig+0x264>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a6d      	ldr	r2, [pc, #436]	; (800133c <HAL_RCC_OscConfig+0x264>)
 8001188:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800118c:	6013      	str	r3, [r2, #0]
 800118e:	e00b      	b.n	80011a8 <HAL_RCC_OscConfig+0xd0>
 8001190:	4b6a      	ldr	r3, [pc, #424]	; (800133c <HAL_RCC_OscConfig+0x264>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a69      	ldr	r2, [pc, #420]	; (800133c <HAL_RCC_OscConfig+0x264>)
 8001196:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800119a:	6013      	str	r3, [r2, #0]
 800119c:	4b67      	ldr	r3, [pc, #412]	; (800133c <HAL_RCC_OscConfig+0x264>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a66      	ldr	r2, [pc, #408]	; (800133c <HAL_RCC_OscConfig+0x264>)
 80011a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d013      	beq.n	80011d8 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fc7c 	bl	8000aac <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011b8:	f7ff fc78 	bl	8000aac <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b64      	cmp	r3, #100	; 0x64
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e2ad      	b.n	8001726 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80011ca:	4b5c      	ldr	r3, [pc, #368]	; (800133c <HAL_RCC_OscConfig+0x264>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f0      	beq.n	80011b8 <HAL_RCC_OscConfig+0xe0>
 80011d6:	e014      	b.n	8001202 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d8:	f7ff fc68 	bl	8000aac <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011e0:	f7ff fc64 	bl	8000aac <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b64      	cmp	r3, #100	; 0x64
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e299      	b.n	8001726 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80011f2:	4b52      	ldr	r3, [pc, #328]	; (800133c <HAL_RCC_OscConfig+0x264>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d1f0      	bne.n	80011e0 <HAL_RCC_OscConfig+0x108>
 80011fe:	e000      	b.n	8001202 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001200:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f003 0302 	and.w	r3, r3, #2
 800120a:	2b00      	cmp	r3, #0
 800120c:	d05a      	beq.n	80012c4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	2b04      	cmp	r3, #4
 8001212:	d005      	beq.n	8001220 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	2b0c      	cmp	r3, #12
 8001218:	d119      	bne.n	800124e <HAL_RCC_OscConfig+0x176>
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d116      	bne.n	800124e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001220:	4b46      	ldr	r3, [pc, #280]	; (800133c <HAL_RCC_OscConfig+0x264>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f003 0302 	and.w	r3, r3, #2
 8001228:	2b00      	cmp	r3, #0
 800122a:	d005      	beq.n	8001238 <HAL_RCC_OscConfig+0x160>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d001      	beq.n	8001238 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e276      	b.n	8001726 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001238:	4b40      	ldr	r3, [pc, #256]	; (800133c <HAL_RCC_OscConfig+0x264>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	691b      	ldr	r3, [r3, #16]
 8001244:	021b      	lsls	r3, r3, #8
 8001246:	493d      	ldr	r1, [pc, #244]	; (800133c <HAL_RCC_OscConfig+0x264>)
 8001248:	4313      	orrs	r3, r2
 800124a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124c:	e03a      	b.n	80012c4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	68db      	ldr	r3, [r3, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d020      	beq.n	8001298 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001256:	4b3a      	ldr	r3, [pc, #232]	; (8001340 <HAL_RCC_OscConfig+0x268>)
 8001258:	2201      	movs	r2, #1
 800125a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800125c:	f7ff fc26 	bl	8000aac <HAL_GetTick>
 8001260:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001262:	e008      	b.n	8001276 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001264:	f7ff fc22 	bl	8000aac <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d901      	bls.n	8001276 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001272:	2303      	movs	r3, #3
 8001274:	e257      	b.n	8001726 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001276:	4b31      	ldr	r3, [pc, #196]	; (800133c <HAL_RCC_OscConfig+0x264>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0302 	and.w	r3, r3, #2
 800127e:	2b00      	cmp	r3, #0
 8001280:	d0f0      	beq.n	8001264 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001282:	4b2e      	ldr	r3, [pc, #184]	; (800133c <HAL_RCC_OscConfig+0x264>)
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	492a      	ldr	r1, [pc, #168]	; (800133c <HAL_RCC_OscConfig+0x264>)
 8001292:	4313      	orrs	r3, r2
 8001294:	604b      	str	r3, [r1, #4]
 8001296:	e015      	b.n	80012c4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001298:	4b29      	ldr	r3, [pc, #164]	; (8001340 <HAL_RCC_OscConfig+0x268>)
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129e:	f7ff fc05 	bl	8000aac <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a6:	f7ff fc01 	bl	8000aac <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e236      	b.n	8001726 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80012b8:	4b20      	ldr	r3, [pc, #128]	; (800133c <HAL_RCC_OscConfig+0x264>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1f0      	bne.n	80012a6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0310 	and.w	r3, r3, #16
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 80b8 	beq.w	8001442 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d170      	bne.n	80013ba <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012d8:	4b18      	ldr	r3, [pc, #96]	; (800133c <HAL_RCC_OscConfig+0x264>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d005      	beq.n	80012f0 <HAL_RCC_OscConfig+0x218>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e21a      	b.n	8001726 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	6a1a      	ldr	r2, [r3, #32]
 80012f4:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_RCC_OscConfig+0x264>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d921      	bls.n	8001344 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1b      	ldr	r3, [r3, #32]
 8001304:	4618      	mov	r0, r3
 8001306:	f000 fbd5 	bl	8001ab4 <RCC_SetFlashLatencyFromMSIRange>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8001310:	2301      	movs	r3, #1
 8001312:	e208      	b.n	8001726 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <HAL_RCC_OscConfig+0x264>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	6a1b      	ldr	r3, [r3, #32]
 8001320:	4906      	ldr	r1, [pc, #24]	; (800133c <HAL_RCC_OscConfig+0x264>)
 8001322:	4313      	orrs	r3, r2
 8001324:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <HAL_RCC_OscConfig+0x264>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	69db      	ldr	r3, [r3, #28]
 8001332:	061b      	lsls	r3, r3, #24
 8001334:	4901      	ldr	r1, [pc, #4]	; (800133c <HAL_RCC_OscConfig+0x264>)
 8001336:	4313      	orrs	r3, r2
 8001338:	604b      	str	r3, [r1, #4]
 800133a:	e020      	b.n	800137e <HAL_RCC_OscConfig+0x2a6>
 800133c:	40023800 	.word	0x40023800
 8001340:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001344:	4ba4      	ldr	r3, [pc, #656]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a1b      	ldr	r3, [r3, #32]
 8001350:	49a1      	ldr	r1, [pc, #644]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 8001352:	4313      	orrs	r3, r2
 8001354:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001356:	4ba0      	ldr	r3, [pc, #640]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	061b      	lsls	r3, r3, #24
 8001364:	499c      	ldr	r1, [pc, #624]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 8001366:	4313      	orrs	r3, r2
 8001368:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4618      	mov	r0, r3
 8001370:	f000 fba0 	bl	8001ab4 <RCC_SetFlashLatencyFromMSIRange>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e1d3      	b.n	8001726 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	0b5b      	lsrs	r3, r3, #13
 8001384:	3301      	adds	r3, #1
 8001386:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800138e:	4a92      	ldr	r2, [pc, #584]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 8001390:	6892      	ldr	r2, [r2, #8]
 8001392:	0912      	lsrs	r2, r2, #4
 8001394:	f002 020f 	and.w	r2, r2, #15
 8001398:	4990      	ldr	r1, [pc, #576]	; (80015dc <HAL_RCC_OscConfig+0x504>)
 800139a:	5c8a      	ldrb	r2, [r1, r2]
 800139c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800139e:	4a90      	ldr	r2, [pc, #576]	; (80015e0 <HAL_RCC_OscConfig+0x508>)
 80013a0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013a2:	4b90      	ldr	r3, [pc, #576]	; (80015e4 <HAL_RCC_OscConfig+0x50c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff fb34 	bl	8000a14 <HAL_InitTick>
 80013ac:	4603      	mov	r3, r0
 80013ae:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013b0:	7bfb      	ldrb	r3, [r7, #15]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d045      	beq.n	8001442 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
 80013b8:	e1b5      	b.n	8001726 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d029      	beq.n	8001416 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013c2:	4b89      	ldr	r3, [pc, #548]	; (80015e8 <HAL_RCC_OscConfig+0x510>)
 80013c4:	2201      	movs	r2, #1
 80013c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c8:	f7ff fb70 	bl	8000aac <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013d0:	f7ff fb6c 	bl	8000aac <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e1a1      	b.n	8001726 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80013e2:	4b7d      	ldr	r3, [pc, #500]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d0f0      	beq.n	80013d0 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ee:	4b7a      	ldr	r3, [pc, #488]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6a1b      	ldr	r3, [r3, #32]
 80013fa:	4977      	ldr	r1, [pc, #476]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 80013fc:	4313      	orrs	r3, r2
 80013fe:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001400:	4b75      	ldr	r3, [pc, #468]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	69db      	ldr	r3, [r3, #28]
 800140c:	061b      	lsls	r3, r3, #24
 800140e:	4972      	ldr	r1, [pc, #456]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 8001410:	4313      	orrs	r3, r2
 8001412:	604b      	str	r3, [r1, #4]
 8001414:	e015      	b.n	8001442 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001416:	4b74      	ldr	r3, [pc, #464]	; (80015e8 <HAL_RCC_OscConfig+0x510>)
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141c:	f7ff fb46 	bl	8000aac <HAL_GetTick>
 8001420:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001422:	e008      	b.n	8001436 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001424:	f7ff fb42 	bl	8000aac <HAL_GetTick>
 8001428:	4602      	mov	r2, r0
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	2b02      	cmp	r3, #2
 8001430:	d901      	bls.n	8001436 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8001432:	2303      	movs	r3, #3
 8001434:	e177      	b.n	8001726 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001436:	4b68      	ldr	r3, [pc, #416]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800143e:	2b00      	cmp	r3, #0
 8001440:	d1f0      	bne.n	8001424 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	2b00      	cmp	r3, #0
 800144c:	d030      	beq.n	80014b0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	695b      	ldr	r3, [r3, #20]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d016      	beq.n	8001484 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001456:	4b65      	ldr	r3, [pc, #404]	; (80015ec <HAL_RCC_OscConfig+0x514>)
 8001458:	2201      	movs	r2, #1
 800145a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800145c:	f7ff fb26 	bl	8000aac <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001464:	f7ff fb22 	bl	8000aac <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e157      	b.n	8001726 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001476:	4b58      	ldr	r3, [pc, #352]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 8001478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0x38c>
 8001482:	e015      	b.n	80014b0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001484:	4b59      	ldr	r3, [pc, #356]	; (80015ec <HAL_RCC_OscConfig+0x514>)
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800148a:	f7ff fb0f 	bl	8000aac <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001492:	f7ff fb0b 	bl	8000aac <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b02      	cmp	r3, #2
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e140      	b.n	8001726 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80014a4:	4b4c      	ldr	r3, [pc, #304]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 80014a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a8:	f003 0302 	and.w	r3, r3, #2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d1f0      	bne.n	8001492 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0304 	and.w	r3, r3, #4
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 80b5 	beq.w	8001628 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014be:	2300      	movs	r3, #0
 80014c0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014c2:	4b45      	ldr	r3, [pc, #276]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10d      	bne.n	80014ea <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ce:	4b42      	ldr	r3, [pc, #264]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	4a41      	ldr	r2, [pc, #260]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 80014d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014d8:	6253      	str	r3, [r2, #36]	; 0x24
 80014da:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e2:	60bb      	str	r3, [r7, #8]
 80014e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014e6:	2301      	movs	r3, #1
 80014e8:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ea:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <HAL_RCC_OscConfig+0x518>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d118      	bne.n	8001528 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014f6:	4b3e      	ldr	r3, [pc, #248]	; (80015f0 <HAL_RCC_OscConfig+0x518>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a3d      	ldr	r2, [pc, #244]	; (80015f0 <HAL_RCC_OscConfig+0x518>)
 80014fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001500:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001502:	f7ff fad3 	bl	8000aac <HAL_GetTick>
 8001506:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001508:	e008      	b.n	800151c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800150a:	f7ff facf 	bl	8000aac <HAL_GetTick>
 800150e:	4602      	mov	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	2b64      	cmp	r3, #100	; 0x64
 8001516:	d901      	bls.n	800151c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e104      	b.n	8001726 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800151c:	4b34      	ldr	r3, [pc, #208]	; (80015f0 <HAL_RCC_OscConfig+0x518>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001524:	2b00      	cmp	r3, #0
 8001526:	d0f0      	beq.n	800150a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	2b01      	cmp	r3, #1
 800152e:	d106      	bne.n	800153e <HAL_RCC_OscConfig+0x466>
 8001530:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 8001532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001534:	4a28      	ldr	r2, [pc, #160]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 8001536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153a:	6353      	str	r3, [r2, #52]	; 0x34
 800153c:	e02d      	b.n	800159a <HAL_RCC_OscConfig+0x4c2>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10c      	bne.n	8001560 <HAL_RCC_OscConfig+0x488>
 8001546:	4b24      	ldr	r3, [pc, #144]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 8001548:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800154a:	4a23      	ldr	r2, [pc, #140]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 800154c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001550:	6353      	str	r3, [r2, #52]	; 0x34
 8001552:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 8001554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001556:	4a20      	ldr	r2, [pc, #128]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 8001558:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800155c:	6353      	str	r3, [r2, #52]	; 0x34
 800155e:	e01c      	b.n	800159a <HAL_RCC_OscConfig+0x4c2>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	2b05      	cmp	r3, #5
 8001566:	d10c      	bne.n	8001582 <HAL_RCC_OscConfig+0x4aa>
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 800156a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800156c:	4a1a      	ldr	r2, [pc, #104]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 800156e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001572:	6353      	str	r3, [r2, #52]	; 0x34
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 8001576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001578:	4a17      	ldr	r2, [pc, #92]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 800157a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157e:	6353      	str	r3, [r2, #52]	; 0x34
 8001580:	e00b      	b.n	800159a <HAL_RCC_OscConfig+0x4c2>
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 8001584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001586:	4a14      	ldr	r2, [pc, #80]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 8001588:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800158c:	6353      	str	r3, [r2, #52]	; 0x34
 800158e:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 8001590:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001592:	4a11      	ldr	r2, [pc, #68]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 8001594:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001598:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d015      	beq.n	80015ce <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015a2:	f7ff fa83 	bl	8000aac <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015a8:	e00a      	b.n	80015c0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015aa:	f7ff fa7f 	bl	8000aac <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e0b2      	b.n	8001726 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80015c0:	4b05      	ldr	r3, [pc, #20]	; (80015d8 <HAL_RCC_OscConfig+0x500>)
 80015c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d0ee      	beq.n	80015aa <HAL_RCC_OscConfig+0x4d2>
 80015cc:	e023      	b.n	8001616 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ce:	f7ff fa6d 	bl	8000aac <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80015d4:	e019      	b.n	800160a <HAL_RCC_OscConfig+0x532>
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800
 80015dc:	08002fcc 	.word	0x08002fcc
 80015e0:	20000004 	.word	0x20000004
 80015e4:	20000008 	.word	0x20000008
 80015e8:	42470020 	.word	0x42470020
 80015ec:	42470680 	.word	0x42470680
 80015f0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f4:	f7ff fa5a 	bl	8000aac <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001602:	4293      	cmp	r3, r2
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e08d      	b.n	8001726 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800160a:	4b49      	ldr	r3, [pc, #292]	; (8001730 <HAL_RCC_OscConfig+0x658>)
 800160c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800160e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1ee      	bne.n	80015f4 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001616:	7ffb      	ldrb	r3, [r7, #31]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d105      	bne.n	8001628 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800161c:	4b44      	ldr	r3, [pc, #272]	; (8001730 <HAL_RCC_OscConfig+0x658>)
 800161e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001620:	4a43      	ldr	r2, [pc, #268]	; (8001730 <HAL_RCC_OscConfig+0x658>)
 8001622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001626:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162c:	2b00      	cmp	r3, #0
 800162e:	d079      	beq.n	8001724 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	2b0c      	cmp	r3, #12
 8001634:	d056      	beq.n	80016e4 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163a:	2b02      	cmp	r3, #2
 800163c:	d13b      	bne.n	80016b6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800163e:	4b3d      	ldr	r3, [pc, #244]	; (8001734 <HAL_RCC_OscConfig+0x65c>)
 8001640:	2200      	movs	r2, #0
 8001642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001644:	f7ff fa32 	bl	8000aac <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800164c:	f7ff fa2e 	bl	8000aac <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e063      	b.n	8001726 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800165e:	4b34      	ldr	r3, [pc, #208]	; (8001730 <HAL_RCC_OscConfig+0x658>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f0      	bne.n	800164c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800166a:	4b31      	ldr	r3, [pc, #196]	; (8001730 <HAL_RCC_OscConfig+0x658>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167a:	4319      	orrs	r1, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001680:	430b      	orrs	r3, r1
 8001682:	492b      	ldr	r1, [pc, #172]	; (8001730 <HAL_RCC_OscConfig+0x658>)
 8001684:	4313      	orrs	r3, r2
 8001686:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001688:	4b2a      	ldr	r3, [pc, #168]	; (8001734 <HAL_RCC_OscConfig+0x65c>)
 800168a:	2201      	movs	r2, #1
 800168c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168e:	f7ff fa0d 	bl	8000aac <HAL_GetTick>
 8001692:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001694:	e008      	b.n	80016a8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001696:	f7ff fa09 	bl	8000aac <HAL_GetTick>
 800169a:	4602      	mov	r2, r0
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	1ad3      	subs	r3, r2, r3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d901      	bls.n	80016a8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 80016a4:	2303      	movs	r3, #3
 80016a6:	e03e      	b.n	8001726 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80016a8:	4b21      	ldr	r3, [pc, #132]	; (8001730 <HAL_RCC_OscConfig+0x658>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d0f0      	beq.n	8001696 <HAL_RCC_OscConfig+0x5be>
 80016b4:	e036      	b.n	8001724 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016b6:	4b1f      	ldr	r3, [pc, #124]	; (8001734 <HAL_RCC_OscConfig+0x65c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016bc:	f7ff f9f6 	bl	8000aac <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016c4:	f7ff f9f2 	bl	8000aac <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e027      	b.n	8001726 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80016d6:	4b16      	ldr	r3, [pc, #88]	; (8001730 <HAL_RCC_OscConfig+0x658>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1f0      	bne.n	80016c4 <HAL_RCC_OscConfig+0x5ec>
 80016e2:	e01f      	b.n	8001724 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e01a      	b.n	8001726 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80016f0:	4b0f      	ldr	r3, [pc, #60]	; (8001730 <HAL_RCC_OscConfig+0x658>)
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	429a      	cmp	r2, r3
 8001702:	d10d      	bne.n	8001720 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800170e:	429a      	cmp	r2, r3
 8001710:	d106      	bne.n	8001720 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d001      	beq.n	8001724 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3720      	adds	r7, #32
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800
 8001734:	42470060 	.word	0x42470060

08001738 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d101      	bne.n	800174c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001748:	2301      	movs	r3, #1
 800174a:	e11a      	b.n	8001982 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800174c:	4b8f      	ldr	r3, [pc, #572]	; (800198c <HAL_RCC_ClockConfig+0x254>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0301 	and.w	r3, r3, #1
 8001754:	683a      	ldr	r2, [r7, #0]
 8001756:	429a      	cmp	r2, r3
 8001758:	d919      	bls.n	800178e <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d105      	bne.n	800176c <HAL_RCC_ClockConfig+0x34>
 8001760:	4b8a      	ldr	r3, [pc, #552]	; (800198c <HAL_RCC_ClockConfig+0x254>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a89      	ldr	r2, [pc, #548]	; (800198c <HAL_RCC_ClockConfig+0x254>)
 8001766:	f043 0304 	orr.w	r3, r3, #4
 800176a:	6013      	str	r3, [r2, #0]
 800176c:	4b87      	ldr	r3, [pc, #540]	; (800198c <HAL_RCC_ClockConfig+0x254>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f023 0201 	bic.w	r2, r3, #1
 8001774:	4985      	ldr	r1, [pc, #532]	; (800198c <HAL_RCC_ClockConfig+0x254>)
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	4313      	orrs	r3, r2
 800177a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800177c:	4b83      	ldr	r3, [pc, #524]	; (800198c <HAL_RCC_ClockConfig+0x254>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0301 	and.w	r3, r3, #1
 8001784:	683a      	ldr	r2, [r7, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d001      	beq.n	800178e <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e0f9      	b.n	8001982 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d008      	beq.n	80017ac <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800179a:	4b7d      	ldr	r3, [pc, #500]	; (8001990 <HAL_RCC_ClockConfig+0x258>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	497a      	ldr	r1, [pc, #488]	; (8001990 <HAL_RCC_ClockConfig+0x258>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f003 0301 	and.w	r3, r3, #1
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 808e 	beq.w	80018d6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d107      	bne.n	80017d2 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80017c2:	4b73      	ldr	r3, [pc, #460]	; (8001990 <HAL_RCC_ClockConfig+0x258>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d121      	bne.n	8001812 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e0d7      	b.n	8001982 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d107      	bne.n	80017ea <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80017da:	4b6d      	ldr	r3, [pc, #436]	; (8001990 <HAL_RCC_ClockConfig+0x258>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d115      	bne.n	8001812 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e0cb      	b.n	8001982 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d107      	bne.n	8001802 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017f2:	4b67      	ldr	r3, [pc, #412]	; (8001990 <HAL_RCC_ClockConfig+0x258>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d109      	bne.n	8001812 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e0bf      	b.n	8001982 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001802:	4b63      	ldr	r3, [pc, #396]	; (8001990 <HAL_RCC_ClockConfig+0x258>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e0b7      	b.n	8001982 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001812:	4b5f      	ldr	r3, [pc, #380]	; (8001990 <HAL_RCC_ClockConfig+0x258>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f023 0203 	bic.w	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	495c      	ldr	r1, [pc, #368]	; (8001990 <HAL_RCC_ClockConfig+0x258>)
 8001820:	4313      	orrs	r3, r2
 8001822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001824:	f7ff f942 	bl	8000aac <HAL_GetTick>
 8001828:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	2b02      	cmp	r3, #2
 8001830:	d112      	bne.n	8001858 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001832:	e00a      	b.n	800184a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001834:	f7ff f93a 	bl	8000aac <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e09b      	b.n	8001982 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800184a:	4b51      	ldr	r3, [pc, #324]	; (8001990 <HAL_RCC_ClockConfig+0x258>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f003 030c 	and.w	r3, r3, #12
 8001852:	2b08      	cmp	r3, #8
 8001854:	d1ee      	bne.n	8001834 <HAL_RCC_ClockConfig+0xfc>
 8001856:	e03e      	b.n	80018d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	2b03      	cmp	r3, #3
 800185e:	d112      	bne.n	8001886 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001860:	e00a      	b.n	8001878 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001862:	f7ff f923 	bl	8000aac <HAL_GetTick>
 8001866:	4602      	mov	r2, r0
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	1ad3      	subs	r3, r2, r3
 800186c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001870:	4293      	cmp	r3, r2
 8001872:	d901      	bls.n	8001878 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001874:	2303      	movs	r3, #3
 8001876:	e084      	b.n	8001982 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001878:	4b45      	ldr	r3, [pc, #276]	; (8001990 <HAL_RCC_ClockConfig+0x258>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	2b0c      	cmp	r3, #12
 8001882:	d1ee      	bne.n	8001862 <HAL_RCC_ClockConfig+0x12a>
 8001884:	e027      	b.n	80018d6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b01      	cmp	r3, #1
 800188c:	d11d      	bne.n	80018ca <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800188e:	e00a      	b.n	80018a6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001890:	f7ff f90c 	bl	8000aac <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	f241 3288 	movw	r2, #5000	; 0x1388
 800189e:	4293      	cmp	r3, r2
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e06d      	b.n	8001982 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80018a6:	4b3a      	ldr	r3, [pc, #232]	; (8001990 <HAL_RCC_ClockConfig+0x258>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 030c 	and.w	r3, r3, #12
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	d1ee      	bne.n	8001890 <HAL_RCC_ClockConfig+0x158>
 80018b2:	e010      	b.n	80018d6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018b4:	f7ff f8fa 	bl	8000aac <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d901      	bls.n	80018ca <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80018c6:	2303      	movs	r3, #3
 80018c8:	e05b      	b.n	8001982 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80018ca:	4b31      	ldr	r3, [pc, #196]	; (8001990 <HAL_RCC_ClockConfig+0x258>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1ee      	bne.n	80018b4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018d6:	4b2d      	ldr	r3, [pc, #180]	; (800198c <HAL_RCC_ClockConfig+0x254>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d219      	bcs.n	8001918 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d105      	bne.n	80018f6 <HAL_RCC_ClockConfig+0x1be>
 80018ea:	4b28      	ldr	r3, [pc, #160]	; (800198c <HAL_RCC_ClockConfig+0x254>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a27      	ldr	r2, [pc, #156]	; (800198c <HAL_RCC_ClockConfig+0x254>)
 80018f0:	f043 0304 	orr.w	r3, r3, #4
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	4b25      	ldr	r3, [pc, #148]	; (800198c <HAL_RCC_ClockConfig+0x254>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f023 0201 	bic.w	r2, r3, #1
 80018fe:	4923      	ldr	r1, [pc, #140]	; (800198c <HAL_RCC_ClockConfig+0x254>)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	4313      	orrs	r3, r2
 8001904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001906:	4b21      	ldr	r3, [pc, #132]	; (800198c <HAL_RCC_ClockConfig+0x254>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	683a      	ldr	r2, [r7, #0]
 8001910:	429a      	cmp	r2, r3
 8001912:	d001      	beq.n	8001918 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e034      	b.n	8001982 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	2b00      	cmp	r3, #0
 8001922:	d008      	beq.n	8001936 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001924:	4b1a      	ldr	r3, [pc, #104]	; (8001990 <HAL_RCC_ClockConfig+0x258>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	68db      	ldr	r3, [r3, #12]
 8001930:	4917      	ldr	r1, [pc, #92]	; (8001990 <HAL_RCC_ClockConfig+0x258>)
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	2b00      	cmp	r3, #0
 8001940:	d009      	beq.n	8001956 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001942:	4b13      	ldr	r3, [pc, #76]	; (8001990 <HAL_RCC_ClockConfig+0x258>)
 8001944:	689b      	ldr	r3, [r3, #8]
 8001946:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	490f      	ldr	r1, [pc, #60]	; (8001990 <HAL_RCC_ClockConfig+0x258>)
 8001952:	4313      	orrs	r3, r2
 8001954:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001956:	f000 f823 	bl	80019a0 <HAL_RCC_GetSysClockFreq>
 800195a:	4601      	mov	r1, r0
 800195c:	4b0c      	ldr	r3, [pc, #48]	; (8001990 <HAL_RCC_ClockConfig+0x258>)
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	091b      	lsrs	r3, r3, #4
 8001962:	f003 030f 	and.w	r3, r3, #15
 8001966:	4a0b      	ldr	r2, [pc, #44]	; (8001994 <HAL_RCC_ClockConfig+0x25c>)
 8001968:	5cd3      	ldrb	r3, [r2, r3]
 800196a:	fa21 f303 	lsr.w	r3, r1, r3
 800196e:	4a0a      	ldr	r2, [pc, #40]	; (8001998 <HAL_RCC_ClockConfig+0x260>)
 8001970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001972:	4b0a      	ldr	r3, [pc, #40]	; (800199c <HAL_RCC_ClockConfig+0x264>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff f84c 	bl	8000a14 <HAL_InitTick>
 800197c:	4603      	mov	r3, r0
 800197e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001980:	7afb      	ldrb	r3, [r7, #11]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40023c00 	.word	0x40023c00
 8001990:	40023800 	.word	0x40023800
 8001994:	08002fcc 	.word	0x08002fcc
 8001998:	20000004 	.word	0x20000004
 800199c:	20000008 	.word	0x20000008

080019a0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b087      	sub	sp, #28
 80019a4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 80019a6:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	f003 030c 	and.w	r3, r3, #12
 80019b2:	2b08      	cmp	r3, #8
 80019b4:	d006      	beq.n	80019c4 <HAL_RCC_GetSysClockFreq+0x24>
 80019b6:	2b0c      	cmp	r3, #12
 80019b8:	d007      	beq.n	80019ca <HAL_RCC_GetSysClockFreq+0x2a>
 80019ba:	2b04      	cmp	r3, #4
 80019bc:	d12c      	bne.n	8001a18 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019be:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <HAL_RCC_GetSysClockFreq+0xa4>)
 80019c0:	613b      	str	r3, [r7, #16]
      break;
 80019c2:	e037      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019c4:	4b20      	ldr	r3, [pc, #128]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xa8>)
 80019c6:	613b      	str	r3, [r7, #16]
      break;
 80019c8:	e034      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	0c9b      	lsrs	r3, r3, #18
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	4a1e      	ldr	r2, [pc, #120]	; (8001a4c <HAL_RCC_GetSysClockFreq+0xac>)
 80019d4:	5cd3      	ldrb	r3, [r2, r3]
 80019d6:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	0d9b      	lsrs	r3, r3, #22
 80019dc:	f003 0303 	and.w	r3, r3, #3
 80019e0:	3301      	adds	r3, #1
 80019e2:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019e4:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d008      	beq.n	8001a02 <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4a15      	ldr	r2, [pc, #84]	; (8001a48 <HAL_RCC_GetSysClockFreq+0xa8>)
 80019f4:	fb02 f203 	mul.w	r2, r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80019fe:	617b      	str	r3, [r7, #20]
 8001a00:	e007      	b.n	8001a12 <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	4a0f      	ldr	r2, [pc, #60]	; (8001a44 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a06:	fb02 f203 	mul.w	r2, r2, r3
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a10:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	613b      	str	r3, [r7, #16]
      break;
 8001a16:	e00d      	b.n	8001a34 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	0b5b      	lsrs	r3, r3, #13
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	3301      	adds	r3, #1
 8001a28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	613b      	str	r3, [r7, #16]
      break;
 8001a32:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a34:	693b      	ldr	r3, [r7, #16]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	371c      	adds	r7, #28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bc80      	pop	{r7}
 8001a3e:	4770      	bx	lr
 8001a40:	40023800 	.word	0x40023800
 8001a44:	00f42400 	.word	0x00f42400
 8001a48:	007a1200 	.word	0x007a1200
 8001a4c:	08002fc0 	.word	0x08002fc0

08001a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a54:	4b02      	ldr	r3, [pc, #8]	; (8001a60 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a56:	681b      	ldr	r3, [r3, #0]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	20000004 	.word	0x20000004

08001a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a68:	f7ff fff2 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 8001a6c:	4601      	mov	r1, r0
 8001a6e:	4b05      	ldr	r3, [pc, #20]	; (8001a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	0a1b      	lsrs	r3, r3, #8
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	4a03      	ldr	r2, [pc, #12]	; (8001a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a7a:	5cd3      	ldrb	r3, [r2, r3]
 8001a7c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40023800 	.word	0x40023800
 8001a88:	08002fdc 	.word	0x08002fdc

08001a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a90:	f7ff ffde 	bl	8001a50 <HAL_RCC_GetHCLKFreq>
 8001a94:	4601      	mov	r1, r0
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	0adb      	lsrs	r3, r3, #11
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	4a03      	ldr	r2, [pc, #12]	; (8001ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aa2:	5cd3      	ldrb	r3, [r2, r3]
 8001aa4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	08002fdc 	.word	0x08002fdc

08001ab4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b087      	sub	sp, #28
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001abc:	2300      	movs	r3, #0
 8001abe:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001ac0:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d12c      	bne.n	8001b26 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001acc:	4b26      	ldr	r3, [pc, #152]	; (8001b68 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d005      	beq.n	8001ae4 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001ad8:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001ae0:	617b      	str	r3, [r7, #20]
 8001ae2:	e016      	b.n	8001b12 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae4:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae8:	4a1f      	ldr	r2, [pc, #124]	; (8001b68 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001aea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aee:	6253      	str	r3, [r2, #36]	; 0x24
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001afc:	4b1b      	ldr	r3, [pc, #108]	; (8001b6c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001b04:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0a:	4a17      	ldr	r2, [pc, #92]	; (8001b68 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b10:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8001b18:	d105      	bne.n	8001b26 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001b20:	d101      	bne.n	8001b26 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001b22:	2301      	movs	r3, #1
 8001b24:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d105      	bne.n	8001b38 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8001b2c:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a0f      	ldr	r2, [pc, #60]	; (8001b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b32:	f043 0304 	orr.w	r3, r3, #4
 8001b36:	6013      	str	r3, [r2, #0]
 8001b38:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f023 0201 	bic.w	r2, r3, #1
 8001b40:	490b      	ldr	r1, [pc, #44]	; (8001b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001b48:	4b09      	ldr	r3, [pc, #36]	; (8001b70 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0301 	and.w	r3, r3, #1
 8001b50:	693a      	ldr	r2, [r7, #16]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d001      	beq.n	8001b5a <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001b5a:	2300      	movs	r3, #0
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	371c      	adds	r7, #28
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	40007000 	.word	0x40007000
 8001b70:	40023c00 	.word	0x40023c00

08001b74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e03f      	b.n	8001c06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d106      	bne.n	8001ba0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f7fe feb0 	bl	8000900 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2224      	movs	r2, #36	; 0x24
 8001ba4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	68da      	ldr	r2, [r3, #12]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 fae5 	bl	8002188 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bcc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	695a      	ldr	r2, [r3, #20]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2220      	movs	r2, #32
 8001c00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b085      	sub	sp, #20
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	60f8      	str	r0, [r7, #12]
 8001c16:	60b9      	str	r1, [r7, #8]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c22:	b2db      	uxtb	r3, r3
 8001c24:	2b20      	cmp	r3, #32
 8001c26:	d130      	bne.n	8001c8a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d002      	beq.n	8001c34 <HAL_UART_Transmit_IT+0x26>
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e029      	b.n	8001c8c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d101      	bne.n	8001c46 <HAL_UART_Transmit_IT+0x38>
 8001c42:	2302      	movs	r3, #2
 8001c44:	e022      	b.n	8001c8c <HAL_UART_Transmit_IT+0x7e>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	88fa      	ldrh	r2, [r7, #6]
 8001c58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	88fa      	ldrh	r2, [r7, #6]
 8001c5e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2200      	movs	r2, #0
 8001c64:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2221      	movs	r2, #33	; 0x21
 8001c6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	68da      	ldr	r2, [r3, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c84:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e000      	b.n	8001c8c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001c8a:	2302      	movs	r3, #2
  }
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bc80      	pop	{r7}
 8001c94:	4770      	bx	lr

08001c96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b085      	sub	sp, #20
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	60f8      	str	r0, [r7, #12]
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b20      	cmp	r3, #32
 8001cae:	d140      	bne.n	8001d32 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d002      	beq.n	8001cbc <HAL_UART_Receive_IT+0x26>
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d101      	bne.n	8001cc0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e039      	b.n	8001d34 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d101      	bne.n	8001cce <HAL_UART_Receive_IT+0x38>
 8001cca:	2302      	movs	r3, #2
 8001ccc:	e032      	b.n	8001d34 <HAL_UART_Receive_IT+0x9e>
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	68ba      	ldr	r2, [r7, #8]
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	88fa      	ldrh	r2, [r7, #6]
 8001ce0:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	88fa      	ldrh	r2, [r7, #6]
 8001ce6:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2200      	movs	r2, #0
 8001cec:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2222      	movs	r2, #34	; 0x22
 8001cf2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68da      	ldr	r2, [r3, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d0c:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695a      	ldr	r2, [r3, #20]
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0201 	orr.w	r2, r2, #1
 8001d1c:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f042 0220 	orr.w	r2, r2, #32
 8001d2c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e000      	b.n	8001d34 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8001d32:	2302      	movs	r3, #2
  }
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
	...

08001d40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b088      	sub	sp, #32
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001d60:	2300      	movs	r3, #0
 8001d62:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f003 030f 	and.w	r3, r3, #15
 8001d6e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001d70:	693b      	ldr	r3, [r7, #16]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10d      	bne.n	8001d92 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	f003 0320 	and.w	r3, r3, #32
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <HAL_UART_IRQHandler+0x52>
 8001d80:	69bb      	ldr	r3, [r7, #24]
 8001d82:	f003 0320 	and.w	r3, r3, #32
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d003      	beq.n	8001d92 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f97b 	bl	8002086 <UART_Receive_IT>
      return;
 8001d90:	e0cc      	b.n	8001f2c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80ab 	beq.w	8001ef0 <HAL_UART_IRQHandler+0x1b0>
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d105      	bne.n	8001db0 <HAL_UART_IRQHandler+0x70>
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 80a0 	beq.w	8001ef0 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d00a      	beq.n	8001dd0 <HAL_UART_IRQHandler+0x90>
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dc8:	f043 0201 	orr.w	r2, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00a      	beq.n	8001df0 <HAL_UART_IRQHandler+0xb0>
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001de8:	f043 0202 	orr.w	r2, r3, #2
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d00a      	beq.n	8001e10 <HAL_UART_IRQHandler+0xd0>
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e08:	f043 0204 	orr.w	r2, r3, #4
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f003 0308 	and.w	r3, r3, #8
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d00a      	beq.n	8001e30 <HAL_UART_IRQHandler+0xf0>
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e28:	f043 0208 	orr.w	r2, r3, #8
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d078      	beq.n	8001f2a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e38:	69fb      	ldr	r3, [r7, #28]
 8001e3a:	f003 0320 	and.w	r3, r3, #32
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d007      	beq.n	8001e52 <HAL_UART_IRQHandler+0x112>
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	f003 0320 	and.w	r3, r3, #32
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001e4c:	6878      	ldr	r0, [r7, #4]
 8001e4e:	f000 f91a 	bl	8002086 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e5c:	2b40      	cmp	r3, #64	; 0x40
 8001e5e:	bf0c      	ite	eq
 8001e60:	2301      	moveq	r3, #1
 8001e62:	2300      	movne	r3, #0
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d102      	bne.n	8001e7a <HAL_UART_IRQHandler+0x13a>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d031      	beq.n	8001ede <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f000 f865 	bl	8001f4a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8a:	2b40      	cmp	r3, #64	; 0x40
 8001e8c:	d123      	bne.n	8001ed6 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695a      	ldr	r2, [r3, #20]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001e9c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d013      	beq.n	8001ece <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eaa:	4a22      	ldr	r2, [pc, #136]	; (8001f34 <HAL_UART_IRQHandler+0x1f4>)
 8001eac:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7fe ff11 	bl	8000cda <HAL_DMA_Abort_IT>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d016      	beq.n	8001eec <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ec8:	4610      	mov	r0, r2
 8001eca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ecc:	e00e      	b.n	8001eec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 f832 	bl	8001f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ed4:	e00a      	b.n	8001eec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f82e 	bl	8001f38 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001edc:	e006      	b.n	8001eec <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f82a 	bl	8001f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001eea:	e01e      	b.n	8001f2a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001eec:	bf00      	nop
    return;
 8001eee:	e01c      	b.n	8001f2a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d008      	beq.n	8001f0c <HAL_UART_IRQHandler+0x1cc>
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f000 f851 	bl	8001fac <UART_Transmit_IT>
    return;
 8001f0a:	e00f      	b.n	8001f2c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d00a      	beq.n	8001f2c <HAL_UART_IRQHandler+0x1ec>
 8001f16:	69bb      	ldr	r3, [r7, #24]
 8001f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 f898 	bl	8002056 <UART_EndTransmit_IT>
    return;
 8001f26:	bf00      	nop
 8001f28:	e000      	b.n	8001f2c <HAL_UART_IRQHandler+0x1ec>
    return;
 8001f2a:	bf00      	nop
  }
}
 8001f2c:	3720      	adds	r7, #32
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	08001f85 	.word	0x08001f85

08001f38 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr

08001f4a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001f60:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	695a      	ldr	r2, [r3, #20]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0201 	bic.w	r2, r2, #1
 8001f70:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	2220      	movs	r2, #32
 8001f76:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f90:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f7ff ffca 	bl	8001f38 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001fa4:	bf00      	nop
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b21      	cmp	r3, #33	; 0x21
 8001fbe:	d144      	bne.n	800204a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	689b      	ldr	r3, [r3, #8]
 8001fc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fc8:	d11a      	bne.n	8002000 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a1b      	ldr	r3, [r3, #32]
 8001fce:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	881b      	ldrh	r3, [r3, #0]
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fde:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	691b      	ldr	r3, [r3, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d105      	bne.n	8001ff4 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a1b      	ldr	r3, [r3, #32]
 8001fec:	1c9a      	adds	r2, r3, #2
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	621a      	str	r2, [r3, #32]
 8001ff2:	e00e      	b.n	8002012 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	1c5a      	adds	r2, r3, #1
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	621a      	str	r2, [r3, #32]
 8001ffe:	e008      	b.n	8002012 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a1b      	ldr	r3, [r3, #32]
 8002004:	1c59      	adds	r1, r3, #1
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6211      	str	r1, [r2, #32]
 800200a:	781a      	ldrb	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002016:	b29b      	uxth	r3, r3
 8002018:	3b01      	subs	r3, #1
 800201a:	b29b      	uxth	r3, r3
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	4619      	mov	r1, r3
 8002020:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10f      	bne.n	8002046 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	68da      	ldr	r2, [r3, #12]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002034:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68da      	ldr	r2, [r3, #12]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002044:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	e000      	b.n	800204c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800204a:	2302      	movs	r3, #2
  }
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	bc80      	pop	{r7}
 8002054:	4770      	bx	lr

08002056 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800206c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2220      	movs	r2, #32
 8002072:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002076:	6878      	ldr	r0, [r7, #4]
 8002078:	f7fe fa4c 	bl	8000514 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}

08002086 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002086:	b580      	push	{r7, lr}
 8002088:	b084      	sub	sp, #16
 800208a:	af00      	add	r7, sp, #0
 800208c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002094:	b2db      	uxtb	r3, r3
 8002096:	2b22      	cmp	r3, #34	; 0x22
 8002098:	d171      	bne.n	800217e <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020a2:	d123      	bne.n	80020ec <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a8:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	691b      	ldr	r3, [r3, #16]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d10e      	bne.n	80020d0 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80020be:	b29a      	uxth	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c8:	1c9a      	adds	r2, r3, #2
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	629a      	str	r2, [r3, #40]	; 0x28
 80020ce:	e029      	b.n	8002124 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	b29a      	uxth	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	629a      	str	r2, [r3, #40]	; 0x28
 80020ea:	e01b      	b.n	8002124 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10a      	bne.n	800210a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6858      	ldr	r0, [r3, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fe:	1c59      	adds	r1, r3, #1
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	6291      	str	r1, [r2, #40]	; 0x28
 8002104:	b2c2      	uxtb	r2, r0
 8002106:	701a      	strb	r2, [r3, #0]
 8002108:	e00c      	b.n	8002124 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	1c58      	adds	r0, r3, #1
 8002118:	6879      	ldr	r1, [r7, #4]
 800211a:	6288      	str	r0, [r1, #40]	; 0x28
 800211c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002120:	b2d2      	uxtb	r2, r2
 8002122:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002128:	b29b      	uxth	r3, r3
 800212a:	3b01      	subs	r3, #1
 800212c:	b29b      	uxth	r3, r3
 800212e:	687a      	ldr	r2, [r7, #4]
 8002130:	4619      	mov	r1, r3
 8002132:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002134:	2b00      	cmp	r3, #0
 8002136:	d120      	bne.n	800217a <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0220 	bic.w	r2, r2, #32
 8002146:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002156:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	695a      	ldr	r2, [r3, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f022 0201 	bic.w	r2, r2, #1
 8002166:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2220      	movs	r2, #32
 800216c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	f7fe f9c1 	bl	80004f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002176:	2300      	movs	r3, #0
 8002178:	e002      	b.n	8002180 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800217a:	2300      	movs	r3, #0
 800217c:	e000      	b.n	8002180 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800217e:	2302      	movs	r3, #2
  }
}
 8002180:	4618      	mov	r0, r3
 8002182:	3710      	adds	r7, #16
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}

08002188 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	431a      	orrs	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	695b      	ldr	r3, [r3, #20]
 80021b4:	431a      	orrs	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	4313      	orrs	r3, r2
 80021bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80021c8:	f023 030c 	bic.w	r3, r3, #12
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	6812      	ldr	r2, [r2, #0]
 80021d0:	68f9      	ldr	r1, [r7, #12]
 80021d2:	430b      	orrs	r3, r1
 80021d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	699a      	ldr	r2, [r3, #24]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69db      	ldr	r3, [r3, #28]
 80021f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021f4:	f040 80a5 	bne.w	8002342 <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4aa4      	ldr	r2, [pc, #656]	; (8002490 <UART_SetConfig+0x308>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d14f      	bne.n	80022a2 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002202:	f7ff fc43 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 8002206:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002208:	68ba      	ldr	r2, [r7, #8]
 800220a:	4613      	mov	r3, r2
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	4413      	add	r3, r2
 8002210:	009a      	lsls	r2, r3, #2
 8002212:	441a      	add	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	fbb2 f3f3 	udiv	r3, r2, r3
 800221e:	4a9d      	ldr	r2, [pc, #628]	; (8002494 <UART_SetConfig+0x30c>)
 8002220:	fba2 2303 	umull	r2, r3, r2, r3
 8002224:	095b      	lsrs	r3, r3, #5
 8002226:	0119      	lsls	r1, r3, #4
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	009a      	lsls	r2, r3, #2
 8002232:	441a      	add	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	fbb2 f2f3 	udiv	r2, r2, r3
 800223e:	4b95      	ldr	r3, [pc, #596]	; (8002494 <UART_SetConfig+0x30c>)
 8002240:	fba3 0302 	umull	r0, r3, r3, r2
 8002244:	095b      	lsrs	r3, r3, #5
 8002246:	2064      	movs	r0, #100	; 0x64
 8002248:	fb00 f303 	mul.w	r3, r0, r3
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	3332      	adds	r3, #50	; 0x32
 8002252:	4a90      	ldr	r2, [pc, #576]	; (8002494 <UART_SetConfig+0x30c>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	095b      	lsrs	r3, r3, #5
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002260:	4419      	add	r1, r3
 8002262:	68ba      	ldr	r2, [r7, #8]
 8002264:	4613      	mov	r3, r2
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	4413      	add	r3, r2
 800226a:	009a      	lsls	r2, r3, #2
 800226c:	441a      	add	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	fbb2 f2f3 	udiv	r2, r2, r3
 8002278:	4b86      	ldr	r3, [pc, #536]	; (8002494 <UART_SetConfig+0x30c>)
 800227a:	fba3 0302 	umull	r0, r3, r3, r2
 800227e:	095b      	lsrs	r3, r3, #5
 8002280:	2064      	movs	r0, #100	; 0x64
 8002282:	fb00 f303 	mul.w	r3, r0, r3
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	3332      	adds	r3, #50	; 0x32
 800228c:	4a81      	ldr	r2, [pc, #516]	; (8002494 <UART_SetConfig+0x30c>)
 800228e:	fba2 2303 	umull	r2, r3, r2, r3
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	f003 0207 	and.w	r2, r3, #7
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	440a      	add	r2, r1
 800229e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80022a0:	e0f1      	b.n	8002486 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 80022a2:	f7ff fbdf 	bl	8001a64 <HAL_RCC_GetPCLK1Freq>
 80022a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80022a8:	68ba      	ldr	r2, [r7, #8]
 80022aa:	4613      	mov	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	009a      	lsls	r2, r3, #2
 80022b2:	441a      	add	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80022be:	4a75      	ldr	r2, [pc, #468]	; (8002494 <UART_SetConfig+0x30c>)
 80022c0:	fba2 2303 	umull	r2, r3, r2, r3
 80022c4:	095b      	lsrs	r3, r3, #5
 80022c6:	0119      	lsls	r1, r3, #4
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	009a      	lsls	r2, r3, #2
 80022d2:	441a      	add	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	fbb2 f2f3 	udiv	r2, r2, r3
 80022de:	4b6d      	ldr	r3, [pc, #436]	; (8002494 <UART_SetConfig+0x30c>)
 80022e0:	fba3 0302 	umull	r0, r3, r3, r2
 80022e4:	095b      	lsrs	r3, r3, #5
 80022e6:	2064      	movs	r0, #100	; 0x64
 80022e8:	fb00 f303 	mul.w	r3, r0, r3
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	00db      	lsls	r3, r3, #3
 80022f0:	3332      	adds	r3, #50	; 0x32
 80022f2:	4a68      	ldr	r2, [pc, #416]	; (8002494 <UART_SetConfig+0x30c>)
 80022f4:	fba2 2303 	umull	r2, r3, r2, r3
 80022f8:	095b      	lsrs	r3, r3, #5
 80022fa:	005b      	lsls	r3, r3, #1
 80022fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002300:	4419      	add	r1, r3
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	4613      	mov	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	009a      	lsls	r2, r3, #2
 800230c:	441a      	add	r2, r3
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	005b      	lsls	r3, r3, #1
 8002314:	fbb2 f2f3 	udiv	r2, r2, r3
 8002318:	4b5e      	ldr	r3, [pc, #376]	; (8002494 <UART_SetConfig+0x30c>)
 800231a:	fba3 0302 	umull	r0, r3, r3, r2
 800231e:	095b      	lsrs	r3, r3, #5
 8002320:	2064      	movs	r0, #100	; 0x64
 8002322:	fb00 f303 	mul.w	r3, r0, r3
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	3332      	adds	r3, #50	; 0x32
 800232c:	4a59      	ldr	r2, [pc, #356]	; (8002494 <UART_SetConfig+0x30c>)
 800232e:	fba2 2303 	umull	r2, r3, r2, r3
 8002332:	095b      	lsrs	r3, r3, #5
 8002334:	f003 0207 	and.w	r2, r3, #7
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	440a      	add	r2, r1
 800233e:	609a      	str	r2, [r3, #8]
}
 8002340:	e0a1      	b.n	8002486 <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a52      	ldr	r2, [pc, #328]	; (8002490 <UART_SetConfig+0x308>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d14e      	bne.n	80023ea <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 800234c:	f7ff fb9e 	bl	8001a8c <HAL_RCC_GetPCLK2Freq>
 8002350:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002352:	68ba      	ldr	r2, [r7, #8]
 8002354:	4613      	mov	r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	4413      	add	r3, r2
 800235a:	009a      	lsls	r2, r3, #2
 800235c:	441a      	add	r2, r3
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	fbb2 f3f3 	udiv	r3, r2, r3
 8002368:	4a4a      	ldr	r2, [pc, #296]	; (8002494 <UART_SetConfig+0x30c>)
 800236a:	fba2 2303 	umull	r2, r3, r2, r3
 800236e:	095b      	lsrs	r3, r3, #5
 8002370:	0119      	lsls	r1, r3, #4
 8002372:	68ba      	ldr	r2, [r7, #8]
 8002374:	4613      	mov	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	4413      	add	r3, r2
 800237a:	009a      	lsls	r2, r3, #2
 800237c:	441a      	add	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	fbb2 f2f3 	udiv	r2, r2, r3
 8002388:	4b42      	ldr	r3, [pc, #264]	; (8002494 <UART_SetConfig+0x30c>)
 800238a:	fba3 0302 	umull	r0, r3, r3, r2
 800238e:	095b      	lsrs	r3, r3, #5
 8002390:	2064      	movs	r0, #100	; 0x64
 8002392:	fb00 f303 	mul.w	r3, r0, r3
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	3332      	adds	r3, #50	; 0x32
 800239c:	4a3d      	ldr	r2, [pc, #244]	; (8002494 <UART_SetConfig+0x30c>)
 800239e:	fba2 2303 	umull	r2, r3, r2, r3
 80023a2:	095b      	lsrs	r3, r3, #5
 80023a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023a8:	4419      	add	r1, r3
 80023aa:	68ba      	ldr	r2, [r7, #8]
 80023ac:	4613      	mov	r3, r2
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	009a      	lsls	r2, r3, #2
 80023b4:	441a      	add	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80023c0:	4b34      	ldr	r3, [pc, #208]	; (8002494 <UART_SetConfig+0x30c>)
 80023c2:	fba3 0302 	umull	r0, r3, r3, r2
 80023c6:	095b      	lsrs	r3, r3, #5
 80023c8:	2064      	movs	r0, #100	; 0x64
 80023ca:	fb00 f303 	mul.w	r3, r0, r3
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	3332      	adds	r3, #50	; 0x32
 80023d4:	4a2f      	ldr	r2, [pc, #188]	; (8002494 <UART_SetConfig+0x30c>)
 80023d6:	fba2 2303 	umull	r2, r3, r2, r3
 80023da:	095b      	lsrs	r3, r3, #5
 80023dc:	f003 020f 	and.w	r2, r3, #15
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	440a      	add	r2, r1
 80023e6:	609a      	str	r2, [r3, #8]
}
 80023e8:	e04d      	b.n	8002486 <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 80023ea:	f7ff fb3b 	bl	8001a64 <HAL_RCC_GetPCLK1Freq>
 80023ee:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	009a      	lsls	r2, r3, #2
 80023fa:	441a      	add	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	fbb2 f3f3 	udiv	r3, r2, r3
 8002406:	4a23      	ldr	r2, [pc, #140]	; (8002494 <UART_SetConfig+0x30c>)
 8002408:	fba2 2303 	umull	r2, r3, r2, r3
 800240c:	095b      	lsrs	r3, r3, #5
 800240e:	0119      	lsls	r1, r3, #4
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	4613      	mov	r3, r2
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	4413      	add	r3, r2
 8002418:	009a      	lsls	r2, r3, #2
 800241a:	441a      	add	r2, r3
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	fbb2 f2f3 	udiv	r2, r2, r3
 8002426:	4b1b      	ldr	r3, [pc, #108]	; (8002494 <UART_SetConfig+0x30c>)
 8002428:	fba3 0302 	umull	r0, r3, r3, r2
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	2064      	movs	r0, #100	; 0x64
 8002430:	fb00 f303 	mul.w	r3, r0, r3
 8002434:	1ad3      	subs	r3, r2, r3
 8002436:	011b      	lsls	r3, r3, #4
 8002438:	3332      	adds	r3, #50	; 0x32
 800243a:	4a16      	ldr	r2, [pc, #88]	; (8002494 <UART_SetConfig+0x30c>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	095b      	lsrs	r3, r3, #5
 8002442:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002446:	4419      	add	r1, r3
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	4613      	mov	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	4413      	add	r3, r2
 8002450:	009a      	lsls	r2, r3, #2
 8002452:	441a      	add	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	fbb2 f2f3 	udiv	r2, r2, r3
 800245e:	4b0d      	ldr	r3, [pc, #52]	; (8002494 <UART_SetConfig+0x30c>)
 8002460:	fba3 0302 	umull	r0, r3, r3, r2
 8002464:	095b      	lsrs	r3, r3, #5
 8002466:	2064      	movs	r0, #100	; 0x64
 8002468:	fb00 f303 	mul.w	r3, r0, r3
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	3332      	adds	r3, #50	; 0x32
 8002472:	4a08      	ldr	r2, [pc, #32]	; (8002494 <UART_SetConfig+0x30c>)
 8002474:	fba2 2303 	umull	r2, r3, r2, r3
 8002478:	095b      	lsrs	r3, r3, #5
 800247a:	f003 020f 	and.w	r2, r3, #15
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	440a      	add	r2, r1
 8002484:	609a      	str	r2, [r3, #8]
}
 8002486:	bf00      	nop
 8002488:	3710      	adds	r7, #16
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}
 800248e:	bf00      	nop
 8002490:	40013800 	.word	0x40013800
 8002494:	51eb851f 	.word	0x51eb851f

08002498 <atoi>:
 8002498:	220a      	movs	r2, #10
 800249a:	2100      	movs	r1, #0
 800249c:	f000 b8ce 	b.w	800263c <strtol>

080024a0 <__errno>:
 80024a0:	4b01      	ldr	r3, [pc, #4]	; (80024a8 <__errno+0x8>)
 80024a2:	6818      	ldr	r0, [r3, #0]
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20000010 	.word	0x20000010

080024ac <__libc_init_array>:
 80024ac:	b570      	push	{r4, r5, r6, lr}
 80024ae:	2500      	movs	r5, #0
 80024b0:	4e0c      	ldr	r6, [pc, #48]	; (80024e4 <__libc_init_array+0x38>)
 80024b2:	4c0d      	ldr	r4, [pc, #52]	; (80024e8 <__libc_init_array+0x3c>)
 80024b4:	1ba4      	subs	r4, r4, r6
 80024b6:	10a4      	asrs	r4, r4, #2
 80024b8:	42a5      	cmp	r5, r4
 80024ba:	d109      	bne.n	80024d0 <__libc_init_array+0x24>
 80024bc:	f000 fcea 	bl	8002e94 <_init>
 80024c0:	2500      	movs	r5, #0
 80024c2:	4e0a      	ldr	r6, [pc, #40]	; (80024ec <__libc_init_array+0x40>)
 80024c4:	4c0a      	ldr	r4, [pc, #40]	; (80024f0 <__libc_init_array+0x44>)
 80024c6:	1ba4      	subs	r4, r4, r6
 80024c8:	10a4      	asrs	r4, r4, #2
 80024ca:	42a5      	cmp	r5, r4
 80024cc:	d105      	bne.n	80024da <__libc_init_array+0x2e>
 80024ce:	bd70      	pop	{r4, r5, r6, pc}
 80024d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024d4:	4798      	blx	r3
 80024d6:	3501      	adds	r5, #1
 80024d8:	e7ee      	b.n	80024b8 <__libc_init_array+0xc>
 80024da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024de:	4798      	blx	r3
 80024e0:	3501      	adds	r5, #1
 80024e2:	e7f2      	b.n	80024ca <__libc_init_array+0x1e>
 80024e4:	08003124 	.word	0x08003124
 80024e8:	08003124 	.word	0x08003124
 80024ec:	08003124 	.word	0x08003124
 80024f0:	08003128 	.word	0x08003128

080024f4 <memset>:
 80024f4:	4603      	mov	r3, r0
 80024f6:	4402      	add	r2, r0
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d100      	bne.n	80024fe <memset+0xa>
 80024fc:	4770      	bx	lr
 80024fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002502:	e7f9      	b.n	80024f8 <memset+0x4>

08002504 <siprintf>:
 8002504:	b40e      	push	{r1, r2, r3}
 8002506:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800250a:	b500      	push	{lr}
 800250c:	b09c      	sub	sp, #112	; 0x70
 800250e:	ab1d      	add	r3, sp, #116	; 0x74
 8002510:	9002      	str	r0, [sp, #8]
 8002512:	9006      	str	r0, [sp, #24]
 8002514:	9107      	str	r1, [sp, #28]
 8002516:	9104      	str	r1, [sp, #16]
 8002518:	4808      	ldr	r0, [pc, #32]	; (800253c <siprintf+0x38>)
 800251a:	4909      	ldr	r1, [pc, #36]	; (8002540 <siprintf+0x3c>)
 800251c:	f853 2b04 	ldr.w	r2, [r3], #4
 8002520:	9105      	str	r1, [sp, #20]
 8002522:	6800      	ldr	r0, [r0, #0]
 8002524:	a902      	add	r1, sp, #8
 8002526:	9301      	str	r3, [sp, #4]
 8002528:	f000 f90e 	bl	8002748 <_svfiprintf_r>
 800252c:	2200      	movs	r2, #0
 800252e:	9b02      	ldr	r3, [sp, #8]
 8002530:	701a      	strb	r2, [r3, #0]
 8002532:	b01c      	add	sp, #112	; 0x70
 8002534:	f85d eb04 	ldr.w	lr, [sp], #4
 8002538:	b003      	add	sp, #12
 800253a:	4770      	bx	lr
 800253c:	20000010 	.word	0x20000010
 8002540:	ffff0208 	.word	0xffff0208

08002544 <_strtol_l.isra.0>:
 8002544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002548:	4680      	mov	r8, r0
 800254a:	4689      	mov	r9, r1
 800254c:	4692      	mov	sl, r2
 800254e:	461e      	mov	r6, r3
 8002550:	460f      	mov	r7, r1
 8002552:	463d      	mov	r5, r7
 8002554:	9808      	ldr	r0, [sp, #32]
 8002556:	f815 4b01 	ldrb.w	r4, [r5], #1
 800255a:	f000 f885 	bl	8002668 <__locale_ctype_ptr_l>
 800255e:	4420      	add	r0, r4
 8002560:	7843      	ldrb	r3, [r0, #1]
 8002562:	f013 0308 	ands.w	r3, r3, #8
 8002566:	d132      	bne.n	80025ce <_strtol_l.isra.0+0x8a>
 8002568:	2c2d      	cmp	r4, #45	; 0x2d
 800256a:	d132      	bne.n	80025d2 <_strtol_l.isra.0+0x8e>
 800256c:	2201      	movs	r2, #1
 800256e:	787c      	ldrb	r4, [r7, #1]
 8002570:	1cbd      	adds	r5, r7, #2
 8002572:	2e00      	cmp	r6, #0
 8002574:	d05d      	beq.n	8002632 <_strtol_l.isra.0+0xee>
 8002576:	2e10      	cmp	r6, #16
 8002578:	d109      	bne.n	800258e <_strtol_l.isra.0+0x4a>
 800257a:	2c30      	cmp	r4, #48	; 0x30
 800257c:	d107      	bne.n	800258e <_strtol_l.isra.0+0x4a>
 800257e:	782b      	ldrb	r3, [r5, #0]
 8002580:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8002584:	2b58      	cmp	r3, #88	; 0x58
 8002586:	d14f      	bne.n	8002628 <_strtol_l.isra.0+0xe4>
 8002588:	2610      	movs	r6, #16
 800258a:	786c      	ldrb	r4, [r5, #1]
 800258c:	3502      	adds	r5, #2
 800258e:	2a00      	cmp	r2, #0
 8002590:	bf14      	ite	ne
 8002592:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8002596:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800259a:	2700      	movs	r7, #0
 800259c:	fbb1 fcf6 	udiv	ip, r1, r6
 80025a0:	4638      	mov	r0, r7
 80025a2:	fb06 1e1c 	mls	lr, r6, ip, r1
 80025a6:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80025aa:	2b09      	cmp	r3, #9
 80025ac:	d817      	bhi.n	80025de <_strtol_l.isra.0+0x9a>
 80025ae:	461c      	mov	r4, r3
 80025b0:	42a6      	cmp	r6, r4
 80025b2:	dd23      	ble.n	80025fc <_strtol_l.isra.0+0xb8>
 80025b4:	1c7b      	adds	r3, r7, #1
 80025b6:	d007      	beq.n	80025c8 <_strtol_l.isra.0+0x84>
 80025b8:	4584      	cmp	ip, r0
 80025ba:	d31c      	bcc.n	80025f6 <_strtol_l.isra.0+0xb2>
 80025bc:	d101      	bne.n	80025c2 <_strtol_l.isra.0+0x7e>
 80025be:	45a6      	cmp	lr, r4
 80025c0:	db19      	blt.n	80025f6 <_strtol_l.isra.0+0xb2>
 80025c2:	2701      	movs	r7, #1
 80025c4:	fb00 4006 	mla	r0, r0, r6, r4
 80025c8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80025cc:	e7eb      	b.n	80025a6 <_strtol_l.isra.0+0x62>
 80025ce:	462f      	mov	r7, r5
 80025d0:	e7bf      	b.n	8002552 <_strtol_l.isra.0+0xe>
 80025d2:	2c2b      	cmp	r4, #43	; 0x2b
 80025d4:	bf04      	itt	eq
 80025d6:	1cbd      	addeq	r5, r7, #2
 80025d8:	787c      	ldrbeq	r4, [r7, #1]
 80025da:	461a      	mov	r2, r3
 80025dc:	e7c9      	b.n	8002572 <_strtol_l.isra.0+0x2e>
 80025de:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80025e2:	2b19      	cmp	r3, #25
 80025e4:	d801      	bhi.n	80025ea <_strtol_l.isra.0+0xa6>
 80025e6:	3c37      	subs	r4, #55	; 0x37
 80025e8:	e7e2      	b.n	80025b0 <_strtol_l.isra.0+0x6c>
 80025ea:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80025ee:	2b19      	cmp	r3, #25
 80025f0:	d804      	bhi.n	80025fc <_strtol_l.isra.0+0xb8>
 80025f2:	3c57      	subs	r4, #87	; 0x57
 80025f4:	e7dc      	b.n	80025b0 <_strtol_l.isra.0+0x6c>
 80025f6:	f04f 37ff 	mov.w	r7, #4294967295
 80025fa:	e7e5      	b.n	80025c8 <_strtol_l.isra.0+0x84>
 80025fc:	1c7b      	adds	r3, r7, #1
 80025fe:	d108      	bne.n	8002612 <_strtol_l.isra.0+0xce>
 8002600:	2322      	movs	r3, #34	; 0x22
 8002602:	4608      	mov	r0, r1
 8002604:	f8c8 3000 	str.w	r3, [r8]
 8002608:	f1ba 0f00 	cmp.w	sl, #0
 800260c:	d107      	bne.n	800261e <_strtol_l.isra.0+0xda>
 800260e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002612:	b102      	cbz	r2, 8002616 <_strtol_l.isra.0+0xd2>
 8002614:	4240      	negs	r0, r0
 8002616:	f1ba 0f00 	cmp.w	sl, #0
 800261a:	d0f8      	beq.n	800260e <_strtol_l.isra.0+0xca>
 800261c:	b10f      	cbz	r7, 8002622 <_strtol_l.isra.0+0xde>
 800261e:	f105 39ff 	add.w	r9, r5, #4294967295
 8002622:	f8ca 9000 	str.w	r9, [sl]
 8002626:	e7f2      	b.n	800260e <_strtol_l.isra.0+0xca>
 8002628:	2430      	movs	r4, #48	; 0x30
 800262a:	2e00      	cmp	r6, #0
 800262c:	d1af      	bne.n	800258e <_strtol_l.isra.0+0x4a>
 800262e:	2608      	movs	r6, #8
 8002630:	e7ad      	b.n	800258e <_strtol_l.isra.0+0x4a>
 8002632:	2c30      	cmp	r4, #48	; 0x30
 8002634:	d0a3      	beq.n	800257e <_strtol_l.isra.0+0x3a>
 8002636:	260a      	movs	r6, #10
 8002638:	e7a9      	b.n	800258e <_strtol_l.isra.0+0x4a>
	...

0800263c <strtol>:
 800263c:	4b08      	ldr	r3, [pc, #32]	; (8002660 <strtol+0x24>)
 800263e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002640:	681c      	ldr	r4, [r3, #0]
 8002642:	4d08      	ldr	r5, [pc, #32]	; (8002664 <strtol+0x28>)
 8002644:	6a23      	ldr	r3, [r4, #32]
 8002646:	2b00      	cmp	r3, #0
 8002648:	bf08      	it	eq
 800264a:	462b      	moveq	r3, r5
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	4613      	mov	r3, r2
 8002650:	460a      	mov	r2, r1
 8002652:	4601      	mov	r1, r0
 8002654:	4620      	mov	r0, r4
 8002656:	f7ff ff75 	bl	8002544 <_strtol_l.isra.0>
 800265a:	b003      	add	sp, #12
 800265c:	bd30      	pop	{r4, r5, pc}
 800265e:	bf00      	nop
 8002660:	20000010 	.word	0x20000010
 8002664:	20000074 	.word	0x20000074

08002668 <__locale_ctype_ptr_l>:
 8002668:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800266c:	4770      	bx	lr

0800266e <__ascii_mbtowc>:
 800266e:	b082      	sub	sp, #8
 8002670:	b901      	cbnz	r1, 8002674 <__ascii_mbtowc+0x6>
 8002672:	a901      	add	r1, sp, #4
 8002674:	b142      	cbz	r2, 8002688 <__ascii_mbtowc+0x1a>
 8002676:	b14b      	cbz	r3, 800268c <__ascii_mbtowc+0x1e>
 8002678:	7813      	ldrb	r3, [r2, #0]
 800267a:	600b      	str	r3, [r1, #0]
 800267c:	7812      	ldrb	r2, [r2, #0]
 800267e:	1c10      	adds	r0, r2, #0
 8002680:	bf18      	it	ne
 8002682:	2001      	movne	r0, #1
 8002684:	b002      	add	sp, #8
 8002686:	4770      	bx	lr
 8002688:	4610      	mov	r0, r2
 800268a:	e7fb      	b.n	8002684 <__ascii_mbtowc+0x16>
 800268c:	f06f 0001 	mvn.w	r0, #1
 8002690:	e7f8      	b.n	8002684 <__ascii_mbtowc+0x16>

08002692 <__ssputs_r>:
 8002692:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002696:	688e      	ldr	r6, [r1, #8]
 8002698:	4682      	mov	sl, r0
 800269a:	429e      	cmp	r6, r3
 800269c:	460c      	mov	r4, r1
 800269e:	4690      	mov	r8, r2
 80026a0:	4699      	mov	r9, r3
 80026a2:	d837      	bhi.n	8002714 <__ssputs_r+0x82>
 80026a4:	898a      	ldrh	r2, [r1, #12]
 80026a6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80026aa:	d031      	beq.n	8002710 <__ssputs_r+0x7e>
 80026ac:	2302      	movs	r3, #2
 80026ae:	6825      	ldr	r5, [r4, #0]
 80026b0:	6909      	ldr	r1, [r1, #16]
 80026b2:	1a6f      	subs	r7, r5, r1
 80026b4:	6965      	ldr	r5, [r4, #20]
 80026b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80026ba:	fb95 f5f3 	sdiv	r5, r5, r3
 80026be:	f109 0301 	add.w	r3, r9, #1
 80026c2:	443b      	add	r3, r7
 80026c4:	429d      	cmp	r5, r3
 80026c6:	bf38      	it	cc
 80026c8:	461d      	movcc	r5, r3
 80026ca:	0553      	lsls	r3, r2, #21
 80026cc:	d530      	bpl.n	8002730 <__ssputs_r+0x9e>
 80026ce:	4629      	mov	r1, r5
 80026d0:	f000 fb46 	bl	8002d60 <_malloc_r>
 80026d4:	4606      	mov	r6, r0
 80026d6:	b950      	cbnz	r0, 80026ee <__ssputs_r+0x5c>
 80026d8:	230c      	movs	r3, #12
 80026da:	f04f 30ff 	mov.w	r0, #4294967295
 80026de:	f8ca 3000 	str.w	r3, [sl]
 80026e2:	89a3      	ldrh	r3, [r4, #12]
 80026e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026e8:	81a3      	strh	r3, [r4, #12]
 80026ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80026ee:	463a      	mov	r2, r7
 80026f0:	6921      	ldr	r1, [r4, #16]
 80026f2:	f000 fac4 	bl	8002c7e <memcpy>
 80026f6:	89a3      	ldrh	r3, [r4, #12]
 80026f8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80026fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002700:	81a3      	strh	r3, [r4, #12]
 8002702:	6126      	str	r6, [r4, #16]
 8002704:	443e      	add	r6, r7
 8002706:	6026      	str	r6, [r4, #0]
 8002708:	464e      	mov	r6, r9
 800270a:	6165      	str	r5, [r4, #20]
 800270c:	1bed      	subs	r5, r5, r7
 800270e:	60a5      	str	r5, [r4, #8]
 8002710:	454e      	cmp	r6, r9
 8002712:	d900      	bls.n	8002716 <__ssputs_r+0x84>
 8002714:	464e      	mov	r6, r9
 8002716:	4632      	mov	r2, r6
 8002718:	4641      	mov	r1, r8
 800271a:	6820      	ldr	r0, [r4, #0]
 800271c:	f000 faba 	bl	8002c94 <memmove>
 8002720:	68a3      	ldr	r3, [r4, #8]
 8002722:	2000      	movs	r0, #0
 8002724:	1b9b      	subs	r3, r3, r6
 8002726:	60a3      	str	r3, [r4, #8]
 8002728:	6823      	ldr	r3, [r4, #0]
 800272a:	441e      	add	r6, r3
 800272c:	6026      	str	r6, [r4, #0]
 800272e:	e7dc      	b.n	80026ea <__ssputs_r+0x58>
 8002730:	462a      	mov	r2, r5
 8002732:	f000 fb6f 	bl	8002e14 <_realloc_r>
 8002736:	4606      	mov	r6, r0
 8002738:	2800      	cmp	r0, #0
 800273a:	d1e2      	bne.n	8002702 <__ssputs_r+0x70>
 800273c:	6921      	ldr	r1, [r4, #16]
 800273e:	4650      	mov	r0, sl
 8002740:	f000 fac2 	bl	8002cc8 <_free_r>
 8002744:	e7c8      	b.n	80026d8 <__ssputs_r+0x46>
	...

08002748 <_svfiprintf_r>:
 8002748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800274c:	461d      	mov	r5, r3
 800274e:	898b      	ldrh	r3, [r1, #12]
 8002750:	b09d      	sub	sp, #116	; 0x74
 8002752:	061f      	lsls	r7, r3, #24
 8002754:	4680      	mov	r8, r0
 8002756:	460c      	mov	r4, r1
 8002758:	4616      	mov	r6, r2
 800275a:	d50f      	bpl.n	800277c <_svfiprintf_r+0x34>
 800275c:	690b      	ldr	r3, [r1, #16]
 800275e:	b96b      	cbnz	r3, 800277c <_svfiprintf_r+0x34>
 8002760:	2140      	movs	r1, #64	; 0x40
 8002762:	f000 fafd 	bl	8002d60 <_malloc_r>
 8002766:	6020      	str	r0, [r4, #0]
 8002768:	6120      	str	r0, [r4, #16]
 800276a:	b928      	cbnz	r0, 8002778 <_svfiprintf_r+0x30>
 800276c:	230c      	movs	r3, #12
 800276e:	f8c8 3000 	str.w	r3, [r8]
 8002772:	f04f 30ff 	mov.w	r0, #4294967295
 8002776:	e0c8      	b.n	800290a <_svfiprintf_r+0x1c2>
 8002778:	2340      	movs	r3, #64	; 0x40
 800277a:	6163      	str	r3, [r4, #20]
 800277c:	2300      	movs	r3, #0
 800277e:	9309      	str	r3, [sp, #36]	; 0x24
 8002780:	2320      	movs	r3, #32
 8002782:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002786:	2330      	movs	r3, #48	; 0x30
 8002788:	f04f 0b01 	mov.w	fp, #1
 800278c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002790:	9503      	str	r5, [sp, #12]
 8002792:	4637      	mov	r7, r6
 8002794:	463d      	mov	r5, r7
 8002796:	f815 3b01 	ldrb.w	r3, [r5], #1
 800279a:	b10b      	cbz	r3, 80027a0 <_svfiprintf_r+0x58>
 800279c:	2b25      	cmp	r3, #37	; 0x25
 800279e:	d13e      	bne.n	800281e <_svfiprintf_r+0xd6>
 80027a0:	ebb7 0a06 	subs.w	sl, r7, r6
 80027a4:	d00b      	beq.n	80027be <_svfiprintf_r+0x76>
 80027a6:	4653      	mov	r3, sl
 80027a8:	4632      	mov	r2, r6
 80027aa:	4621      	mov	r1, r4
 80027ac:	4640      	mov	r0, r8
 80027ae:	f7ff ff70 	bl	8002692 <__ssputs_r>
 80027b2:	3001      	adds	r0, #1
 80027b4:	f000 80a4 	beq.w	8002900 <_svfiprintf_r+0x1b8>
 80027b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80027ba:	4453      	add	r3, sl
 80027bc:	9309      	str	r3, [sp, #36]	; 0x24
 80027be:	783b      	ldrb	r3, [r7, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	f000 809d 	beq.w	8002900 <_svfiprintf_r+0x1b8>
 80027c6:	2300      	movs	r3, #0
 80027c8:	f04f 32ff 	mov.w	r2, #4294967295
 80027cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80027d0:	9304      	str	r3, [sp, #16]
 80027d2:	9307      	str	r3, [sp, #28]
 80027d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80027d8:	931a      	str	r3, [sp, #104]	; 0x68
 80027da:	462f      	mov	r7, r5
 80027dc:	2205      	movs	r2, #5
 80027de:	f817 1b01 	ldrb.w	r1, [r7], #1
 80027e2:	4850      	ldr	r0, [pc, #320]	; (8002924 <_svfiprintf_r+0x1dc>)
 80027e4:	f000 fa3d 	bl	8002c62 <memchr>
 80027e8:	9b04      	ldr	r3, [sp, #16]
 80027ea:	b9d0      	cbnz	r0, 8002822 <_svfiprintf_r+0xda>
 80027ec:	06d9      	lsls	r1, r3, #27
 80027ee:	bf44      	itt	mi
 80027f0:	2220      	movmi	r2, #32
 80027f2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80027f6:	071a      	lsls	r2, r3, #28
 80027f8:	bf44      	itt	mi
 80027fa:	222b      	movmi	r2, #43	; 0x2b
 80027fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002800:	782a      	ldrb	r2, [r5, #0]
 8002802:	2a2a      	cmp	r2, #42	; 0x2a
 8002804:	d015      	beq.n	8002832 <_svfiprintf_r+0xea>
 8002806:	462f      	mov	r7, r5
 8002808:	2000      	movs	r0, #0
 800280a:	250a      	movs	r5, #10
 800280c:	9a07      	ldr	r2, [sp, #28]
 800280e:	4639      	mov	r1, r7
 8002810:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002814:	3b30      	subs	r3, #48	; 0x30
 8002816:	2b09      	cmp	r3, #9
 8002818:	d94d      	bls.n	80028b6 <_svfiprintf_r+0x16e>
 800281a:	b1b8      	cbz	r0, 800284c <_svfiprintf_r+0x104>
 800281c:	e00f      	b.n	800283e <_svfiprintf_r+0xf6>
 800281e:	462f      	mov	r7, r5
 8002820:	e7b8      	b.n	8002794 <_svfiprintf_r+0x4c>
 8002822:	4a40      	ldr	r2, [pc, #256]	; (8002924 <_svfiprintf_r+0x1dc>)
 8002824:	463d      	mov	r5, r7
 8002826:	1a80      	subs	r0, r0, r2
 8002828:	fa0b f000 	lsl.w	r0, fp, r0
 800282c:	4318      	orrs	r0, r3
 800282e:	9004      	str	r0, [sp, #16]
 8002830:	e7d3      	b.n	80027da <_svfiprintf_r+0x92>
 8002832:	9a03      	ldr	r2, [sp, #12]
 8002834:	1d11      	adds	r1, r2, #4
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	9103      	str	r1, [sp, #12]
 800283a:	2a00      	cmp	r2, #0
 800283c:	db01      	blt.n	8002842 <_svfiprintf_r+0xfa>
 800283e:	9207      	str	r2, [sp, #28]
 8002840:	e004      	b.n	800284c <_svfiprintf_r+0x104>
 8002842:	4252      	negs	r2, r2
 8002844:	f043 0302 	orr.w	r3, r3, #2
 8002848:	9207      	str	r2, [sp, #28]
 800284a:	9304      	str	r3, [sp, #16]
 800284c:	783b      	ldrb	r3, [r7, #0]
 800284e:	2b2e      	cmp	r3, #46	; 0x2e
 8002850:	d10c      	bne.n	800286c <_svfiprintf_r+0x124>
 8002852:	787b      	ldrb	r3, [r7, #1]
 8002854:	2b2a      	cmp	r3, #42	; 0x2a
 8002856:	d133      	bne.n	80028c0 <_svfiprintf_r+0x178>
 8002858:	9b03      	ldr	r3, [sp, #12]
 800285a:	3702      	adds	r7, #2
 800285c:	1d1a      	adds	r2, r3, #4
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	9203      	str	r2, [sp, #12]
 8002862:	2b00      	cmp	r3, #0
 8002864:	bfb8      	it	lt
 8002866:	f04f 33ff 	movlt.w	r3, #4294967295
 800286a:	9305      	str	r3, [sp, #20]
 800286c:	4d2e      	ldr	r5, [pc, #184]	; (8002928 <_svfiprintf_r+0x1e0>)
 800286e:	2203      	movs	r2, #3
 8002870:	7839      	ldrb	r1, [r7, #0]
 8002872:	4628      	mov	r0, r5
 8002874:	f000 f9f5 	bl	8002c62 <memchr>
 8002878:	b138      	cbz	r0, 800288a <_svfiprintf_r+0x142>
 800287a:	2340      	movs	r3, #64	; 0x40
 800287c:	1b40      	subs	r0, r0, r5
 800287e:	fa03 f000 	lsl.w	r0, r3, r0
 8002882:	9b04      	ldr	r3, [sp, #16]
 8002884:	3701      	adds	r7, #1
 8002886:	4303      	orrs	r3, r0
 8002888:	9304      	str	r3, [sp, #16]
 800288a:	7839      	ldrb	r1, [r7, #0]
 800288c:	2206      	movs	r2, #6
 800288e:	4827      	ldr	r0, [pc, #156]	; (800292c <_svfiprintf_r+0x1e4>)
 8002890:	1c7e      	adds	r6, r7, #1
 8002892:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002896:	f000 f9e4 	bl	8002c62 <memchr>
 800289a:	2800      	cmp	r0, #0
 800289c:	d038      	beq.n	8002910 <_svfiprintf_r+0x1c8>
 800289e:	4b24      	ldr	r3, [pc, #144]	; (8002930 <_svfiprintf_r+0x1e8>)
 80028a0:	bb13      	cbnz	r3, 80028e8 <_svfiprintf_r+0x1a0>
 80028a2:	9b03      	ldr	r3, [sp, #12]
 80028a4:	3307      	adds	r3, #7
 80028a6:	f023 0307 	bic.w	r3, r3, #7
 80028aa:	3308      	adds	r3, #8
 80028ac:	9303      	str	r3, [sp, #12]
 80028ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028b0:	444b      	add	r3, r9
 80028b2:	9309      	str	r3, [sp, #36]	; 0x24
 80028b4:	e76d      	b.n	8002792 <_svfiprintf_r+0x4a>
 80028b6:	fb05 3202 	mla	r2, r5, r2, r3
 80028ba:	2001      	movs	r0, #1
 80028bc:	460f      	mov	r7, r1
 80028be:	e7a6      	b.n	800280e <_svfiprintf_r+0xc6>
 80028c0:	2300      	movs	r3, #0
 80028c2:	250a      	movs	r5, #10
 80028c4:	4619      	mov	r1, r3
 80028c6:	3701      	adds	r7, #1
 80028c8:	9305      	str	r3, [sp, #20]
 80028ca:	4638      	mov	r0, r7
 80028cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028d0:	3a30      	subs	r2, #48	; 0x30
 80028d2:	2a09      	cmp	r2, #9
 80028d4:	d903      	bls.n	80028de <_svfiprintf_r+0x196>
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d0c8      	beq.n	800286c <_svfiprintf_r+0x124>
 80028da:	9105      	str	r1, [sp, #20]
 80028dc:	e7c6      	b.n	800286c <_svfiprintf_r+0x124>
 80028de:	fb05 2101 	mla	r1, r5, r1, r2
 80028e2:	2301      	movs	r3, #1
 80028e4:	4607      	mov	r7, r0
 80028e6:	e7f0      	b.n	80028ca <_svfiprintf_r+0x182>
 80028e8:	ab03      	add	r3, sp, #12
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	4622      	mov	r2, r4
 80028ee:	4b11      	ldr	r3, [pc, #68]	; (8002934 <_svfiprintf_r+0x1ec>)
 80028f0:	a904      	add	r1, sp, #16
 80028f2:	4640      	mov	r0, r8
 80028f4:	f3af 8000 	nop.w
 80028f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80028fc:	4681      	mov	r9, r0
 80028fe:	d1d6      	bne.n	80028ae <_svfiprintf_r+0x166>
 8002900:	89a3      	ldrh	r3, [r4, #12]
 8002902:	065b      	lsls	r3, r3, #25
 8002904:	f53f af35 	bmi.w	8002772 <_svfiprintf_r+0x2a>
 8002908:	9809      	ldr	r0, [sp, #36]	; 0x24
 800290a:	b01d      	add	sp, #116	; 0x74
 800290c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002910:	ab03      	add	r3, sp, #12
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	4622      	mov	r2, r4
 8002916:	4b07      	ldr	r3, [pc, #28]	; (8002934 <_svfiprintf_r+0x1ec>)
 8002918:	a904      	add	r1, sp, #16
 800291a:	4640      	mov	r0, r8
 800291c:	f000 f882 	bl	8002a24 <_printf_i>
 8002920:	e7ea      	b.n	80028f8 <_svfiprintf_r+0x1b0>
 8002922:	bf00      	nop
 8002924:	08002fee 	.word	0x08002fee
 8002928:	08002ff4 	.word	0x08002ff4
 800292c:	08002ff8 	.word	0x08002ff8
 8002930:	00000000 	.word	0x00000000
 8002934:	08002693 	.word	0x08002693

08002938 <_printf_common>:
 8002938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800293c:	4691      	mov	r9, r2
 800293e:	461f      	mov	r7, r3
 8002940:	688a      	ldr	r2, [r1, #8]
 8002942:	690b      	ldr	r3, [r1, #16]
 8002944:	4606      	mov	r6, r0
 8002946:	4293      	cmp	r3, r2
 8002948:	bfb8      	it	lt
 800294a:	4613      	movlt	r3, r2
 800294c:	f8c9 3000 	str.w	r3, [r9]
 8002950:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002954:	460c      	mov	r4, r1
 8002956:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800295a:	b112      	cbz	r2, 8002962 <_printf_common+0x2a>
 800295c:	3301      	adds	r3, #1
 800295e:	f8c9 3000 	str.w	r3, [r9]
 8002962:	6823      	ldr	r3, [r4, #0]
 8002964:	0699      	lsls	r1, r3, #26
 8002966:	bf42      	ittt	mi
 8002968:	f8d9 3000 	ldrmi.w	r3, [r9]
 800296c:	3302      	addmi	r3, #2
 800296e:	f8c9 3000 	strmi.w	r3, [r9]
 8002972:	6825      	ldr	r5, [r4, #0]
 8002974:	f015 0506 	ands.w	r5, r5, #6
 8002978:	d107      	bne.n	800298a <_printf_common+0x52>
 800297a:	f104 0a19 	add.w	sl, r4, #25
 800297e:	68e3      	ldr	r3, [r4, #12]
 8002980:	f8d9 2000 	ldr.w	r2, [r9]
 8002984:	1a9b      	subs	r3, r3, r2
 8002986:	42ab      	cmp	r3, r5
 8002988:	dc29      	bgt.n	80029de <_printf_common+0xa6>
 800298a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800298e:	6822      	ldr	r2, [r4, #0]
 8002990:	3300      	adds	r3, #0
 8002992:	bf18      	it	ne
 8002994:	2301      	movne	r3, #1
 8002996:	0692      	lsls	r2, r2, #26
 8002998:	d42e      	bmi.n	80029f8 <_printf_common+0xc0>
 800299a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800299e:	4639      	mov	r1, r7
 80029a0:	4630      	mov	r0, r6
 80029a2:	47c0      	blx	r8
 80029a4:	3001      	adds	r0, #1
 80029a6:	d021      	beq.n	80029ec <_printf_common+0xb4>
 80029a8:	6823      	ldr	r3, [r4, #0]
 80029aa:	68e5      	ldr	r5, [r4, #12]
 80029ac:	f003 0306 	and.w	r3, r3, #6
 80029b0:	2b04      	cmp	r3, #4
 80029b2:	bf18      	it	ne
 80029b4:	2500      	movne	r5, #0
 80029b6:	f8d9 2000 	ldr.w	r2, [r9]
 80029ba:	f04f 0900 	mov.w	r9, #0
 80029be:	bf08      	it	eq
 80029c0:	1aad      	subeq	r5, r5, r2
 80029c2:	68a3      	ldr	r3, [r4, #8]
 80029c4:	6922      	ldr	r2, [r4, #16]
 80029c6:	bf08      	it	eq
 80029c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80029cc:	4293      	cmp	r3, r2
 80029ce:	bfc4      	itt	gt
 80029d0:	1a9b      	subgt	r3, r3, r2
 80029d2:	18ed      	addgt	r5, r5, r3
 80029d4:	341a      	adds	r4, #26
 80029d6:	454d      	cmp	r5, r9
 80029d8:	d11a      	bne.n	8002a10 <_printf_common+0xd8>
 80029da:	2000      	movs	r0, #0
 80029dc:	e008      	b.n	80029f0 <_printf_common+0xb8>
 80029de:	2301      	movs	r3, #1
 80029e0:	4652      	mov	r2, sl
 80029e2:	4639      	mov	r1, r7
 80029e4:	4630      	mov	r0, r6
 80029e6:	47c0      	blx	r8
 80029e8:	3001      	adds	r0, #1
 80029ea:	d103      	bne.n	80029f4 <_printf_common+0xbc>
 80029ec:	f04f 30ff 	mov.w	r0, #4294967295
 80029f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029f4:	3501      	adds	r5, #1
 80029f6:	e7c2      	b.n	800297e <_printf_common+0x46>
 80029f8:	2030      	movs	r0, #48	; 0x30
 80029fa:	18e1      	adds	r1, r4, r3
 80029fc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002a00:	1c5a      	adds	r2, r3, #1
 8002a02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002a06:	4422      	add	r2, r4
 8002a08:	3302      	adds	r3, #2
 8002a0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002a0e:	e7c4      	b.n	800299a <_printf_common+0x62>
 8002a10:	2301      	movs	r3, #1
 8002a12:	4622      	mov	r2, r4
 8002a14:	4639      	mov	r1, r7
 8002a16:	4630      	mov	r0, r6
 8002a18:	47c0      	blx	r8
 8002a1a:	3001      	adds	r0, #1
 8002a1c:	d0e6      	beq.n	80029ec <_printf_common+0xb4>
 8002a1e:	f109 0901 	add.w	r9, r9, #1
 8002a22:	e7d8      	b.n	80029d6 <_printf_common+0x9e>

08002a24 <_printf_i>:
 8002a24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a28:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002a2c:	460c      	mov	r4, r1
 8002a2e:	7e09      	ldrb	r1, [r1, #24]
 8002a30:	b085      	sub	sp, #20
 8002a32:	296e      	cmp	r1, #110	; 0x6e
 8002a34:	4617      	mov	r7, r2
 8002a36:	4606      	mov	r6, r0
 8002a38:	4698      	mov	r8, r3
 8002a3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002a3c:	f000 80b3 	beq.w	8002ba6 <_printf_i+0x182>
 8002a40:	d822      	bhi.n	8002a88 <_printf_i+0x64>
 8002a42:	2963      	cmp	r1, #99	; 0x63
 8002a44:	d036      	beq.n	8002ab4 <_printf_i+0x90>
 8002a46:	d80a      	bhi.n	8002a5e <_printf_i+0x3a>
 8002a48:	2900      	cmp	r1, #0
 8002a4a:	f000 80b9 	beq.w	8002bc0 <_printf_i+0x19c>
 8002a4e:	2958      	cmp	r1, #88	; 0x58
 8002a50:	f000 8083 	beq.w	8002b5a <_printf_i+0x136>
 8002a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002a58:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002a5c:	e032      	b.n	8002ac4 <_printf_i+0xa0>
 8002a5e:	2964      	cmp	r1, #100	; 0x64
 8002a60:	d001      	beq.n	8002a66 <_printf_i+0x42>
 8002a62:	2969      	cmp	r1, #105	; 0x69
 8002a64:	d1f6      	bne.n	8002a54 <_printf_i+0x30>
 8002a66:	6820      	ldr	r0, [r4, #0]
 8002a68:	6813      	ldr	r3, [r2, #0]
 8002a6a:	0605      	lsls	r5, r0, #24
 8002a6c:	f103 0104 	add.w	r1, r3, #4
 8002a70:	d52a      	bpl.n	8002ac8 <_printf_i+0xa4>
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6011      	str	r1, [r2, #0]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	da03      	bge.n	8002a82 <_printf_i+0x5e>
 8002a7a:	222d      	movs	r2, #45	; 0x2d
 8002a7c:	425b      	negs	r3, r3
 8002a7e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002a82:	486f      	ldr	r0, [pc, #444]	; (8002c40 <_printf_i+0x21c>)
 8002a84:	220a      	movs	r2, #10
 8002a86:	e039      	b.n	8002afc <_printf_i+0xd8>
 8002a88:	2973      	cmp	r1, #115	; 0x73
 8002a8a:	f000 809d 	beq.w	8002bc8 <_printf_i+0x1a4>
 8002a8e:	d808      	bhi.n	8002aa2 <_printf_i+0x7e>
 8002a90:	296f      	cmp	r1, #111	; 0x6f
 8002a92:	d020      	beq.n	8002ad6 <_printf_i+0xb2>
 8002a94:	2970      	cmp	r1, #112	; 0x70
 8002a96:	d1dd      	bne.n	8002a54 <_printf_i+0x30>
 8002a98:	6823      	ldr	r3, [r4, #0]
 8002a9a:	f043 0320 	orr.w	r3, r3, #32
 8002a9e:	6023      	str	r3, [r4, #0]
 8002aa0:	e003      	b.n	8002aaa <_printf_i+0x86>
 8002aa2:	2975      	cmp	r1, #117	; 0x75
 8002aa4:	d017      	beq.n	8002ad6 <_printf_i+0xb2>
 8002aa6:	2978      	cmp	r1, #120	; 0x78
 8002aa8:	d1d4      	bne.n	8002a54 <_printf_i+0x30>
 8002aaa:	2378      	movs	r3, #120	; 0x78
 8002aac:	4865      	ldr	r0, [pc, #404]	; (8002c44 <_printf_i+0x220>)
 8002aae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002ab2:	e055      	b.n	8002b60 <_printf_i+0x13c>
 8002ab4:	6813      	ldr	r3, [r2, #0]
 8002ab6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002aba:	1d19      	adds	r1, r3, #4
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	6011      	str	r1, [r2, #0]
 8002ac0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e08c      	b.n	8002be2 <_printf_i+0x1be>
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ace:	6011      	str	r1, [r2, #0]
 8002ad0:	bf18      	it	ne
 8002ad2:	b21b      	sxthne	r3, r3
 8002ad4:	e7cf      	b.n	8002a76 <_printf_i+0x52>
 8002ad6:	6813      	ldr	r3, [r2, #0]
 8002ad8:	6825      	ldr	r5, [r4, #0]
 8002ada:	1d18      	adds	r0, r3, #4
 8002adc:	6010      	str	r0, [r2, #0]
 8002ade:	0628      	lsls	r0, r5, #24
 8002ae0:	d501      	bpl.n	8002ae6 <_printf_i+0xc2>
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	e002      	b.n	8002aec <_printf_i+0xc8>
 8002ae6:	0668      	lsls	r0, r5, #25
 8002ae8:	d5fb      	bpl.n	8002ae2 <_printf_i+0xbe>
 8002aea:	881b      	ldrh	r3, [r3, #0]
 8002aec:	296f      	cmp	r1, #111	; 0x6f
 8002aee:	bf14      	ite	ne
 8002af0:	220a      	movne	r2, #10
 8002af2:	2208      	moveq	r2, #8
 8002af4:	4852      	ldr	r0, [pc, #328]	; (8002c40 <_printf_i+0x21c>)
 8002af6:	2100      	movs	r1, #0
 8002af8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002afc:	6865      	ldr	r5, [r4, #4]
 8002afe:	2d00      	cmp	r5, #0
 8002b00:	60a5      	str	r5, [r4, #8]
 8002b02:	f2c0 8095 	blt.w	8002c30 <_printf_i+0x20c>
 8002b06:	6821      	ldr	r1, [r4, #0]
 8002b08:	f021 0104 	bic.w	r1, r1, #4
 8002b0c:	6021      	str	r1, [r4, #0]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d13d      	bne.n	8002b8e <_printf_i+0x16a>
 8002b12:	2d00      	cmp	r5, #0
 8002b14:	f040 808e 	bne.w	8002c34 <_printf_i+0x210>
 8002b18:	4665      	mov	r5, ip
 8002b1a:	2a08      	cmp	r2, #8
 8002b1c:	d10b      	bne.n	8002b36 <_printf_i+0x112>
 8002b1e:	6823      	ldr	r3, [r4, #0]
 8002b20:	07db      	lsls	r3, r3, #31
 8002b22:	d508      	bpl.n	8002b36 <_printf_i+0x112>
 8002b24:	6923      	ldr	r3, [r4, #16]
 8002b26:	6862      	ldr	r2, [r4, #4]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	bfde      	ittt	le
 8002b2c:	2330      	movle	r3, #48	; 0x30
 8002b2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002b32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002b36:	ebac 0305 	sub.w	r3, ip, r5
 8002b3a:	6123      	str	r3, [r4, #16]
 8002b3c:	f8cd 8000 	str.w	r8, [sp]
 8002b40:	463b      	mov	r3, r7
 8002b42:	aa03      	add	r2, sp, #12
 8002b44:	4621      	mov	r1, r4
 8002b46:	4630      	mov	r0, r6
 8002b48:	f7ff fef6 	bl	8002938 <_printf_common>
 8002b4c:	3001      	adds	r0, #1
 8002b4e:	d14d      	bne.n	8002bec <_printf_i+0x1c8>
 8002b50:	f04f 30ff 	mov.w	r0, #4294967295
 8002b54:	b005      	add	sp, #20
 8002b56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b5a:	4839      	ldr	r0, [pc, #228]	; (8002c40 <_printf_i+0x21c>)
 8002b5c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002b60:	6813      	ldr	r3, [r2, #0]
 8002b62:	6821      	ldr	r1, [r4, #0]
 8002b64:	1d1d      	adds	r5, r3, #4
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6015      	str	r5, [r2, #0]
 8002b6a:	060a      	lsls	r2, r1, #24
 8002b6c:	d50b      	bpl.n	8002b86 <_printf_i+0x162>
 8002b6e:	07ca      	lsls	r2, r1, #31
 8002b70:	bf44      	itt	mi
 8002b72:	f041 0120 	orrmi.w	r1, r1, #32
 8002b76:	6021      	strmi	r1, [r4, #0]
 8002b78:	b91b      	cbnz	r3, 8002b82 <_printf_i+0x15e>
 8002b7a:	6822      	ldr	r2, [r4, #0]
 8002b7c:	f022 0220 	bic.w	r2, r2, #32
 8002b80:	6022      	str	r2, [r4, #0]
 8002b82:	2210      	movs	r2, #16
 8002b84:	e7b7      	b.n	8002af6 <_printf_i+0xd2>
 8002b86:	064d      	lsls	r5, r1, #25
 8002b88:	bf48      	it	mi
 8002b8a:	b29b      	uxthmi	r3, r3
 8002b8c:	e7ef      	b.n	8002b6e <_printf_i+0x14a>
 8002b8e:	4665      	mov	r5, ip
 8002b90:	fbb3 f1f2 	udiv	r1, r3, r2
 8002b94:	fb02 3311 	mls	r3, r2, r1, r3
 8002b98:	5cc3      	ldrb	r3, [r0, r3]
 8002b9a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002b9e:	460b      	mov	r3, r1
 8002ba0:	2900      	cmp	r1, #0
 8002ba2:	d1f5      	bne.n	8002b90 <_printf_i+0x16c>
 8002ba4:	e7b9      	b.n	8002b1a <_printf_i+0xf6>
 8002ba6:	6813      	ldr	r3, [r2, #0]
 8002ba8:	6825      	ldr	r5, [r4, #0]
 8002baa:	1d18      	adds	r0, r3, #4
 8002bac:	6961      	ldr	r1, [r4, #20]
 8002bae:	6010      	str	r0, [r2, #0]
 8002bb0:	0628      	lsls	r0, r5, #24
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	d501      	bpl.n	8002bba <_printf_i+0x196>
 8002bb6:	6019      	str	r1, [r3, #0]
 8002bb8:	e002      	b.n	8002bc0 <_printf_i+0x19c>
 8002bba:	066a      	lsls	r2, r5, #25
 8002bbc:	d5fb      	bpl.n	8002bb6 <_printf_i+0x192>
 8002bbe:	8019      	strh	r1, [r3, #0]
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	4665      	mov	r5, ip
 8002bc4:	6123      	str	r3, [r4, #16]
 8002bc6:	e7b9      	b.n	8002b3c <_printf_i+0x118>
 8002bc8:	6813      	ldr	r3, [r2, #0]
 8002bca:	1d19      	adds	r1, r3, #4
 8002bcc:	6011      	str	r1, [r2, #0]
 8002bce:	681d      	ldr	r5, [r3, #0]
 8002bd0:	6862      	ldr	r2, [r4, #4]
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	4628      	mov	r0, r5
 8002bd6:	f000 f844 	bl	8002c62 <memchr>
 8002bda:	b108      	cbz	r0, 8002be0 <_printf_i+0x1bc>
 8002bdc:	1b40      	subs	r0, r0, r5
 8002bde:	6060      	str	r0, [r4, #4]
 8002be0:	6863      	ldr	r3, [r4, #4]
 8002be2:	6123      	str	r3, [r4, #16]
 8002be4:	2300      	movs	r3, #0
 8002be6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002bea:	e7a7      	b.n	8002b3c <_printf_i+0x118>
 8002bec:	6923      	ldr	r3, [r4, #16]
 8002bee:	462a      	mov	r2, r5
 8002bf0:	4639      	mov	r1, r7
 8002bf2:	4630      	mov	r0, r6
 8002bf4:	47c0      	blx	r8
 8002bf6:	3001      	adds	r0, #1
 8002bf8:	d0aa      	beq.n	8002b50 <_printf_i+0x12c>
 8002bfa:	6823      	ldr	r3, [r4, #0]
 8002bfc:	079b      	lsls	r3, r3, #30
 8002bfe:	d413      	bmi.n	8002c28 <_printf_i+0x204>
 8002c00:	68e0      	ldr	r0, [r4, #12]
 8002c02:	9b03      	ldr	r3, [sp, #12]
 8002c04:	4298      	cmp	r0, r3
 8002c06:	bfb8      	it	lt
 8002c08:	4618      	movlt	r0, r3
 8002c0a:	e7a3      	b.n	8002b54 <_printf_i+0x130>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	464a      	mov	r2, r9
 8002c10:	4639      	mov	r1, r7
 8002c12:	4630      	mov	r0, r6
 8002c14:	47c0      	blx	r8
 8002c16:	3001      	adds	r0, #1
 8002c18:	d09a      	beq.n	8002b50 <_printf_i+0x12c>
 8002c1a:	3501      	adds	r5, #1
 8002c1c:	68e3      	ldr	r3, [r4, #12]
 8002c1e:	9a03      	ldr	r2, [sp, #12]
 8002c20:	1a9b      	subs	r3, r3, r2
 8002c22:	42ab      	cmp	r3, r5
 8002c24:	dcf2      	bgt.n	8002c0c <_printf_i+0x1e8>
 8002c26:	e7eb      	b.n	8002c00 <_printf_i+0x1dc>
 8002c28:	2500      	movs	r5, #0
 8002c2a:	f104 0919 	add.w	r9, r4, #25
 8002c2e:	e7f5      	b.n	8002c1c <_printf_i+0x1f8>
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1ac      	bne.n	8002b8e <_printf_i+0x16a>
 8002c34:	7803      	ldrb	r3, [r0, #0]
 8002c36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c3e:	e76c      	b.n	8002b1a <_printf_i+0xf6>
 8002c40:	08002fff 	.word	0x08002fff
 8002c44:	08003010 	.word	0x08003010

08002c48 <__ascii_wctomb>:
 8002c48:	b149      	cbz	r1, 8002c5e <__ascii_wctomb+0x16>
 8002c4a:	2aff      	cmp	r2, #255	; 0xff
 8002c4c:	bf8b      	itete	hi
 8002c4e:	238a      	movhi	r3, #138	; 0x8a
 8002c50:	700a      	strbls	r2, [r1, #0]
 8002c52:	6003      	strhi	r3, [r0, #0]
 8002c54:	2001      	movls	r0, #1
 8002c56:	bf88      	it	hi
 8002c58:	f04f 30ff 	movhi.w	r0, #4294967295
 8002c5c:	4770      	bx	lr
 8002c5e:	4608      	mov	r0, r1
 8002c60:	4770      	bx	lr

08002c62 <memchr>:
 8002c62:	b510      	push	{r4, lr}
 8002c64:	b2c9      	uxtb	r1, r1
 8002c66:	4402      	add	r2, r0
 8002c68:	4290      	cmp	r0, r2
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	d101      	bne.n	8002c72 <memchr+0x10>
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e003      	b.n	8002c7a <memchr+0x18>
 8002c72:	781c      	ldrb	r4, [r3, #0]
 8002c74:	3001      	adds	r0, #1
 8002c76:	428c      	cmp	r4, r1
 8002c78:	d1f6      	bne.n	8002c68 <memchr+0x6>
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	bd10      	pop	{r4, pc}

08002c7e <memcpy>:
 8002c7e:	b510      	push	{r4, lr}
 8002c80:	1e43      	subs	r3, r0, #1
 8002c82:	440a      	add	r2, r1
 8002c84:	4291      	cmp	r1, r2
 8002c86:	d100      	bne.n	8002c8a <memcpy+0xc>
 8002c88:	bd10      	pop	{r4, pc}
 8002c8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c92:	e7f7      	b.n	8002c84 <memcpy+0x6>

08002c94 <memmove>:
 8002c94:	4288      	cmp	r0, r1
 8002c96:	b510      	push	{r4, lr}
 8002c98:	eb01 0302 	add.w	r3, r1, r2
 8002c9c:	d807      	bhi.n	8002cae <memmove+0x1a>
 8002c9e:	1e42      	subs	r2, r0, #1
 8002ca0:	4299      	cmp	r1, r3
 8002ca2:	d00a      	beq.n	8002cba <memmove+0x26>
 8002ca4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002ca8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002cac:	e7f8      	b.n	8002ca0 <memmove+0xc>
 8002cae:	4283      	cmp	r3, r0
 8002cb0:	d9f5      	bls.n	8002c9e <memmove+0xa>
 8002cb2:	1881      	adds	r1, r0, r2
 8002cb4:	1ad2      	subs	r2, r2, r3
 8002cb6:	42d3      	cmn	r3, r2
 8002cb8:	d100      	bne.n	8002cbc <memmove+0x28>
 8002cba:	bd10      	pop	{r4, pc}
 8002cbc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002cc0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002cc4:	e7f7      	b.n	8002cb6 <memmove+0x22>
	...

08002cc8 <_free_r>:
 8002cc8:	b538      	push	{r3, r4, r5, lr}
 8002cca:	4605      	mov	r5, r0
 8002ccc:	2900      	cmp	r1, #0
 8002cce:	d043      	beq.n	8002d58 <_free_r+0x90>
 8002cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002cd4:	1f0c      	subs	r4, r1, #4
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	bfb8      	it	lt
 8002cda:	18e4      	addlt	r4, r4, r3
 8002cdc:	f000 f8d0 	bl	8002e80 <__malloc_lock>
 8002ce0:	4a1e      	ldr	r2, [pc, #120]	; (8002d5c <_free_r+0x94>)
 8002ce2:	6813      	ldr	r3, [r2, #0]
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	b933      	cbnz	r3, 8002cf6 <_free_r+0x2e>
 8002ce8:	6063      	str	r3, [r4, #4]
 8002cea:	6014      	str	r4, [r2, #0]
 8002cec:	4628      	mov	r0, r5
 8002cee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cf2:	f000 b8c6 	b.w	8002e82 <__malloc_unlock>
 8002cf6:	42a3      	cmp	r3, r4
 8002cf8:	d90b      	bls.n	8002d12 <_free_r+0x4a>
 8002cfa:	6821      	ldr	r1, [r4, #0]
 8002cfc:	1862      	adds	r2, r4, r1
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	bf01      	itttt	eq
 8002d02:	681a      	ldreq	r2, [r3, #0]
 8002d04:	685b      	ldreq	r3, [r3, #4]
 8002d06:	1852      	addeq	r2, r2, r1
 8002d08:	6022      	streq	r2, [r4, #0]
 8002d0a:	6063      	str	r3, [r4, #4]
 8002d0c:	6004      	str	r4, [r0, #0]
 8002d0e:	e7ed      	b.n	8002cec <_free_r+0x24>
 8002d10:	4613      	mov	r3, r2
 8002d12:	685a      	ldr	r2, [r3, #4]
 8002d14:	b10a      	cbz	r2, 8002d1a <_free_r+0x52>
 8002d16:	42a2      	cmp	r2, r4
 8002d18:	d9fa      	bls.n	8002d10 <_free_r+0x48>
 8002d1a:	6819      	ldr	r1, [r3, #0]
 8002d1c:	1858      	adds	r0, r3, r1
 8002d1e:	42a0      	cmp	r0, r4
 8002d20:	d10b      	bne.n	8002d3a <_free_r+0x72>
 8002d22:	6820      	ldr	r0, [r4, #0]
 8002d24:	4401      	add	r1, r0
 8002d26:	1858      	adds	r0, r3, r1
 8002d28:	4282      	cmp	r2, r0
 8002d2a:	6019      	str	r1, [r3, #0]
 8002d2c:	d1de      	bne.n	8002cec <_free_r+0x24>
 8002d2e:	6810      	ldr	r0, [r2, #0]
 8002d30:	6852      	ldr	r2, [r2, #4]
 8002d32:	4401      	add	r1, r0
 8002d34:	6019      	str	r1, [r3, #0]
 8002d36:	605a      	str	r2, [r3, #4]
 8002d38:	e7d8      	b.n	8002cec <_free_r+0x24>
 8002d3a:	d902      	bls.n	8002d42 <_free_r+0x7a>
 8002d3c:	230c      	movs	r3, #12
 8002d3e:	602b      	str	r3, [r5, #0]
 8002d40:	e7d4      	b.n	8002cec <_free_r+0x24>
 8002d42:	6820      	ldr	r0, [r4, #0]
 8002d44:	1821      	adds	r1, r4, r0
 8002d46:	428a      	cmp	r2, r1
 8002d48:	bf01      	itttt	eq
 8002d4a:	6811      	ldreq	r1, [r2, #0]
 8002d4c:	6852      	ldreq	r2, [r2, #4]
 8002d4e:	1809      	addeq	r1, r1, r0
 8002d50:	6021      	streq	r1, [r4, #0]
 8002d52:	6062      	str	r2, [r4, #4]
 8002d54:	605c      	str	r4, [r3, #4]
 8002d56:	e7c9      	b.n	8002cec <_free_r+0x24>
 8002d58:	bd38      	pop	{r3, r4, r5, pc}
 8002d5a:	bf00      	nop
 8002d5c:	20000200 	.word	0x20000200

08002d60 <_malloc_r>:
 8002d60:	b570      	push	{r4, r5, r6, lr}
 8002d62:	1ccd      	adds	r5, r1, #3
 8002d64:	f025 0503 	bic.w	r5, r5, #3
 8002d68:	3508      	adds	r5, #8
 8002d6a:	2d0c      	cmp	r5, #12
 8002d6c:	bf38      	it	cc
 8002d6e:	250c      	movcc	r5, #12
 8002d70:	2d00      	cmp	r5, #0
 8002d72:	4606      	mov	r6, r0
 8002d74:	db01      	blt.n	8002d7a <_malloc_r+0x1a>
 8002d76:	42a9      	cmp	r1, r5
 8002d78:	d903      	bls.n	8002d82 <_malloc_r+0x22>
 8002d7a:	230c      	movs	r3, #12
 8002d7c:	6033      	str	r3, [r6, #0]
 8002d7e:	2000      	movs	r0, #0
 8002d80:	bd70      	pop	{r4, r5, r6, pc}
 8002d82:	f000 f87d 	bl	8002e80 <__malloc_lock>
 8002d86:	4a21      	ldr	r2, [pc, #132]	; (8002e0c <_malloc_r+0xac>)
 8002d88:	6814      	ldr	r4, [r2, #0]
 8002d8a:	4621      	mov	r1, r4
 8002d8c:	b991      	cbnz	r1, 8002db4 <_malloc_r+0x54>
 8002d8e:	4c20      	ldr	r4, [pc, #128]	; (8002e10 <_malloc_r+0xb0>)
 8002d90:	6823      	ldr	r3, [r4, #0]
 8002d92:	b91b      	cbnz	r3, 8002d9c <_malloc_r+0x3c>
 8002d94:	4630      	mov	r0, r6
 8002d96:	f000 f863 	bl	8002e60 <_sbrk_r>
 8002d9a:	6020      	str	r0, [r4, #0]
 8002d9c:	4629      	mov	r1, r5
 8002d9e:	4630      	mov	r0, r6
 8002da0:	f000 f85e 	bl	8002e60 <_sbrk_r>
 8002da4:	1c43      	adds	r3, r0, #1
 8002da6:	d124      	bne.n	8002df2 <_malloc_r+0x92>
 8002da8:	230c      	movs	r3, #12
 8002daa:	4630      	mov	r0, r6
 8002dac:	6033      	str	r3, [r6, #0]
 8002dae:	f000 f868 	bl	8002e82 <__malloc_unlock>
 8002db2:	e7e4      	b.n	8002d7e <_malloc_r+0x1e>
 8002db4:	680b      	ldr	r3, [r1, #0]
 8002db6:	1b5b      	subs	r3, r3, r5
 8002db8:	d418      	bmi.n	8002dec <_malloc_r+0x8c>
 8002dba:	2b0b      	cmp	r3, #11
 8002dbc:	d90f      	bls.n	8002dde <_malloc_r+0x7e>
 8002dbe:	600b      	str	r3, [r1, #0]
 8002dc0:	18cc      	adds	r4, r1, r3
 8002dc2:	50cd      	str	r5, [r1, r3]
 8002dc4:	4630      	mov	r0, r6
 8002dc6:	f000 f85c 	bl	8002e82 <__malloc_unlock>
 8002dca:	f104 000b 	add.w	r0, r4, #11
 8002dce:	1d23      	adds	r3, r4, #4
 8002dd0:	f020 0007 	bic.w	r0, r0, #7
 8002dd4:	1ac3      	subs	r3, r0, r3
 8002dd6:	d0d3      	beq.n	8002d80 <_malloc_r+0x20>
 8002dd8:	425a      	negs	r2, r3
 8002dda:	50e2      	str	r2, [r4, r3]
 8002ddc:	e7d0      	b.n	8002d80 <_malloc_r+0x20>
 8002dde:	684b      	ldr	r3, [r1, #4]
 8002de0:	428c      	cmp	r4, r1
 8002de2:	bf16      	itet	ne
 8002de4:	6063      	strne	r3, [r4, #4]
 8002de6:	6013      	streq	r3, [r2, #0]
 8002de8:	460c      	movne	r4, r1
 8002dea:	e7eb      	b.n	8002dc4 <_malloc_r+0x64>
 8002dec:	460c      	mov	r4, r1
 8002dee:	6849      	ldr	r1, [r1, #4]
 8002df0:	e7cc      	b.n	8002d8c <_malloc_r+0x2c>
 8002df2:	1cc4      	adds	r4, r0, #3
 8002df4:	f024 0403 	bic.w	r4, r4, #3
 8002df8:	42a0      	cmp	r0, r4
 8002dfa:	d005      	beq.n	8002e08 <_malloc_r+0xa8>
 8002dfc:	1a21      	subs	r1, r4, r0
 8002dfe:	4630      	mov	r0, r6
 8002e00:	f000 f82e 	bl	8002e60 <_sbrk_r>
 8002e04:	3001      	adds	r0, #1
 8002e06:	d0cf      	beq.n	8002da8 <_malloc_r+0x48>
 8002e08:	6025      	str	r5, [r4, #0]
 8002e0a:	e7db      	b.n	8002dc4 <_malloc_r+0x64>
 8002e0c:	20000200 	.word	0x20000200
 8002e10:	20000204 	.word	0x20000204

08002e14 <_realloc_r>:
 8002e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e16:	4607      	mov	r7, r0
 8002e18:	4614      	mov	r4, r2
 8002e1a:	460e      	mov	r6, r1
 8002e1c:	b921      	cbnz	r1, 8002e28 <_realloc_r+0x14>
 8002e1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002e22:	4611      	mov	r1, r2
 8002e24:	f7ff bf9c 	b.w	8002d60 <_malloc_r>
 8002e28:	b922      	cbnz	r2, 8002e34 <_realloc_r+0x20>
 8002e2a:	f7ff ff4d 	bl	8002cc8 <_free_r>
 8002e2e:	4625      	mov	r5, r4
 8002e30:	4628      	mov	r0, r5
 8002e32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e34:	f000 f826 	bl	8002e84 <_malloc_usable_size_r>
 8002e38:	42a0      	cmp	r0, r4
 8002e3a:	d20f      	bcs.n	8002e5c <_realloc_r+0x48>
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	4638      	mov	r0, r7
 8002e40:	f7ff ff8e 	bl	8002d60 <_malloc_r>
 8002e44:	4605      	mov	r5, r0
 8002e46:	2800      	cmp	r0, #0
 8002e48:	d0f2      	beq.n	8002e30 <_realloc_r+0x1c>
 8002e4a:	4631      	mov	r1, r6
 8002e4c:	4622      	mov	r2, r4
 8002e4e:	f7ff ff16 	bl	8002c7e <memcpy>
 8002e52:	4631      	mov	r1, r6
 8002e54:	4638      	mov	r0, r7
 8002e56:	f7ff ff37 	bl	8002cc8 <_free_r>
 8002e5a:	e7e9      	b.n	8002e30 <_realloc_r+0x1c>
 8002e5c:	4635      	mov	r5, r6
 8002e5e:	e7e7      	b.n	8002e30 <_realloc_r+0x1c>

08002e60 <_sbrk_r>:
 8002e60:	b538      	push	{r3, r4, r5, lr}
 8002e62:	2300      	movs	r3, #0
 8002e64:	4c05      	ldr	r4, [pc, #20]	; (8002e7c <_sbrk_r+0x1c>)
 8002e66:	4605      	mov	r5, r0
 8002e68:	4608      	mov	r0, r1
 8002e6a:	6023      	str	r3, [r4, #0]
 8002e6c:	f7fd fcbe 	bl	80007ec <_sbrk>
 8002e70:	1c43      	adds	r3, r0, #1
 8002e72:	d102      	bne.n	8002e7a <_sbrk_r+0x1a>
 8002e74:	6823      	ldr	r3, [r4, #0]
 8002e76:	b103      	cbz	r3, 8002e7a <_sbrk_r+0x1a>
 8002e78:	602b      	str	r3, [r5, #0]
 8002e7a:	bd38      	pop	{r3, r4, r5, pc}
 8002e7c:	2000063c 	.word	0x2000063c

08002e80 <__malloc_lock>:
 8002e80:	4770      	bx	lr

08002e82 <__malloc_unlock>:
 8002e82:	4770      	bx	lr

08002e84 <_malloc_usable_size_r>:
 8002e84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e88:	1f18      	subs	r0, r3, #4
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	bfbc      	itt	lt
 8002e8e:	580b      	ldrlt	r3, [r1, r0]
 8002e90:	18c0      	addlt	r0, r0, r3
 8002e92:	4770      	bx	lr

08002e94 <_init>:
 8002e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e96:	bf00      	nop
 8002e98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e9a:	bc08      	pop	{r3}
 8002e9c:	469e      	mov	lr, r3
 8002e9e:	4770      	bx	lr

08002ea0 <_fini>:
 8002ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea2:	bf00      	nop
 8002ea4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea6:	bc08      	pop	{r3}
 8002ea8:	469e      	mov	lr, r3
 8002eaa:	4770      	bx	lr

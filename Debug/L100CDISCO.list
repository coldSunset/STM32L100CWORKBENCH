
L100CDISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001060  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800119c  0800119c  0001119c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080011b8  080011b8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080011b8  080011b8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080011b8  080011b8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080011b8  080011b8  000111b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080011bc  080011bc  000111bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080011c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  080011cc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080011cc  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000472b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000f80  00000000  00000000  00024760  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000420  00000000  00000000  000256e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  00025b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000019b8  00000000  00000000  00025e98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000412a  00000000  00000000  00027850  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007ff02  00000000  00000000  0002b97a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000ab87c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000ea8  00000000  00000000  000ab8f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08001184 	.word	0x08001184

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08001184 	.word	0x08001184

0800017c <main>:
#include <stdio.h>

void SystemClock_Config(void);

int main(void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	 __HAL_RCC_GPIOC_CLK_ENABLE();
 8000182:	4b0c      	ldr	r3, [pc, #48]	; (80001b4 <main+0x38>)
 8000184:	69db      	ldr	r3, [r3, #28]
 8000186:	4a0b      	ldr	r2, [pc, #44]	; (80001b4 <main+0x38>)
 8000188:	f043 0304 	orr.w	r3, r3, #4
 800018c:	61d3      	str	r3, [r2, #28]
 800018e:	4b09      	ldr	r3, [pc, #36]	; (80001b4 <main+0x38>)
 8000190:	69db      	ldr	r3, [r3, #28]
 8000192:	f003 0304 	and.w	r3, r3, #4
 8000196:	607b      	str	r3, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]
	// RCC -> AHBENR |= 1 << 2 ;
	 GPIOC -> MODER |= (1<<8*2)|(1<<9*2);
 800019a:	4b07      	ldr	r3, [pc, #28]	; (80001b8 <main+0x3c>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	4a06      	ldr	r2, [pc, #24]	; (80001b8 <main+0x3c>)
 80001a0:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
 80001a4:	6013      	str	r3, [r2, #0]
	 GPIOC -> ODR = (1<<8|1<<9);
 80001a6:	4b04      	ldr	r3, [pc, #16]	; (80001b8 <main+0x3c>)
 80001a8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80001ac:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001ae:	f000 f805 	bl	80001bc <SystemClock_Config>

  while (1)
 80001b2:	e7fe      	b.n	80001b2 <main+0x36>
 80001b4:	40023800 	.word	0x40023800
 80001b8:	40020800 	.word	0x40020800

080001bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001bc:	b580      	push	{r7, lr}
 80001be:	b092      	sub	sp, #72	; 0x48
 80001c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001c2:	f107 0314 	add.w	r3, r7, #20
 80001c6:	2234      	movs	r2, #52	; 0x34
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f000 ffd2 	bl	8001174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001d0:	463b      	mov	r3, r7
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80001de:	4b1d      	ldr	r3, [pc, #116]	; (8000254 <SystemClock_Config+0x98>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80001e6:	4a1b      	ldr	r2, [pc, #108]	; (8000254 <SystemClock_Config+0x98>)
 80001e8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80001ec:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001ee:	2302      	movs	r3, #2
 80001f0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001f2:	2301      	movs	r3, #1
 80001f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001f6:	2310      	movs	r3, #16
 80001f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001fa:	2302      	movs	r3, #2
 80001fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80001fe:	2300      	movs	r3, #0
 8000200:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000202:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8000206:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000208:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800020c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800020e:	f107 0314 	add.w	r3, r7, #20
 8000212:	4618      	mov	r0, r3
 8000214:	f000 fa6e 	bl	80006f4 <HAL_RCC_OscConfig>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800021e:	f000 f81b 	bl	8000258 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000222:	230f      	movs	r3, #15
 8000224:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000226:	2303      	movs	r3, #3
 8000228:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800022a:	2300      	movs	r3, #0
 800022c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800022e:	2300      	movs	r3, #0
 8000230:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000232:	2300      	movs	r3, #0
 8000234:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000236:	463b      	mov	r3, r7
 8000238:	2101      	movs	r1, #1
 800023a:	4618      	mov	r0, r3
 800023c:	f000 fd8a 	bl	8000d54 <HAL_RCC_ClockConfig>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000246:	f000 f807 	bl	8000258 <Error_Handler>
  }
}
 800024a:	bf00      	nop
 800024c:	3748      	adds	r7, #72	; 0x48
 800024e:	46bd      	mov	sp, r7
 8000250:	bd80      	pop	{r7, pc}
 8000252:	bf00      	nop
 8000254:	40007000 	.word	0x40007000

08000258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	bc80      	pop	{r7}
 8000262:	4770      	bx	lr

08000264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000264:	b480      	push	{r7}
 8000266:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	bc80      	pop	{r7}
 800026e:	4770      	bx	lr

08000270 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000274:	e7fe      	b.n	8000274 <HardFault_Handler+0x4>

08000276 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000276:	b480      	push	{r7}
 8000278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800027a:	e7fe      	b.n	800027a <MemManage_Handler+0x4>

0800027c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000280:	e7fe      	b.n	8000280 <BusFault_Handler+0x4>

08000282 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000282:	b480      	push	{r7}
 8000284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000286:	e7fe      	b.n	8000286 <UsageFault_Handler+0x4>

08000288 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000288:	b480      	push	{r7}
 800028a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800028c:	bf00      	nop
 800028e:	46bd      	mov	sp, r7
 8000290:	bc80      	pop	{r7}
 8000292:	4770      	bx	lr

08000294 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000294:	b480      	push	{r7}
 8000296:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000298:	bf00      	nop
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr

080002a0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr

080002ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002b0:	f000 f8a0 	bl	80003f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80002bc:	4802      	ldr	r0, [pc, #8]	; (80002c8 <DMA1_Channel6_IRQHandler+0x10>)
 80002be:	f000 f969 	bl	8000594 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80002c2:	bf00      	nop
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	20000028 	.word	0x20000028

080002cc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80002d0:	4b15      	ldr	r3, [pc, #84]	; (8000328 <SystemInit+0x5c>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a14      	ldr	r2, [pc, #80]	; (8000328 <SystemInit+0x5c>)
 80002d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002da:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80002dc:	4b12      	ldr	r3, [pc, #72]	; (8000328 <SystemInit+0x5c>)
 80002de:	689a      	ldr	r2, [r3, #8]
 80002e0:	4911      	ldr	r1, [pc, #68]	; (8000328 <SystemInit+0x5c>)
 80002e2:	4b12      	ldr	r3, [pc, #72]	; (800032c <SystemInit+0x60>)
 80002e4:	4013      	ands	r3, r2
 80002e6:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80002e8:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <SystemInit+0x5c>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a0e      	ldr	r2, [pc, #56]	; (8000328 <SystemInit+0x5c>)
 80002ee:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80002f2:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80002f6:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80002f8:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <SystemInit+0x5c>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <SystemInit+0x5c>)
 80002fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000302:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8000304:	4b08      	ldr	r3, [pc, #32]	; (8000328 <SystemInit+0x5c>)
 8000306:	689b      	ldr	r3, [r3, #8]
 8000308:	4a07      	ldr	r2, [pc, #28]	; (8000328 <SystemInit+0x5c>)
 800030a:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 800030e:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000310:	4b05      	ldr	r3, [pc, #20]	; (8000328 <SystemInit+0x5c>)
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000316:	4b06      	ldr	r3, [pc, #24]	; (8000330 <SystemInit+0x64>)
 8000318:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800031c:	609a      	str	r2, [r3, #8]
#endif
}
 800031e:	bf00      	nop
 8000320:	46bd      	mov	sp, r7
 8000322:	bc80      	pop	{r7}
 8000324:	4770      	bx	lr
 8000326:	bf00      	nop
 8000328:	40023800 	.word	0x40023800
 800032c:	88ffc00c 	.word	0x88ffc00c
 8000330:	e000ed00 	.word	0xe000ed00

08000334 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000334:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000336:	e003      	b.n	8000340 <LoopCopyDataInit>

08000338 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000338:	4b0b      	ldr	r3, [pc, #44]	; (8000368 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800033a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800033c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800033e:	3104      	adds	r1, #4

08000340 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000340:	480a      	ldr	r0, [pc, #40]	; (800036c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000342:	4b0b      	ldr	r3, [pc, #44]	; (8000370 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000344:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000346:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000348:	d3f6      	bcc.n	8000338 <CopyDataInit>
  ldr r2, =_sbss
 800034a:	4a0a      	ldr	r2, [pc, #40]	; (8000374 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800034c:	e002      	b.n	8000354 <LoopFillZerobss>

0800034e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000350:	f842 3b04 	str.w	r3, [r2], #4

08000354 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000354:	4b08      	ldr	r3, [pc, #32]	; (8000378 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000356:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000358:	d3f9      	bcc.n	800034e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800035a:	f7ff ffb7 	bl	80002cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800035e:	f000 fee5 	bl	800112c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000362:	f7ff ff0b 	bl	800017c <main>
  bx lr
 8000366:	4770      	bx	lr
  ldr r3, =_sidata
 8000368:	080011c0 	.word	0x080011c0
  ldr r0, =_sdata
 800036c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000370:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000374:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000378:	200000b0 	.word	0x200000b0

0800037c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800037c:	e7fe      	b.n	800037c <ADC1_IRQHandler>
	...

08000380 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000388:	2300      	movs	r3, #0
 800038a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800038c:	4b16      	ldr	r3, [pc, #88]	; (80003e8 <HAL_InitTick+0x68>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	2b00      	cmp	r3, #0
 8000392:	d022      	beq.n	80003da <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000394:	4b15      	ldr	r3, [pc, #84]	; (80003ec <HAL_InitTick+0x6c>)
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	4b13      	ldr	r3, [pc, #76]	; (80003e8 <HAL_InitTick+0x68>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80003a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80003a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 f8e7 	bl	800057c <HAL_SYSTICK_Config>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d10f      	bne.n	80003d4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	2b0f      	cmp	r3, #15
 80003b8:	d809      	bhi.n	80003ce <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80003ba:	2200      	movs	r2, #0
 80003bc:	6879      	ldr	r1, [r7, #4]
 80003be:	f04f 30ff 	mov.w	r0, #4294967295
 80003c2:	f000 f8bf 	bl	8000544 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80003c6:	4a0a      	ldr	r2, [pc, #40]	; (80003f0 <HAL_InitTick+0x70>)
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	6013      	str	r3, [r2, #0]
 80003cc:	e007      	b.n	80003de <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80003ce:	2301      	movs	r3, #1
 80003d0:	73fb      	strb	r3, [r7, #15]
 80003d2:	e004      	b.n	80003de <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80003d4:	2301      	movs	r3, #1
 80003d6:	73fb      	strb	r3, [r7, #15]
 80003d8:	e001      	b.n	80003de <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80003da:	2301      	movs	r3, #1
 80003dc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80003de:	7bfb      	ldrb	r3, [r7, #15]
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	3710      	adds	r7, #16
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}
 80003e8:	20000008 	.word	0x20000008
 80003ec:	20000000 	.word	0x20000000
 80003f0:	20000004 	.word	0x20000004

080003f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80003f8:	4b05      	ldr	r3, [pc, #20]	; (8000410 <HAL_IncTick+0x1c>)
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	4b05      	ldr	r3, [pc, #20]	; (8000414 <HAL_IncTick+0x20>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4413      	add	r3, r2
 8000402:	4a03      	ldr	r2, [pc, #12]	; (8000410 <HAL_IncTick+0x1c>)
 8000404:	6013      	str	r3, [r2, #0]
}
 8000406:	bf00      	nop
 8000408:	46bd      	mov	sp, r7
 800040a:	bc80      	pop	{r7}
 800040c:	4770      	bx	lr
 800040e:	bf00      	nop
 8000410:	200000ac 	.word	0x200000ac
 8000414:	20000008 	.word	0x20000008

08000418 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  return uwTick;
 800041c:	4b02      	ldr	r3, [pc, #8]	; (8000428 <HAL_GetTick+0x10>)
 800041e:	681b      	ldr	r3, [r3, #0]
}
 8000420:	4618      	mov	r0, r3
 8000422:	46bd      	mov	sp, r7
 8000424:	bc80      	pop	{r7}
 8000426:	4770      	bx	lr
 8000428:	200000ac 	.word	0x200000ac

0800042c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000430:	4b04      	ldr	r3, [pc, #16]	; (8000444 <__NVIC_GetPriorityGrouping+0x18>)
 8000432:	68db      	ldr	r3, [r3, #12]
 8000434:	0a1b      	lsrs	r3, r3, #8
 8000436:	f003 0307 	and.w	r3, r3, #7
}
 800043a:	4618      	mov	r0, r3
 800043c:	46bd      	mov	sp, r7
 800043e:	bc80      	pop	{r7}
 8000440:	4770      	bx	lr
 8000442:	bf00      	nop
 8000444:	e000ed00 	.word	0xe000ed00

08000448 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	4603      	mov	r3, r0
 8000450:	6039      	str	r1, [r7, #0]
 8000452:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000454:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000458:	2b00      	cmp	r3, #0
 800045a:	db0a      	blt.n	8000472 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	b2da      	uxtb	r2, r3
 8000460:	490c      	ldr	r1, [pc, #48]	; (8000494 <__NVIC_SetPriority+0x4c>)
 8000462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000466:	0112      	lsls	r2, r2, #4
 8000468:	b2d2      	uxtb	r2, r2
 800046a:	440b      	add	r3, r1
 800046c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000470:	e00a      	b.n	8000488 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000472:	683b      	ldr	r3, [r7, #0]
 8000474:	b2da      	uxtb	r2, r3
 8000476:	4908      	ldr	r1, [pc, #32]	; (8000498 <__NVIC_SetPriority+0x50>)
 8000478:	79fb      	ldrb	r3, [r7, #7]
 800047a:	f003 030f 	and.w	r3, r3, #15
 800047e:	3b04      	subs	r3, #4
 8000480:	0112      	lsls	r2, r2, #4
 8000482:	b2d2      	uxtb	r2, r2
 8000484:	440b      	add	r3, r1
 8000486:	761a      	strb	r2, [r3, #24]
}
 8000488:	bf00      	nop
 800048a:	370c      	adds	r7, #12
 800048c:	46bd      	mov	sp, r7
 800048e:	bc80      	pop	{r7}
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	e000e100 	.word	0xe000e100
 8000498:	e000ed00 	.word	0xe000ed00

0800049c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800049c:	b480      	push	{r7}
 800049e:	b089      	sub	sp, #36	; 0x24
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004a8:	68fb      	ldr	r3, [r7, #12]
 80004aa:	f003 0307 	and.w	r3, r3, #7
 80004ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004b0:	69fb      	ldr	r3, [r7, #28]
 80004b2:	f1c3 0307 	rsb	r3, r3, #7
 80004b6:	2b04      	cmp	r3, #4
 80004b8:	bf28      	it	cs
 80004ba:	2304      	movcs	r3, #4
 80004bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004be:	69fb      	ldr	r3, [r7, #28]
 80004c0:	3304      	adds	r3, #4
 80004c2:	2b06      	cmp	r3, #6
 80004c4:	d902      	bls.n	80004cc <NVIC_EncodePriority+0x30>
 80004c6:	69fb      	ldr	r3, [r7, #28]
 80004c8:	3b03      	subs	r3, #3
 80004ca:	e000      	b.n	80004ce <NVIC_EncodePriority+0x32>
 80004cc:	2300      	movs	r3, #0
 80004ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004d0:	f04f 32ff 	mov.w	r2, #4294967295
 80004d4:	69bb      	ldr	r3, [r7, #24]
 80004d6:	fa02 f303 	lsl.w	r3, r2, r3
 80004da:	43da      	mvns	r2, r3
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	401a      	ands	r2, r3
 80004e0:	697b      	ldr	r3, [r7, #20]
 80004e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80004e4:	f04f 31ff 	mov.w	r1, #4294967295
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	fa01 f303 	lsl.w	r3, r1, r3
 80004ee:	43d9      	mvns	r1, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80004f4:	4313      	orrs	r3, r2
         );
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	3724      	adds	r7, #36	; 0x24
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr

08000500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	3b01      	subs	r3, #1
 800050c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000510:	d301      	bcc.n	8000516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000512:	2301      	movs	r3, #1
 8000514:	e00f      	b.n	8000536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000516:	4a0a      	ldr	r2, [pc, #40]	; (8000540 <SysTick_Config+0x40>)
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	3b01      	subs	r3, #1
 800051c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800051e:	210f      	movs	r1, #15
 8000520:	f04f 30ff 	mov.w	r0, #4294967295
 8000524:	f7ff ff90 	bl	8000448 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000528:	4b05      	ldr	r3, [pc, #20]	; (8000540 <SysTick_Config+0x40>)
 800052a:	2200      	movs	r2, #0
 800052c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800052e:	4b04      	ldr	r3, [pc, #16]	; (8000540 <SysTick_Config+0x40>)
 8000530:	2207      	movs	r2, #7
 8000532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000534:	2300      	movs	r3, #0
}
 8000536:	4618      	mov	r0, r3
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	e000e010 	.word	0xe000e010

08000544 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b086      	sub	sp, #24
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
 8000550:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000552:	2300      	movs	r3, #0
 8000554:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000556:	f7ff ff69 	bl	800042c <__NVIC_GetPriorityGrouping>
 800055a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	68b9      	ldr	r1, [r7, #8]
 8000560:	6978      	ldr	r0, [r7, #20]
 8000562:	f7ff ff9b 	bl	800049c <NVIC_EncodePriority>
 8000566:	4602      	mov	r2, r0
 8000568:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800056c:	4611      	mov	r1, r2
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff ff6a 	bl	8000448 <__NVIC_SetPriority>
}
 8000574:	bf00      	nop
 8000576:	3718      	adds	r7, #24
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}

0800057c <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000584:	6878      	ldr	r0, [r7, #4]
 8000586:	f7ff ffbb 	bl	8000500 <SysTick_Config>
 800058a:	4603      	mov	r3, r0
}
 800058c:	4618      	mov	r0, r3
 800058e:	3708      	adds	r7, #8
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}

08000594 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 031c 	and.w	r3, r3, #28
 80005b4:	2204      	movs	r2, #4
 80005b6:	409a      	lsls	r2, r3
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4013      	ands	r3, r2
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d026      	beq.n	800060e <HAL_DMA_IRQHandler+0x7a>
 80005c0:	68bb      	ldr	r3, [r7, #8]
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d021      	beq.n	800060e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f003 0320 	and.w	r3, r3, #32
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d107      	bne.n	80005e8 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	f022 0204 	bic.w	r2, r2, #4
 80005e6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	f003 021c 	and.w	r2, r3, #28
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80005f4:	2104      	movs	r1, #4
 80005f6:	fa01 f202 	lsl.w	r2, r1, r2
 80005fa:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000600:	2b00      	cmp	r3, #0
 8000602:	d071      	beq.n	80006e8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800060c:	e06c      	b.n	80006e8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000612:	f003 031c 	and.w	r3, r3, #28
 8000616:	2202      	movs	r2, #2
 8000618:	409a      	lsls	r2, r3
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	4013      	ands	r3, r2
 800061e:	2b00      	cmp	r3, #0
 8000620:	d02e      	beq.n	8000680 <HAL_DMA_IRQHandler+0xec>
 8000622:	68bb      	ldr	r3, [r7, #8]
 8000624:	f003 0302 	and.w	r3, r3, #2
 8000628:	2b00      	cmp	r3, #0
 800062a:	d029      	beq.n	8000680 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0320 	and.w	r3, r3, #32
 8000636:	2b00      	cmp	r3, #0
 8000638:	d10b      	bne.n	8000652 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	681a      	ldr	r2, [r3, #0]
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f022 020a 	bic.w	r2, r2, #10
 8000648:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2201      	movs	r2, #1
 800064e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000656:	f003 021c 	and.w	r2, r3, #28
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800065e:	2102      	movs	r1, #2
 8000660:	fa01 f202 	lsl.w	r2, r1, r2
 8000664:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2200      	movs	r2, #0
 800066a:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000672:	2b00      	cmp	r3, #0
 8000674:	d038      	beq.n	80006e8 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800067e:	e033      	b.n	80006e8 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 031c 	and.w	r3, r3, #28
 8000688:	2208      	movs	r2, #8
 800068a:	409a      	lsls	r2, r3
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	4013      	ands	r3, r2
 8000690:	2b00      	cmp	r3, #0
 8000692:	d02a      	beq.n	80006ea <HAL_DMA_IRQHandler+0x156>
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	f003 0308 	and.w	r3, r3, #8
 800069a:	2b00      	cmp	r3, #0
 800069c:	d025      	beq.n	80006ea <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f022 020e 	bic.w	r2, r2, #14
 80006ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b2:	f003 021c 	and.w	r2, r3, #28
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006ba:	2101      	movs	r1, #1
 80006bc:	fa01 f202 	lsl.w	r2, r1, r2
 80006c0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	2201      	movs	r2, #1
 80006c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	2201      	movs	r2, #1
 80006cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	2200      	movs	r2, #0
 80006d4:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d004      	beq.n	80006ea <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e4:	6878      	ldr	r0, [r7, #4]
 80006e6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop
}
 80006ec:	3710      	adds	r7, #16
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
	...

080006f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d101      	bne.n	8000706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000702:	2301      	movs	r3, #1
 8000704:	e31d      	b.n	8000d42 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000706:	4b94      	ldr	r3, [pc, #592]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	f003 030c 	and.w	r3, r3, #12
 800070e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000710:	4b91      	ldr	r3, [pc, #580]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 8000712:	689b      	ldr	r3, [r3, #8]
 8000714:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000718:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	2b00      	cmp	r3, #0
 8000724:	d07b      	beq.n	800081e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000726:	69bb      	ldr	r3, [r7, #24]
 8000728:	2b08      	cmp	r3, #8
 800072a:	d006      	beq.n	800073a <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800072c:	69bb      	ldr	r3, [r7, #24]
 800072e:	2b0c      	cmp	r3, #12
 8000730:	d10f      	bne.n	8000752 <HAL_RCC_OscConfig+0x5e>
 8000732:	697b      	ldr	r3, [r7, #20]
 8000734:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000738:	d10b      	bne.n	8000752 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800073a:	4b87      	ldr	r3, [pc, #540]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000742:	2b00      	cmp	r3, #0
 8000744:	d06a      	beq.n	800081c <HAL_RCC_OscConfig+0x128>
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	2b00      	cmp	r3, #0
 800074c:	d166      	bne.n	800081c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800074e:	2301      	movs	r3, #1
 8000750:	e2f7      	b.n	8000d42 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	685b      	ldr	r3, [r3, #4]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d106      	bne.n	8000768 <HAL_RCC_OscConfig+0x74>
 800075a:	4b7f      	ldr	r3, [pc, #508]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4a7e      	ldr	r2, [pc, #504]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 8000760:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000764:	6013      	str	r3, [r2, #0]
 8000766:	e02d      	b.n	80007c4 <HAL_RCC_OscConfig+0xd0>
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d10c      	bne.n	800078a <HAL_RCC_OscConfig+0x96>
 8000770:	4b79      	ldr	r3, [pc, #484]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a78      	ldr	r2, [pc, #480]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 8000776:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800077a:	6013      	str	r3, [r2, #0]
 800077c:	4b76      	ldr	r3, [pc, #472]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a75      	ldr	r2, [pc, #468]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 8000782:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	e01c      	b.n	80007c4 <HAL_RCC_OscConfig+0xd0>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	685b      	ldr	r3, [r3, #4]
 800078e:	2b05      	cmp	r3, #5
 8000790:	d10c      	bne.n	80007ac <HAL_RCC_OscConfig+0xb8>
 8000792:	4b71      	ldr	r3, [pc, #452]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4a70      	ldr	r2, [pc, #448]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 8000798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800079c:	6013      	str	r3, [r2, #0]
 800079e:	4b6e      	ldr	r3, [pc, #440]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a6d      	ldr	r2, [pc, #436]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 80007a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80007a8:	6013      	str	r3, [r2, #0]
 80007aa:	e00b      	b.n	80007c4 <HAL_RCC_OscConfig+0xd0>
 80007ac:	4b6a      	ldr	r3, [pc, #424]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a69      	ldr	r2, [pc, #420]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 80007b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007b6:	6013      	str	r3, [r2, #0]
 80007b8:	4b67      	ldr	r3, [pc, #412]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a66      	ldr	r2, [pc, #408]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 80007be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	685b      	ldr	r3, [r3, #4]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d013      	beq.n	80007f4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007cc:	f7ff fe24 	bl	8000418 <HAL_GetTick>
 80007d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80007d2:	e008      	b.n	80007e6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007d4:	f7ff fe20 	bl	8000418 <HAL_GetTick>
 80007d8:	4602      	mov	r2, r0
 80007da:	693b      	ldr	r3, [r7, #16]
 80007dc:	1ad3      	subs	r3, r2, r3
 80007de:	2b64      	cmp	r3, #100	; 0x64
 80007e0:	d901      	bls.n	80007e6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80007e2:	2303      	movs	r3, #3
 80007e4:	e2ad      	b.n	8000d42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80007e6:	4b5c      	ldr	r3, [pc, #368]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d0f0      	beq.n	80007d4 <HAL_RCC_OscConfig+0xe0>
 80007f2:	e014      	b.n	800081e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007f4:	f7ff fe10 	bl	8000418 <HAL_GetTick>
 80007f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80007fa:	e008      	b.n	800080e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007fc:	f7ff fe0c 	bl	8000418 <HAL_GetTick>
 8000800:	4602      	mov	r2, r0
 8000802:	693b      	ldr	r3, [r7, #16]
 8000804:	1ad3      	subs	r3, r2, r3
 8000806:	2b64      	cmp	r3, #100	; 0x64
 8000808:	d901      	bls.n	800080e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800080a:	2303      	movs	r3, #3
 800080c:	e299      	b.n	8000d42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800080e:	4b52      	ldr	r3, [pc, #328]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000816:	2b00      	cmp	r3, #0
 8000818:	d1f0      	bne.n	80007fc <HAL_RCC_OscConfig+0x108>
 800081a:	e000      	b.n	800081e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800081c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f003 0302 	and.w	r3, r3, #2
 8000826:	2b00      	cmp	r3, #0
 8000828:	d05a      	beq.n	80008e0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	2b04      	cmp	r3, #4
 800082e:	d005      	beq.n	800083c <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	2b0c      	cmp	r3, #12
 8000834:	d119      	bne.n	800086a <HAL_RCC_OscConfig+0x176>
 8000836:	697b      	ldr	r3, [r7, #20]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d116      	bne.n	800086a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800083c:	4b46      	ldr	r3, [pc, #280]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f003 0302 	and.w	r3, r3, #2
 8000844:	2b00      	cmp	r3, #0
 8000846:	d005      	beq.n	8000854 <HAL_RCC_OscConfig+0x160>
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	2b01      	cmp	r3, #1
 800084e:	d001      	beq.n	8000854 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000850:	2301      	movs	r3, #1
 8000852:	e276      	b.n	8000d42 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000854:	4b40      	ldr	r3, [pc, #256]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	691b      	ldr	r3, [r3, #16]
 8000860:	021b      	lsls	r3, r3, #8
 8000862:	493d      	ldr	r1, [pc, #244]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 8000864:	4313      	orrs	r3, r2
 8000866:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000868:	e03a      	b.n	80008e0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	68db      	ldr	r3, [r3, #12]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d020      	beq.n	80008b4 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000872:	4b3a      	ldr	r3, [pc, #232]	; (800095c <HAL_RCC_OscConfig+0x268>)
 8000874:	2201      	movs	r2, #1
 8000876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000878:	f7ff fdce 	bl	8000418 <HAL_GetTick>
 800087c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800087e:	e008      	b.n	8000892 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000880:	f7ff fdca 	bl	8000418 <HAL_GetTick>
 8000884:	4602      	mov	r2, r0
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	1ad3      	subs	r3, r2, r3
 800088a:	2b02      	cmp	r3, #2
 800088c:	d901      	bls.n	8000892 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800088e:	2303      	movs	r3, #3
 8000890:	e257      	b.n	8000d42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000892:	4b31      	ldr	r3, [pc, #196]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	f003 0302 	and.w	r3, r3, #2
 800089a:	2b00      	cmp	r3, #0
 800089c:	d0f0      	beq.n	8000880 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800089e:	4b2e      	ldr	r3, [pc, #184]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 80008a0:	685b      	ldr	r3, [r3, #4]
 80008a2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	691b      	ldr	r3, [r3, #16]
 80008aa:	021b      	lsls	r3, r3, #8
 80008ac:	492a      	ldr	r1, [pc, #168]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 80008ae:	4313      	orrs	r3, r2
 80008b0:	604b      	str	r3, [r1, #4]
 80008b2:	e015      	b.n	80008e0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80008b4:	4b29      	ldr	r3, [pc, #164]	; (800095c <HAL_RCC_OscConfig+0x268>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008ba:	f7ff fdad 	bl	8000418 <HAL_GetTick>
 80008be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80008c0:	e008      	b.n	80008d4 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008c2:	f7ff fda9 	bl	8000418 <HAL_GetTick>
 80008c6:	4602      	mov	r2, r0
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	1ad3      	subs	r3, r2, r3
 80008cc:	2b02      	cmp	r3, #2
 80008ce:	d901      	bls.n	80008d4 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80008d0:	2303      	movs	r3, #3
 80008d2:	e236      	b.n	8000d42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80008d4:	4b20      	ldr	r3, [pc, #128]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f003 0302 	and.w	r3, r3, #2
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d1f0      	bne.n	80008c2 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f003 0310 	and.w	r3, r3, #16
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	f000 80b8 	beq.w	8000a5e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80008ee:	69bb      	ldr	r3, [r7, #24]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d170      	bne.n	80009d6 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80008f4:	4b18      	ldr	r3, [pc, #96]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d005      	beq.n	800090c <HAL_RCC_OscConfig+0x218>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d101      	bne.n	800090c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8000908:	2301      	movs	r3, #1
 800090a:	e21a      	b.n	8000d42 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	6a1a      	ldr	r2, [r3, #32]
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000918:	429a      	cmp	r2, r3
 800091a:	d921      	bls.n	8000960 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6a1b      	ldr	r3, [r3, #32]
 8000920:	4618      	mov	r0, r3
 8000922:	f000 fba3 	bl	800106c <RCC_SetFlashLatencyFromMSIRange>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	d001      	beq.n	8000930 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 800092c:	2301      	movs	r3, #1
 800092e:	e208      	b.n	8000d42 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000930:	4b09      	ldr	r3, [pc, #36]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 8000932:	685b      	ldr	r3, [r3, #4]
 8000934:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	6a1b      	ldr	r3, [r3, #32]
 800093c:	4906      	ldr	r1, [pc, #24]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 800093e:	4313      	orrs	r3, r2
 8000940:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000942:	4b05      	ldr	r3, [pc, #20]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	69db      	ldr	r3, [r3, #28]
 800094e:	061b      	lsls	r3, r3, #24
 8000950:	4901      	ldr	r1, [pc, #4]	; (8000958 <HAL_RCC_OscConfig+0x264>)
 8000952:	4313      	orrs	r3, r2
 8000954:	604b      	str	r3, [r1, #4]
 8000956:	e020      	b.n	800099a <HAL_RCC_OscConfig+0x2a6>
 8000958:	40023800 	.word	0x40023800
 800095c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000960:	4ba4      	ldr	r3, [pc, #656]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	6a1b      	ldr	r3, [r3, #32]
 800096c:	49a1      	ldr	r1, [pc, #644]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 800096e:	4313      	orrs	r3, r2
 8000970:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000972:	4ba0      	ldr	r3, [pc, #640]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000974:	685b      	ldr	r3, [r3, #4]
 8000976:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	69db      	ldr	r3, [r3, #28]
 800097e:	061b      	lsls	r3, r3, #24
 8000980:	499c      	ldr	r1, [pc, #624]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000982:	4313      	orrs	r3, r2
 8000984:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	6a1b      	ldr	r3, [r3, #32]
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fb6e 	bl	800106c <RCC_SetFlashLatencyFromMSIRange>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8000996:	2301      	movs	r3, #1
 8000998:	e1d3      	b.n	8000d42 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6a1b      	ldr	r3, [r3, #32]
 800099e:	0b5b      	lsrs	r3, r3, #13
 80009a0:	3301      	adds	r3, #1
 80009a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80009aa:	4a92      	ldr	r2, [pc, #584]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 80009ac:	6892      	ldr	r2, [r2, #8]
 80009ae:	0912      	lsrs	r2, r2, #4
 80009b0:	f002 020f 	and.w	r2, r2, #15
 80009b4:	4990      	ldr	r1, [pc, #576]	; (8000bf8 <HAL_RCC_OscConfig+0x504>)
 80009b6:	5c8a      	ldrb	r2, [r1, r2]
 80009b8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80009ba:	4a90      	ldr	r2, [pc, #576]	; (8000bfc <HAL_RCC_OscConfig+0x508>)
 80009bc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80009be:	4b90      	ldr	r3, [pc, #576]	; (8000c00 <HAL_RCC_OscConfig+0x50c>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f7ff fcdc 	bl	8000380 <HAL_InitTick>
 80009c8:	4603      	mov	r3, r0
 80009ca:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d045      	beq.n	8000a5e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	e1b5      	b.n	8000d42 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	699b      	ldr	r3, [r3, #24]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d029      	beq.n	8000a32 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80009de:	4b89      	ldr	r3, [pc, #548]	; (8000c04 <HAL_RCC_OscConfig+0x510>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80009e4:	f7ff fd18 	bl	8000418 <HAL_GetTick>
 80009e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80009ea:	e008      	b.n	80009fe <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80009ec:	f7ff fd14 	bl	8000418 <HAL_GetTick>
 80009f0:	4602      	mov	r2, r0
 80009f2:	693b      	ldr	r3, [r7, #16]
 80009f4:	1ad3      	subs	r3, r2, r3
 80009f6:	2b02      	cmp	r3, #2
 80009f8:	d901      	bls.n	80009fe <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80009fa:	2303      	movs	r3, #3
 80009fc:	e1a1      	b.n	8000d42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80009fe:	4b7d      	ldr	r3, [pc, #500]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d0f0      	beq.n	80009ec <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a0a:	4b7a      	ldr	r3, [pc, #488]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000a0c:	685b      	ldr	r3, [r3, #4]
 8000a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6a1b      	ldr	r3, [r3, #32]
 8000a16:	4977      	ldr	r1, [pc, #476]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a1c:	4b75      	ldr	r3, [pc, #468]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	69db      	ldr	r3, [r3, #28]
 8000a28:	061b      	lsls	r3, r3, #24
 8000a2a:	4972      	ldr	r1, [pc, #456]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	604b      	str	r3, [r1, #4]
 8000a30:	e015      	b.n	8000a5e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000a32:	4b74      	ldr	r3, [pc, #464]	; (8000c04 <HAL_RCC_OscConfig+0x510>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a38:	f7ff fcee 	bl	8000418 <HAL_GetTick>
 8000a3c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000a3e:	e008      	b.n	8000a52 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a40:	f7ff fcea 	bl	8000418 <HAL_GetTick>
 8000a44:	4602      	mov	r2, r0
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	1ad3      	subs	r3, r2, r3
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d901      	bls.n	8000a52 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	e177      	b.n	8000d42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8000a52:	4b68      	ldr	r3, [pc, #416]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d1f0      	bne.n	8000a40 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	f003 0308 	and.w	r3, r3, #8
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d030      	beq.n	8000acc <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	695b      	ldr	r3, [r3, #20]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d016      	beq.n	8000aa0 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000a72:	4b65      	ldr	r3, [pc, #404]	; (8000c08 <HAL_RCC_OscConfig+0x514>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a78:	f7ff fcce 	bl	8000418 <HAL_GetTick>
 8000a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000a7e:	e008      	b.n	8000a92 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a80:	f7ff fcca 	bl	8000418 <HAL_GetTick>
 8000a84:	4602      	mov	r2, r0
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	1ad3      	subs	r3, r2, r3
 8000a8a:	2b02      	cmp	r3, #2
 8000a8c:	d901      	bls.n	8000a92 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	e157      	b.n	8000d42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8000a92:	4b58      	ldr	r3, [pc, #352]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a96:	f003 0302 	and.w	r3, r3, #2
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d0f0      	beq.n	8000a80 <HAL_RCC_OscConfig+0x38c>
 8000a9e:	e015      	b.n	8000acc <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000aa0:	4b59      	ldr	r3, [pc, #356]	; (8000c08 <HAL_RCC_OscConfig+0x514>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000aa6:	f7ff fcb7 	bl	8000418 <HAL_GetTick>
 8000aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000aac:	e008      	b.n	8000ac0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000aae:	f7ff fcb3 	bl	8000418 <HAL_GetTick>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d901      	bls.n	8000ac0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8000abc:	2303      	movs	r3, #3
 8000abe:	e140      	b.n	8000d42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8000ac0:	4b4c      	ldr	r3, [pc, #304]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000ac2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ac4:	f003 0302 	and.w	r3, r3, #2
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1f0      	bne.n	8000aae <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	f000 80b5 	beq.w	8000c44 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ada:	2300      	movs	r3, #0
 8000adc:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ade:	4b45      	ldr	r3, [pc, #276]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d10d      	bne.n	8000b06 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000aea:	4b42      	ldr	r3, [pc, #264]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aee:	4a41      	ldr	r2, [pc, #260]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af4:	6253      	str	r3, [r2, #36]	; 0x24
 8000af6:	4b3f      	ldr	r3, [pc, #252]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000b02:	2301      	movs	r3, #1
 8000b04:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b06:	4b41      	ldr	r3, [pc, #260]	; (8000c0c <HAL_RCC_OscConfig+0x518>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d118      	bne.n	8000b44 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b12:	4b3e      	ldr	r3, [pc, #248]	; (8000c0c <HAL_RCC_OscConfig+0x518>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a3d      	ldr	r2, [pc, #244]	; (8000c0c <HAL_RCC_OscConfig+0x518>)
 8000b18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000b1e:	f7ff fc7b 	bl	8000418 <HAL_GetTick>
 8000b22:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b24:	e008      	b.n	8000b38 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b26:	f7ff fc77 	bl	8000418 <HAL_GetTick>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	2b64      	cmp	r3, #100	; 0x64
 8000b32:	d901      	bls.n	8000b38 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8000b34:	2303      	movs	r3, #3
 8000b36:	e104      	b.n	8000d42 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b38:	4b34      	ldr	r3, [pc, #208]	; (8000c0c <HAL_RCC_OscConfig+0x518>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d0f0      	beq.n	8000b26 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	689b      	ldr	r3, [r3, #8]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d106      	bne.n	8000b5a <HAL_RCC_OscConfig+0x466>
 8000b4c:	4b29      	ldr	r3, [pc, #164]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b50:	4a28      	ldr	r2, [pc, #160]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000b52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b56:	6353      	str	r3, [r2, #52]	; 0x34
 8000b58:	e02d      	b.n	8000bb6 <HAL_RCC_OscConfig+0x4c2>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	689b      	ldr	r3, [r3, #8]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d10c      	bne.n	8000b7c <HAL_RCC_OscConfig+0x488>
 8000b62:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000b64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b66:	4a23      	ldr	r2, [pc, #140]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b6c:	6353      	str	r3, [r2, #52]	; 0x34
 8000b6e:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000b70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b72:	4a20      	ldr	r2, [pc, #128]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000b74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000b78:	6353      	str	r3, [r2, #52]	; 0x34
 8000b7a:	e01c      	b.n	8000bb6 <HAL_RCC_OscConfig+0x4c2>
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	689b      	ldr	r3, [r3, #8]
 8000b80:	2b05      	cmp	r3, #5
 8000b82:	d10c      	bne.n	8000b9e <HAL_RCC_OscConfig+0x4aa>
 8000b84:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b88:	4a1a      	ldr	r2, [pc, #104]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000b8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b8e:	6353      	str	r3, [r2, #52]	; 0x34
 8000b90:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b94:	4a17      	ldr	r2, [pc, #92]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000b96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b9a:	6353      	str	r3, [r2, #52]	; 0x34
 8000b9c:	e00b      	b.n	8000bb6 <HAL_RCC_OscConfig+0x4c2>
 8000b9e:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ba2:	4a14      	ldr	r2, [pc, #80]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000ba4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ba8:	6353      	str	r3, [r2, #52]	; 0x34
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bae:	4a11      	ldr	r2, [pc, #68]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000bb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000bb4:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d015      	beq.n	8000bea <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bbe:	f7ff fc2b 	bl	8000418 <HAL_GetTick>
 8000bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000bc4:	e00a      	b.n	8000bdc <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bc6:	f7ff fc27 	bl	8000418 <HAL_GetTick>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d901      	bls.n	8000bdc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8000bd8:	2303      	movs	r3, #3
 8000bda:	e0b2      	b.n	8000d42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <HAL_RCC_OscConfig+0x500>)
 8000bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000be0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d0ee      	beq.n	8000bc6 <HAL_RCC_OscConfig+0x4d2>
 8000be8:	e023      	b.n	8000c32 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bea:	f7ff fc15 	bl	8000418 <HAL_GetTick>
 8000bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000bf0:	e019      	b.n	8000c26 <HAL_RCC_OscConfig+0x532>
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	080011a8 	.word	0x080011a8
 8000bfc:	20000000 	.word	0x20000000
 8000c00:	20000004 	.word	0x20000004
 8000c04:	42470020 	.word	0x42470020
 8000c08:	42470680 	.word	0x42470680
 8000c0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000c10:	f7ff fc02 	bl	8000418 <HAL_GetTick>
 8000c14:	4602      	mov	r2, r0
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d901      	bls.n	8000c26 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8000c22:	2303      	movs	r3, #3
 8000c24:	e08d      	b.n	8000d42 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8000c26:	4b49      	ldr	r3, [pc, #292]	; (8000d4c <HAL_RCC_OscConfig+0x658>)
 8000c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d1ee      	bne.n	8000c10 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c32:	7ffb      	ldrb	r3, [r7, #31]
 8000c34:	2b01      	cmp	r3, #1
 8000c36:	d105      	bne.n	8000c44 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c38:	4b44      	ldr	r3, [pc, #272]	; (8000d4c <HAL_RCC_OscConfig+0x658>)
 8000c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c3c:	4a43      	ldr	r2, [pc, #268]	; (8000d4c <HAL_RCC_OscConfig+0x658>)
 8000c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c42:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d079      	beq.n	8000d40 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c4c:	69bb      	ldr	r3, [r7, #24]
 8000c4e:	2b0c      	cmp	r3, #12
 8000c50:	d056      	beq.n	8000d00 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c56:	2b02      	cmp	r3, #2
 8000c58:	d13b      	bne.n	8000cd2 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c5a:	4b3d      	ldr	r3, [pc, #244]	; (8000d50 <HAL_RCC_OscConfig+0x65c>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c60:	f7ff fbda 	bl	8000418 <HAL_GetTick>
 8000c64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000c66:	e008      	b.n	8000c7a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c68:	f7ff fbd6 	bl	8000418 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	693b      	ldr	r3, [r7, #16]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d901      	bls.n	8000c7a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8000c76:	2303      	movs	r3, #3
 8000c78:	e063      	b.n	8000d42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000c7a:	4b34      	ldr	r3, [pc, #208]	; (8000d4c <HAL_RCC_OscConfig+0x658>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d1f0      	bne.n	8000c68 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c86:	4b31      	ldr	r3, [pc, #196]	; (8000d4c <HAL_RCC_OscConfig+0x658>)
 8000c88:	689b      	ldr	r3, [r3, #8]
 8000c8a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c96:	4319      	orrs	r1, r3
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9c:	430b      	orrs	r3, r1
 8000c9e:	492b      	ldr	r1, [pc, #172]	; (8000d4c <HAL_RCC_OscConfig+0x658>)
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000ca4:	4b2a      	ldr	r3, [pc, #168]	; (8000d50 <HAL_RCC_OscConfig+0x65c>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000caa:	f7ff fbb5 	bl	8000418 <HAL_GetTick>
 8000cae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000cb0:	e008      	b.n	8000cc4 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000cb2:	f7ff fbb1 	bl	8000418 <HAL_GetTick>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	1ad3      	subs	r3, r2, r3
 8000cbc:	2b02      	cmp	r3, #2
 8000cbe:	d901      	bls.n	8000cc4 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	e03e      	b.n	8000d42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000cc4:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <HAL_RCC_OscConfig+0x658>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d0f0      	beq.n	8000cb2 <HAL_RCC_OscConfig+0x5be>
 8000cd0:	e036      	b.n	8000d40 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000cd2:	4b1f      	ldr	r3, [pc, #124]	; (8000d50 <HAL_RCC_OscConfig+0x65c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd8:	f7ff fb9e 	bl	8000418 <HAL_GetTick>
 8000cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000cde:	e008      	b.n	8000cf2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ce0:	f7ff fb9a 	bl	8000418 <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d901      	bls.n	8000cf2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e027      	b.n	8000d42 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <HAL_RCC_OscConfig+0x658>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1f0      	bne.n	8000ce0 <HAL_RCC_OscConfig+0x5ec>
 8000cfe:	e01f      	b.n	8000d40 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d101      	bne.n	8000d0c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e01a      	b.n	8000d42 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8000d0c:	4b0f      	ldr	r3, [pc, #60]	; (8000d4c <HAL_RCC_OscConfig+0x658>)
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1c:	429a      	cmp	r2, r3
 8000d1e:	d10d      	bne.n	8000d3c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d106      	bne.n	8000d3c <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8000d2e:	697b      	ldr	r3, [r7, #20]
 8000d30:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d001      	beq.n	8000d40 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e000      	b.n	8000d42 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3720      	adds	r7, #32
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40023800 	.word	0x40023800
 8000d50:	42470060 	.word	0x42470060

08000d54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b084      	sub	sp, #16
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d101      	bne.n	8000d68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000d64:	2301      	movs	r3, #1
 8000d66:	e11a      	b.n	8000f9e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d68:	4b8f      	ldr	r3, [pc, #572]	; (8000fa8 <HAL_RCC_ClockConfig+0x254>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f003 0301 	and.w	r3, r3, #1
 8000d70:	683a      	ldr	r2, [r7, #0]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d919      	bls.n	8000daa <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d105      	bne.n	8000d88 <HAL_RCC_ClockConfig+0x34>
 8000d7c:	4b8a      	ldr	r3, [pc, #552]	; (8000fa8 <HAL_RCC_ClockConfig+0x254>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4a89      	ldr	r2, [pc, #548]	; (8000fa8 <HAL_RCC_ClockConfig+0x254>)
 8000d82:	f043 0304 	orr.w	r3, r3, #4
 8000d86:	6013      	str	r3, [r2, #0]
 8000d88:	4b87      	ldr	r3, [pc, #540]	; (8000fa8 <HAL_RCC_ClockConfig+0x254>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f023 0201 	bic.w	r2, r3, #1
 8000d90:	4985      	ldr	r1, [pc, #532]	; (8000fa8 <HAL_RCC_ClockConfig+0x254>)
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d98:	4b83      	ldr	r3, [pc, #524]	; (8000fa8 <HAL_RCC_ClockConfig+0x254>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	f003 0301 	and.w	r3, r3, #1
 8000da0:	683a      	ldr	r2, [r7, #0]
 8000da2:	429a      	cmp	r2, r3
 8000da4:	d001      	beq.n	8000daa <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8000da6:	2301      	movs	r3, #1
 8000da8:	e0f9      	b.n	8000f9e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d008      	beq.n	8000dc8 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000db6:	4b7d      	ldr	r3, [pc, #500]	; (8000fac <HAL_RCC_ClockConfig+0x258>)
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	497a      	ldr	r1, [pc, #488]	; (8000fac <HAL_RCC_ClockConfig+0x258>)
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	f000 808e 	beq.w	8000ef2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d107      	bne.n	8000dee <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000dde:	4b73      	ldr	r3, [pc, #460]	; (8000fac <HAL_RCC_ClockConfig+0x258>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d121      	bne.n	8000e2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e0d7      	b.n	8000f9e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b03      	cmp	r3, #3
 8000df4:	d107      	bne.n	8000e06 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8000df6:	4b6d      	ldr	r3, [pc, #436]	; (8000fac <HAL_RCC_ClockConfig+0x258>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d115      	bne.n	8000e2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8000e02:	2301      	movs	r3, #1
 8000e04:	e0cb      	b.n	8000f9e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b01      	cmp	r3, #1
 8000e0c:	d107      	bne.n	8000e1e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000e0e:	4b67      	ldr	r3, [pc, #412]	; (8000fac <HAL_RCC_ClockConfig+0x258>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d109      	bne.n	8000e2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e0bf      	b.n	8000f9e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8000e1e:	4b63      	ldr	r3, [pc, #396]	; (8000fac <HAL_RCC_ClockConfig+0x258>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d101      	bne.n	8000e2e <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	e0b7      	b.n	8000f9e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000e2e:	4b5f      	ldr	r3, [pc, #380]	; (8000fac <HAL_RCC_ClockConfig+0x258>)
 8000e30:	689b      	ldr	r3, [r3, #8]
 8000e32:	f023 0203 	bic.w	r2, r3, #3
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	495c      	ldr	r1, [pc, #368]	; (8000fac <HAL_RCC_ClockConfig+0x258>)
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000e40:	f7ff faea 	bl	8000418 <HAL_GetTick>
 8000e44:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d112      	bne.n	8000e74 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e4e:	e00a      	b.n	8000e66 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e50:	f7ff fae2 	bl	8000418 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e09b      	b.n	8000f9e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000e66:	4b51      	ldr	r3, [pc, #324]	; (8000fac <HAL_RCC_ClockConfig+0x258>)
 8000e68:	689b      	ldr	r3, [r3, #8]
 8000e6a:	f003 030c 	and.w	r3, r3, #12
 8000e6e:	2b08      	cmp	r3, #8
 8000e70:	d1ee      	bne.n	8000e50 <HAL_RCC_ClockConfig+0xfc>
 8000e72:	e03e      	b.n	8000ef2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	2b03      	cmp	r3, #3
 8000e7a:	d112      	bne.n	8000ea2 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e7c:	e00a      	b.n	8000e94 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e7e:	f7ff facb 	bl	8000418 <HAL_GetTick>
 8000e82:	4602      	mov	r2, r0
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d901      	bls.n	8000e94 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8000e90:	2303      	movs	r3, #3
 8000e92:	e084      	b.n	8000f9e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e94:	4b45      	ldr	r3, [pc, #276]	; (8000fac <HAL_RCC_ClockConfig+0x258>)
 8000e96:	689b      	ldr	r3, [r3, #8]
 8000e98:	f003 030c 	and.w	r3, r3, #12
 8000e9c:	2b0c      	cmp	r3, #12
 8000e9e:	d1ee      	bne.n	8000e7e <HAL_RCC_ClockConfig+0x12a>
 8000ea0:	e027      	b.n	8000ef2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d11d      	bne.n	8000ee6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eaa:	e00a      	b.n	8000ec2 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000eac:	f7ff fab4 	bl	8000418 <HAL_GetTick>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	1ad3      	subs	r3, r2, r3
 8000eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d901      	bls.n	8000ec2 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e06d      	b.n	8000f9e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ec2:	4b3a      	ldr	r3, [pc, #232]	; (8000fac <HAL_RCC_ClockConfig+0x258>)
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f003 030c 	and.w	r3, r3, #12
 8000eca:	2b04      	cmp	r3, #4
 8000ecc:	d1ee      	bne.n	8000eac <HAL_RCC_ClockConfig+0x158>
 8000ece:	e010      	b.n	8000ef2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ed0:	f7ff faa2 	bl	8000418 <HAL_GetTick>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d901      	bls.n	8000ee6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8000ee2:	2303      	movs	r3, #3
 8000ee4:	e05b      	b.n	8000f9e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000ee6:	4b31      	ldr	r3, [pc, #196]	; (8000fac <HAL_RCC_ClockConfig+0x258>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f003 030c 	and.w	r3, r3, #12
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1ee      	bne.n	8000ed0 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000ef2:	4b2d      	ldr	r3, [pc, #180]	; (8000fa8 <HAL_RCC_ClockConfig+0x254>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d219      	bcs.n	8000f34 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d105      	bne.n	8000f12 <HAL_RCC_ClockConfig+0x1be>
 8000f06:	4b28      	ldr	r3, [pc, #160]	; (8000fa8 <HAL_RCC_ClockConfig+0x254>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a27      	ldr	r2, [pc, #156]	; (8000fa8 <HAL_RCC_ClockConfig+0x254>)
 8000f0c:	f043 0304 	orr.w	r3, r3, #4
 8000f10:	6013      	str	r3, [r2, #0]
 8000f12:	4b25      	ldr	r3, [pc, #148]	; (8000fa8 <HAL_RCC_ClockConfig+0x254>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f023 0201 	bic.w	r2, r3, #1
 8000f1a:	4923      	ldr	r1, [pc, #140]	; (8000fa8 <HAL_RCC_ClockConfig+0x254>)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f22:	4b21      	ldr	r3, [pc, #132]	; (8000fa8 <HAL_RCC_ClockConfig+0x254>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	683a      	ldr	r2, [r7, #0]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d001      	beq.n	8000f34 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e034      	b.n	8000f9e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f003 0304 	and.w	r3, r3, #4
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d008      	beq.n	8000f52 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000f40:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <HAL_RCC_ClockConfig+0x258>)
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	4917      	ldr	r1, [pc, #92]	; (8000fac <HAL_RCC_ClockConfig+0x258>)
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f003 0308 	and.w	r3, r3, #8
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d009      	beq.n	8000f72 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000f5e:	4b13      	ldr	r3, [pc, #76]	; (8000fac <HAL_RCC_ClockConfig+0x258>)
 8000f60:	689b      	ldr	r3, [r3, #8]
 8000f62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	691b      	ldr	r3, [r3, #16]
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	490f      	ldr	r1, [pc, #60]	; (8000fac <HAL_RCC_ClockConfig+0x258>)
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000f72:	f000 f823 	bl	8000fbc <HAL_RCC_GetSysClockFreq>
 8000f76:	4601      	mov	r1, r0
 8000f78:	4b0c      	ldr	r3, [pc, #48]	; (8000fac <HAL_RCC_ClockConfig+0x258>)
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	091b      	lsrs	r3, r3, #4
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <HAL_RCC_ClockConfig+0x25c>)
 8000f84:	5cd3      	ldrb	r3, [r2, r3]
 8000f86:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8a:	4a0a      	ldr	r2, [pc, #40]	; (8000fb4 <HAL_RCC_ClockConfig+0x260>)
 8000f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <HAL_RCC_ClockConfig+0x264>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff f9f4 	bl	8000380 <HAL_InitTick>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	72fb      	strb	r3, [r7, #11]

  return status;
 8000f9c:	7afb      	ldrb	r3, [r7, #11]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40023c00 	.word	0x40023c00
 8000fac:	40023800 	.word	0x40023800
 8000fb0:	080011a8 	.word	0x080011a8
 8000fb4:	20000000 	.word	0x20000000
 8000fb8:	20000004 	.word	0x20000004

08000fbc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b087      	sub	sp, #28
 8000fc0:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <HAL_RCC_GetSysClockFreq+0xa0>)
 8000fc4:	689b      	ldr	r3, [r3, #8]
 8000fc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	f003 030c 	and.w	r3, r3, #12
 8000fce:	2b08      	cmp	r3, #8
 8000fd0:	d006      	beq.n	8000fe0 <HAL_RCC_GetSysClockFreq+0x24>
 8000fd2:	2b0c      	cmp	r3, #12
 8000fd4:	d007      	beq.n	8000fe6 <HAL_RCC_GetSysClockFreq+0x2a>
 8000fd6:	2b04      	cmp	r3, #4
 8000fd8:	d12c      	bne.n	8001034 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8000fda:	4b21      	ldr	r3, [pc, #132]	; (8001060 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000fdc:	613b      	str	r3, [r7, #16]
      break;
 8000fde:	e037      	b.n	8001050 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000fe0:	4b20      	ldr	r3, [pc, #128]	; (8001064 <HAL_RCC_GetSysClockFreq+0xa8>)
 8000fe2:	613b      	str	r3, [r7, #16]
      break;
 8000fe4:	e034      	b.n	8001050 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	0c9b      	lsrs	r3, r3, #18
 8000fea:	f003 030f 	and.w	r3, r3, #15
 8000fee:	4a1e      	ldr	r2, [pc, #120]	; (8001068 <HAL_RCC_GetSysClockFreq+0xac>)
 8000ff0:	5cd3      	ldrb	r3, [r2, r3]
 8000ff2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	0d9b      	lsrs	r3, r3, #22
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d008      	beq.n	800101e <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4a15      	ldr	r2, [pc, #84]	; (8001064 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001010:	fb02 f203 	mul.w	r2, r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	fbb2 f3f3 	udiv	r3, r2, r3
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	e007      	b.n	800102e <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	4a0f      	ldr	r2, [pc, #60]	; (8001060 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001022:	fb02 f203 	mul.w	r2, r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	fbb2 f3f3 	udiv	r3, r2, r3
 800102c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	613b      	str	r3, [r7, #16]
      break;
 8001032:	e00d      	b.n	8001050 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001034:	4b09      	ldr	r3, [pc, #36]	; (800105c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	0b5b      	lsrs	r3, r3, #13
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	3301      	adds	r3, #1
 8001044:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	613b      	str	r3, [r7, #16]
      break;
 800104e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001050:	693b      	ldr	r3, [r7, #16]
}
 8001052:	4618      	mov	r0, r3
 8001054:	371c      	adds	r7, #28
 8001056:	46bd      	mov	sp, r7
 8001058:	bc80      	pop	{r7}
 800105a:	4770      	bx	lr
 800105c:	40023800 	.word	0x40023800
 8001060:	00f42400 	.word	0x00f42400
 8001064:	007a1200 	.word	0x007a1200
 8001068:	0800119c 	.word	0x0800119c

0800106c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800106c:	b480      	push	{r7}
 800106e:	b087      	sub	sp, #28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001074:	2300      	movs	r3, #0
 8001076:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001078:	4b29      	ldr	r3, [pc, #164]	; (8001120 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d12c      	bne.n	80010de <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001084:	4b26      	ldr	r3, [pc, #152]	; (8001120 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001088:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800108c:	2b00      	cmp	r3, #0
 800108e:	d005      	beq.n	800109c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001090:	4b24      	ldr	r3, [pc, #144]	; (8001124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8001098:	617b      	str	r3, [r7, #20]
 800109a:	e016      	b.n	80010ca <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800109c:	4b20      	ldr	r3, [pc, #128]	; (8001120 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800109e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a0:	4a1f      	ldr	r2, [pc, #124]	; (8001120 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80010a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a6:	6253      	str	r3, [r2, #36]	; 0x24
 80010a8:	4b1d      	ldr	r3, [pc, #116]	; (8001120 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80010aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80010b4:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80010bc:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80010be:	4b18      	ldr	r3, [pc, #96]	; (8001120 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80010c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010c2:	4a17      	ldr	r2, [pc, #92]	; (8001120 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80010c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010c8:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80010d0:	d105      	bne.n	80010de <RCC_SetFlashLatencyFromMSIRange+0x72>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80010d8:	d101      	bne.n	80010de <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80010da:	2301      	movs	r3, #1
 80010dc:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d105      	bne.n	80010f0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80010e4:	4b10      	ldr	r3, [pc, #64]	; (8001128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80010ea:	f043 0304 	orr.w	r3, r3, #4
 80010ee:	6013      	str	r3, [r2, #0]
 80010f0:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f023 0201 	bic.w	r2, r3, #1
 80010f8:	490b      	ldr	r1, [pc, #44]	; (8001128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	429a      	cmp	r2, r3
 800110c:	d001      	beq.n	8001112 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8001112:	2300      	movs	r3, #0
}
 8001114:	4618      	mov	r0, r3
 8001116:	371c      	adds	r7, #28
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	40023800 	.word	0x40023800
 8001124:	40007000 	.word	0x40007000
 8001128:	40023c00 	.word	0x40023c00

0800112c <__libc_init_array>:
 800112c:	b570      	push	{r4, r5, r6, lr}
 800112e:	2500      	movs	r5, #0
 8001130:	4e0c      	ldr	r6, [pc, #48]	; (8001164 <__libc_init_array+0x38>)
 8001132:	4c0d      	ldr	r4, [pc, #52]	; (8001168 <__libc_init_array+0x3c>)
 8001134:	1ba4      	subs	r4, r4, r6
 8001136:	10a4      	asrs	r4, r4, #2
 8001138:	42a5      	cmp	r5, r4
 800113a:	d109      	bne.n	8001150 <__libc_init_array+0x24>
 800113c:	f000 f822 	bl	8001184 <_init>
 8001140:	2500      	movs	r5, #0
 8001142:	4e0a      	ldr	r6, [pc, #40]	; (800116c <__libc_init_array+0x40>)
 8001144:	4c0a      	ldr	r4, [pc, #40]	; (8001170 <__libc_init_array+0x44>)
 8001146:	1ba4      	subs	r4, r4, r6
 8001148:	10a4      	asrs	r4, r4, #2
 800114a:	42a5      	cmp	r5, r4
 800114c:	d105      	bne.n	800115a <__libc_init_array+0x2e>
 800114e:	bd70      	pop	{r4, r5, r6, pc}
 8001150:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001154:	4798      	blx	r3
 8001156:	3501      	adds	r5, #1
 8001158:	e7ee      	b.n	8001138 <__libc_init_array+0xc>
 800115a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800115e:	4798      	blx	r3
 8001160:	3501      	adds	r5, #1
 8001162:	e7f2      	b.n	800114a <__libc_init_array+0x1e>
 8001164:	080011b8 	.word	0x080011b8
 8001168:	080011b8 	.word	0x080011b8
 800116c:	080011b8 	.word	0x080011b8
 8001170:	080011bc 	.word	0x080011bc

08001174 <memset>:
 8001174:	4603      	mov	r3, r0
 8001176:	4402      	add	r2, r0
 8001178:	4293      	cmp	r3, r2
 800117a:	d100      	bne.n	800117e <memset+0xa>
 800117c:	4770      	bx	lr
 800117e:	f803 1b01 	strb.w	r1, [r3], #1
 8001182:	e7f9      	b.n	8001178 <memset+0x4>

08001184 <_init>:
 8001184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001186:	bf00      	nop
 8001188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800118a:	bc08      	pop	{r3}
 800118c:	469e      	mov	lr, r3
 800118e:	4770      	bx	lr

08001190 <_fini>:
 8001190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001192:	bf00      	nop
 8001194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001196:	bc08      	pop	{r3}
 8001198:	469e      	mov	lr, r3
 800119a:	4770      	bx	lr

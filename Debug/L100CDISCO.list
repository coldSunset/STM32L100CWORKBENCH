
L100CDISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dd0  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08001f0c  08001f0c  00011f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f30  08001f30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f30  08001f30  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f30  08001f30  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f30  08001f30  00011f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001f34  08001f34  00011f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001f38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  08001f44  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  08001f44  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000694b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016e3  00000000  00000000  00026980  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006b0  00000000  00000000  00028068  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000005d8  00000000  00000000  00028718  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001517d  00000000  00000000  00028cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006b90  00000000  00000000  0003de6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000806c2  00000000  00000000  000449fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c50bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000018e0  00000000  00000000  000c513c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08001ef4 	.word	0x08001ef4

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08001ef4 	.word	0x08001ef4

0800017c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800017c:	b580      	push	{r7, lr}
 800017e:	b082      	sub	sp, #8
 8000180:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000182:	4b0c      	ldr	r3, [pc, #48]	; (80001b4 <MX_DMA_Init+0x38>)
 8000184:	69db      	ldr	r3, [r3, #28]
 8000186:	4a0b      	ldr	r2, [pc, #44]	; (80001b4 <MX_DMA_Init+0x38>)
 8000188:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800018c:	61d3      	str	r3, [r2, #28]
 800018e:	4b09      	ldr	r3, [pc, #36]	; (80001b4 <MX_DMA_Init+0x38>)
 8000190:	69db      	ldr	r3, [r3, #28]
 8000192:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000196:	607b      	str	r3, [r7, #4]
 8000198:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800019a:	2200      	movs	r2, #0
 800019c:	2100      	movs	r1, #0
 800019e:	2010      	movs	r0, #16
 80001a0:	f000 fb7f 	bl	80008a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80001a4:	2010      	movs	r0, #16
 80001a6:	f000 fb98 	bl	80008da <HAL_NVIC_EnableIRQ>

}
 80001aa:	bf00      	nop
 80001ac:	3708      	adds	r7, #8
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bd80      	pop	{r7, pc}
 80001b2:	bf00      	nop
 80001b4:	40023800 	.word	0x40023800

080001b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001b8:	b580      	push	{r7, lr}
 80001ba:	b08a      	sub	sp, #40	; 0x28
 80001bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001be:	f107 0314 	add.w	r3, r7, #20
 80001c2:	2200      	movs	r2, #0
 80001c4:	601a      	str	r2, [r3, #0]
 80001c6:	605a      	str	r2, [r3, #4]
 80001c8:	609a      	str	r2, [r3, #8]
 80001ca:	60da      	str	r2, [r3, #12]
 80001cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ce:	4b2a      	ldr	r3, [pc, #168]	; (8000278 <MX_GPIO_Init+0xc0>)
 80001d0:	69db      	ldr	r3, [r3, #28]
 80001d2:	4a29      	ldr	r2, [pc, #164]	; (8000278 <MX_GPIO_Init+0xc0>)
 80001d4:	f043 0304 	orr.w	r3, r3, #4
 80001d8:	61d3      	str	r3, [r2, #28]
 80001da:	4b27      	ldr	r3, [pc, #156]	; (8000278 <MX_GPIO_Init+0xc0>)
 80001dc:	69db      	ldr	r3, [r3, #28]
 80001de:	f003 0304 	and.w	r3, r3, #4
 80001e2:	613b      	str	r3, [r7, #16]
 80001e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80001e6:	4b24      	ldr	r3, [pc, #144]	; (8000278 <MX_GPIO_Init+0xc0>)
 80001e8:	69db      	ldr	r3, [r3, #28]
 80001ea:	4a23      	ldr	r2, [pc, #140]	; (8000278 <MX_GPIO_Init+0xc0>)
 80001ec:	f043 0320 	orr.w	r3, r3, #32
 80001f0:	61d3      	str	r3, [r2, #28]
 80001f2:	4b21      	ldr	r3, [pc, #132]	; (8000278 <MX_GPIO_Init+0xc0>)
 80001f4:	69db      	ldr	r3, [r3, #28]
 80001f6:	f003 0320 	and.w	r3, r3, #32
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001fe:	4b1e      	ldr	r3, [pc, #120]	; (8000278 <MX_GPIO_Init+0xc0>)
 8000200:	69db      	ldr	r3, [r3, #28]
 8000202:	4a1d      	ldr	r2, [pc, #116]	; (8000278 <MX_GPIO_Init+0xc0>)
 8000204:	f043 0301 	orr.w	r3, r3, #1
 8000208:	61d3      	str	r3, [r2, #28]
 800020a:	4b1b      	ldr	r3, [pc, #108]	; (8000278 <MX_GPIO_Init+0xc0>)
 800020c:	69db      	ldr	r3, [r3, #28]
 800020e:	f003 0301 	and.w	r3, r3, #1
 8000212:	60bb      	str	r3, [r7, #8]
 8000214:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000216:	4b18      	ldr	r3, [pc, #96]	; (8000278 <MX_GPIO_Init+0xc0>)
 8000218:	69db      	ldr	r3, [r3, #28]
 800021a:	4a17      	ldr	r2, [pc, #92]	; (8000278 <MX_GPIO_Init+0xc0>)
 800021c:	f043 0302 	orr.w	r3, r3, #2
 8000220:	61d3      	str	r3, [r2, #28]
 8000222:	4b15      	ldr	r3, [pc, #84]	; (8000278 <MX_GPIO_Init+0xc0>)
 8000224:	69db      	ldr	r3, [r3, #28]
 8000226:	f003 0302 	and.w	r3, r3, #2
 800022a:	607b      	str	r3, [r7, #4]
 800022c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800022e:	2200      	movs	r2, #0
 8000230:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000234:	4811      	ldr	r0, [pc, #68]	; (800027c <MX_GPIO_Init+0xc4>)
 8000236:	f000 fe05 	bl	8000e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800023a:	2301      	movs	r3, #1
 800023c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800023e:	4b10      	ldr	r3, [pc, #64]	; (8000280 <MX_GPIO_Init+0xc8>)
 8000240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000242:	2300      	movs	r3, #0
 8000244:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000246:	f107 0314 	add.w	r3, r7, #20
 800024a:	4619      	mov	r1, r3
 800024c:	480d      	ldr	r0, [pc, #52]	; (8000284 <MX_GPIO_Init+0xcc>)
 800024e:	f000 fc83 	bl	8000b58 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000252:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000258:	2301      	movs	r3, #1
 800025a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800025c:	2300      	movs	r3, #0
 800025e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000260:	2300      	movs	r3, #0
 8000262:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000264:	f107 0314 	add.w	r3, r7, #20
 8000268:	4619      	mov	r1, r3
 800026a:	4804      	ldr	r0, [pc, #16]	; (800027c <MX_GPIO_Init+0xc4>)
 800026c:	f000 fc74 	bl	8000b58 <HAL_GPIO_Init>

}
 8000270:	bf00      	nop
 8000272:	3728      	adds	r7, #40	; 0x28
 8000274:	46bd      	mov	sp, r7
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40023800 	.word	0x40023800
 800027c:	40020800 	.word	0x40020800
 8000280:	10110000 	.word	0x10110000
 8000284:	40020000 	.word	0x40020000

08000288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800028c:	f000 f9c3 	bl	8000616 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000290:	f000 f818 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000294:	f7ff ff90 	bl	80001b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000298:	f7ff ff70 	bl	800017c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800029c:	f000 f8fe 	bl	800049c <MX_USART2_UART_Init>

    /* USER CODE END WHILE */
    /* USER CODE BEGIN 3 */


	  HAL_UART_Receive(&huart2, (uint8_t*)readBuf, 1, HAL_MAX_DELAY);
 80002a0:	f04f 33ff 	mov.w	r3, #4294967295
 80002a4:	2201      	movs	r2, #1
 80002a6:	4639      	mov	r1, r7
 80002a8:	4804      	ldr	r0, [pc, #16]	; (80002bc <main+0x34>)
 80002aa:	f001 fb7e 	bl	80019aa <HAL_UART_Receive>
		  GPIOC -> ODR |= 255;
 80002ae:	4b04      	ldr	r3, [pc, #16]	; (80002c0 <main+0x38>)
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	4a03      	ldr	r2, [pc, #12]	; (80002c0 <main+0x38>)
 80002b4:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
 80002b8:	6153      	str	r3, [r2, #20]
	  HAL_UART_Receive(&huart2, (uint8_t*)readBuf, 1, HAL_MAX_DELAY);
 80002ba:	e7f1      	b.n	80002a0 <main+0x18>
 80002bc:	2000006c 	.word	0x2000006c
 80002c0:	40020800 	.word	0x40020800

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b092      	sub	sp, #72	; 0x48
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	f107 0314 	add.w	r3, r7, #20
 80002ce:	2234      	movs	r2, #52	; 0x34
 80002d0:	2100      	movs	r1, #0
 80002d2:	4618      	mov	r0, r3
 80002d4:	f001 fe06 	bl	8001ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d8:	463b      	mov	r3, r7
 80002da:	2200      	movs	r2, #0
 80002dc:	601a      	str	r2, [r3, #0]
 80002de:	605a      	str	r2, [r3, #4]
 80002e0:	609a      	str	r2, [r3, #8]
 80002e2:	60da      	str	r2, [r3, #12]
 80002e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002e6:	4b1d      	ldr	r3, [pc, #116]	; (800035c <SystemClock_Config+0x98>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80002ee:	4a1b      	ldr	r2, [pc, #108]	; (800035c <SystemClock_Config+0x98>)
 80002f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002f4:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002f6:	2302      	movs	r3, #2
 80002f8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002fa:	2301      	movs	r3, #1
 80002fc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002fe:	2310      	movs	r3, #16
 8000300:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000302:	2302      	movs	r3, #2
 8000304:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000306:	2300      	movs	r3, #0
 8000308:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800030a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800030e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8000310:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000314:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000316:	f107 0314 	add.w	r3, r7, #20
 800031a:	4618      	mov	r0, r3
 800031c:	f000 fdaa 	bl	8000e74 <HAL_RCC_OscConfig>
 8000320:	4603      	mov	r3, r0
 8000322:	2b00      	cmp	r3, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000326:	f000 f81b 	bl	8000360 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032a:	230f      	movs	r3, #15
 800032c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032e:	2303      	movs	r3, #3
 8000330:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000332:	2300      	movs	r3, #0
 8000334:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000336:	2300      	movs	r3, #0
 8000338:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800033e:	463b      	mov	r3, r7
 8000340:	2101      	movs	r1, #1
 8000342:	4618      	mov	r0, r3
 8000344:	f001 f8c6 	bl	80014d4 <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800034e:	f000 f807 	bl	8000360 <Error_Handler>
  }
}
 8000352:	bf00      	nop
 8000354:	3748      	adds	r7, #72	; 0x48
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
 800035a:	bf00      	nop
 800035c:	40007000 	.word	0x40007000

08000360 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr

0800036c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	b084      	sub	sp, #16
 8000370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000372:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <HAL_MspInit+0x5c>)
 8000374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000376:	4a14      	ldr	r2, [pc, #80]	; (80003c8 <HAL_MspInit+0x5c>)
 8000378:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800037c:	6253      	str	r3, [r2, #36]	; 0x24
 800037e:	4b12      	ldr	r3, [pc, #72]	; (80003c8 <HAL_MspInit+0x5c>)
 8000380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000382:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000386:	60fb      	str	r3, [r7, #12]
 8000388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800038a:	4b0f      	ldr	r3, [pc, #60]	; (80003c8 <HAL_MspInit+0x5c>)
 800038c:	6a1b      	ldr	r3, [r3, #32]
 800038e:	4a0e      	ldr	r2, [pc, #56]	; (80003c8 <HAL_MspInit+0x5c>)
 8000390:	f043 0301 	orr.w	r3, r3, #1
 8000394:	6213      	str	r3, [r2, #32]
 8000396:	4b0c      	ldr	r3, [pc, #48]	; (80003c8 <HAL_MspInit+0x5c>)
 8000398:	6a1b      	ldr	r3, [r3, #32]
 800039a:	f003 0301 	and.w	r3, r3, #1
 800039e:	60bb      	str	r3, [r7, #8]
 80003a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003a2:	4b09      	ldr	r3, [pc, #36]	; (80003c8 <HAL_MspInit+0x5c>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a08      	ldr	r2, [pc, #32]	; (80003c8 <HAL_MspInit+0x5c>)
 80003a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24
 80003ae:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <HAL_MspInit+0x5c>)
 80003b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80003ba:	2007      	movs	r0, #7
 80003bc:	f000 fa66 	bl	800088c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c0:	bf00      	nop
 80003c2:	3710      	adds	r7, #16
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40023800 	.word	0x40023800

080003cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003cc:	b480      	push	{r7}
 80003ce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80003d0:	bf00      	nop
 80003d2:	46bd      	mov	sp, r7
 80003d4:	bc80      	pop	{r7}
 80003d6:	4770      	bx	lr

080003d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003dc:	e7fe      	b.n	80003dc <HardFault_Handler+0x4>

080003de <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003de:	b480      	push	{r7}
 80003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003e2:	e7fe      	b.n	80003e2 <MemManage_Handler+0x4>

080003e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003e4:	b480      	push	{r7}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003e8:	e7fe      	b.n	80003e8 <BusFault_Handler+0x4>

080003ea <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003ea:	b480      	push	{r7}
 80003ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003ee:	e7fe      	b.n	80003ee <UsageFault_Handler+0x4>

080003f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr

080003fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr

08000408 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr

08000414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000418:	f000 f950 	bl	80006bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}

08000420 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000424:	4802      	ldr	r0, [pc, #8]	; (8000430 <DMA1_Channel6_IRQHandler+0x10>)
 8000426:	f000 fae7 	bl	80009f8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	20000028 	.word	0x20000028

08000434 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000434:	b480      	push	{r7}
 8000436:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000438:	4b15      	ldr	r3, [pc, #84]	; (8000490 <SystemInit+0x5c>)
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	4a14      	ldr	r2, [pc, #80]	; (8000490 <SystemInit+0x5c>)
 800043e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000442:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000444:	4b12      	ldr	r3, [pc, #72]	; (8000490 <SystemInit+0x5c>)
 8000446:	689a      	ldr	r2, [r3, #8]
 8000448:	4911      	ldr	r1, [pc, #68]	; (8000490 <SystemInit+0x5c>)
 800044a:	4b12      	ldr	r3, [pc, #72]	; (8000494 <SystemInit+0x60>)
 800044c:	4013      	ands	r3, r2
 800044e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000450:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <SystemInit+0x5c>)
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <SystemInit+0x5c>)
 8000456:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 800045a:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 800045e:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000460:	4b0b      	ldr	r3, [pc, #44]	; (8000490 <SystemInit+0x5c>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	4a0a      	ldr	r2, [pc, #40]	; (8000490 <SystemInit+0x5c>)
 8000466:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800046a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 800046c:	4b08      	ldr	r3, [pc, #32]	; (8000490 <SystemInit+0x5c>)
 800046e:	689b      	ldr	r3, [r3, #8]
 8000470:	4a07      	ldr	r2, [pc, #28]	; (8000490 <SystemInit+0x5c>)
 8000472:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8000476:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000478:	4b05      	ldr	r3, [pc, #20]	; (8000490 <SystemInit+0x5c>)
 800047a:	2200      	movs	r2, #0
 800047c:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <SystemInit+0x64>)
 8000480:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000484:	609a      	str	r2, [r3, #8]
#endif
}
 8000486:	bf00      	nop
 8000488:	46bd      	mov	sp, r7
 800048a:	bc80      	pop	{r7}
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	40023800 	.word	0x40023800
 8000494:	88ffc00c 	.word	0x88ffc00c
 8000498:	e000ed00 	.word	0xe000ed00

0800049c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 80004a0:	4b11      	ldr	r3, [pc, #68]	; (80004e8 <MX_USART2_UART_Init+0x4c>)
 80004a2:	4a12      	ldr	r2, [pc, #72]	; (80004ec <MX_USART2_UART_Init+0x50>)
 80004a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80004a6:	4b10      	ldr	r3, [pc, #64]	; (80004e8 <MX_USART2_UART_Init+0x4c>)
 80004a8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80004ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80004ae:	4b0e      	ldr	r3, [pc, #56]	; (80004e8 <MX_USART2_UART_Init+0x4c>)
 80004b0:	2200      	movs	r2, #0
 80004b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004b4:	4b0c      	ldr	r3, [pc, #48]	; (80004e8 <MX_USART2_UART_Init+0x4c>)
 80004b6:	2200      	movs	r2, #0
 80004b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004ba:	4b0b      	ldr	r3, [pc, #44]	; (80004e8 <MX_USART2_UART_Init+0x4c>)
 80004bc:	2200      	movs	r2, #0
 80004be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004c0:	4b09      	ldr	r3, [pc, #36]	; (80004e8 <MX_USART2_UART_Init+0x4c>)
 80004c2:	220c      	movs	r2, #12
 80004c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004c6:	4b08      	ldr	r3, [pc, #32]	; (80004e8 <MX_USART2_UART_Init+0x4c>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004cc:	4b06      	ldr	r3, [pc, #24]	; (80004e8 <MX_USART2_UART_Init+0x4c>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004d2:	4805      	ldr	r0, [pc, #20]	; (80004e8 <MX_USART2_UART_Init+0x4c>)
 80004d4:	f001 fa1c 	bl	8001910 <HAL_UART_Init>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80004de:	f7ff ff3f 	bl	8000360 <Error_Handler>
  }

}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	bf00      	nop
 80004e8:	2000006c 	.word	0x2000006c
 80004ec:	40004400 	.word	0x40004400

080004f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b08a      	sub	sp, #40	; 0x28
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f8:	f107 0314 	add.w	r3, r7, #20
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
 8000506:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a2a      	ldr	r2, [pc, #168]	; (80005b8 <HAL_UART_MspInit+0xc8>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d14d      	bne.n	80005ae <HAL_UART_MspInit+0xbe>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000512:	4b2a      	ldr	r3, [pc, #168]	; (80005bc <HAL_UART_MspInit+0xcc>)
 8000514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000516:	4a29      	ldr	r2, [pc, #164]	; (80005bc <HAL_UART_MspInit+0xcc>)
 8000518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800051c:	6253      	str	r3, [r2, #36]	; 0x24
 800051e:	4b27      	ldr	r3, [pc, #156]	; (80005bc <HAL_UART_MspInit+0xcc>)
 8000520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b24      	ldr	r3, [pc, #144]	; (80005bc <HAL_UART_MspInit+0xcc>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	4a23      	ldr	r2, [pc, #140]	; (80005bc <HAL_UART_MspInit+0xcc>)
 8000530:	f043 0301 	orr.w	r3, r3, #1
 8000534:	61d3      	str	r3, [r2, #28]
 8000536:	4b21      	ldr	r3, [pc, #132]	; (80005bc <HAL_UART_MspInit+0xcc>)
 8000538:	69db      	ldr	r3, [r3, #28]
 800053a:	f003 0301 	and.w	r3, r3, #1
 800053e:	60fb      	str	r3, [r7, #12]
 8000540:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000542:	230c      	movs	r3, #12
 8000544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000546:	2302      	movs	r3, #2
 8000548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054a:	2300      	movs	r3, #0
 800054c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800054e:	2303      	movs	r3, #3
 8000550:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000552:	2307      	movs	r3, #7
 8000554:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000556:	f107 0314 	add.w	r3, r7, #20
 800055a:	4619      	mov	r1, r3
 800055c:	4818      	ldr	r0, [pc, #96]	; (80005c0 <HAL_UART_MspInit+0xd0>)
 800055e:	f000 fafb 	bl	8000b58 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000562:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <HAL_UART_MspInit+0xd4>)
 8000564:	4a18      	ldr	r2, [pc, #96]	; (80005c8 <HAL_UART_MspInit+0xd8>)
 8000566:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000568:	4b16      	ldr	r3, [pc, #88]	; (80005c4 <HAL_UART_MspInit+0xd4>)
 800056a:	2200      	movs	r2, #0
 800056c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <HAL_UART_MspInit+0xd4>)
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000574:	4b13      	ldr	r3, [pc, #76]	; (80005c4 <HAL_UART_MspInit+0xd4>)
 8000576:	2280      	movs	r2, #128	; 0x80
 8000578:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <HAL_UART_MspInit+0xd4>)
 800057c:	2200      	movs	r2, #0
 800057e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000580:	4b10      	ldr	r3, [pc, #64]	; (80005c4 <HAL_UART_MspInit+0xd4>)
 8000582:	2200      	movs	r2, #0
 8000584:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <HAL_UART_MspInit+0xd4>)
 8000588:	2220      	movs	r2, #32
 800058a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800058c:	4b0d      	ldr	r3, [pc, #52]	; (80005c4 <HAL_UART_MspInit+0xd4>)
 800058e:	2200      	movs	r2, #0
 8000590:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000592:	480c      	ldr	r0, [pc, #48]	; (80005c4 <HAL_UART_MspInit+0xd4>)
 8000594:	f000 f9bc 	bl	8000910 <HAL_DMA_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <HAL_UART_MspInit+0xb2>
    {
      Error_Handler();
 800059e:	f7ff fedf 	bl	8000360 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	4a07      	ldr	r2, [pc, #28]	; (80005c4 <HAL_UART_MspInit+0xd4>)
 80005a6:	635a      	str	r2, [r3, #52]	; 0x34
 80005a8:	4a06      	ldr	r2, [pc, #24]	; (80005c4 <HAL_UART_MspInit+0xd4>)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80005ae:	bf00      	nop
 80005b0:	3728      	adds	r7, #40	; 0x28
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40004400 	.word	0x40004400
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40020000 	.word	0x40020000
 80005c4:	20000028 	.word	0x20000028
 80005c8:	4002606c 	.word	0x4002606c

080005cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80005cc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80005ce:	e003      	b.n	80005d8 <LoopCopyDataInit>

080005d0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80005d0:	4b0b      	ldr	r3, [pc, #44]	; (8000600 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80005d2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80005d4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80005d6:	3104      	adds	r1, #4

080005d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80005d8:	480a      	ldr	r0, [pc, #40]	; (8000604 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80005dc:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80005de:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80005e0:	d3f6      	bcc.n	80005d0 <CopyDataInit>
  ldr r2, =_sbss
 80005e2:	4a0a      	ldr	r2, [pc, #40]	; (800060c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80005e4:	e002      	b.n	80005ec <LoopFillZerobss>

080005e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80005e6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80005e8:	f842 3b04 	str.w	r3, [r2], #4

080005ec <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80005ee:	429a      	cmp	r2, r3
  bcc FillZerobss
 80005f0:	d3f9      	bcc.n	80005e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80005f2:	f7ff ff1f 	bl	8000434 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005f6:	f001 fc51 	bl	8001e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005fa:	f7ff fe45 	bl	8000288 <main>
  bx lr
 80005fe:	4770      	bx	lr
  ldr r3, =_sidata
 8000600:	08001f38 	.word	0x08001f38
  ldr r0, =_sdata
 8000604:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000608:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 800060c:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000610:	200000b0 	.word	0x200000b0

08000614 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000614:	e7fe      	b.n	8000614 <ADC1_IRQHandler>

08000616 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000616:	b580      	push	{r7, lr}
 8000618:	b082      	sub	sp, #8
 800061a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800061c:	2300      	movs	r3, #0
 800061e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000620:	2003      	movs	r0, #3
 8000622:	f000 f933 	bl	800088c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000626:	2000      	movs	r0, #0
 8000628:	f000 f80e 	bl	8000648 <HAL_InitTick>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d002      	beq.n	8000638 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000632:	2301      	movs	r3, #1
 8000634:	71fb      	strb	r3, [r7, #7]
 8000636:	e001      	b.n	800063c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000638:	f7ff fe98 	bl	800036c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800063c:	79fb      	ldrb	r3, [r7, #7]
}
 800063e:	4618      	mov	r0, r3
 8000640:	3708      	adds	r7, #8
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
	...

08000648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b084      	sub	sp, #16
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000650:	2300      	movs	r3, #0
 8000652:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000654:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <HAL_InitTick+0x68>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d022      	beq.n	80006a2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <HAL_InitTick+0x6c>)
 800065e:	681a      	ldr	r2, [r3, #0]
 8000660:	4b13      	ldr	r3, [pc, #76]	; (80006b0 <HAL_InitTick+0x68>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000668:	fbb1 f3f3 	udiv	r3, r1, r3
 800066c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000670:	4618      	mov	r0, r3
 8000672:	f000 f940 	bl	80008f6 <HAL_SYSTICK_Config>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d10f      	bne.n	800069c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2b0f      	cmp	r3, #15
 8000680:	d809      	bhi.n	8000696 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000682:	2200      	movs	r2, #0
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	f04f 30ff 	mov.w	r0, #4294967295
 800068a:	f000 f90a 	bl	80008a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800068e:	4a0a      	ldr	r2, [pc, #40]	; (80006b8 <HAL_InitTick+0x70>)
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	6013      	str	r3, [r2, #0]
 8000694:	e007      	b.n	80006a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000696:	2301      	movs	r3, #1
 8000698:	73fb      	strb	r3, [r7, #15]
 800069a:	e004      	b.n	80006a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800069c:	2301      	movs	r3, #1
 800069e:	73fb      	strb	r3, [r7, #15]
 80006a0:	e001      	b.n	80006a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006a2:	2301      	movs	r3, #1
 80006a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000008 	.word	0x20000008
 80006b4:	20000000 	.word	0x20000000
 80006b8:	20000004 	.word	0x20000004

080006bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006c0:	4b05      	ldr	r3, [pc, #20]	; (80006d8 <HAL_IncTick+0x1c>)
 80006c2:	681a      	ldr	r2, [r3, #0]
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <HAL_IncTick+0x20>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4413      	add	r3, r2
 80006ca:	4a03      	ldr	r2, [pc, #12]	; (80006d8 <HAL_IncTick+0x1c>)
 80006cc:	6013      	str	r3, [r2, #0]
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	200000ac 	.word	0x200000ac
 80006dc:	20000008 	.word	0x20000008

080006e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return uwTick;
 80006e4:	4b02      	ldr	r3, [pc, #8]	; (80006f0 <HAL_GetTick+0x10>)
 80006e6:	681b      	ldr	r3, [r3, #0]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bc80      	pop	{r7}
 80006ee:	4770      	bx	lr
 80006f0:	200000ac 	.word	0x200000ac

080006f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b085      	sub	sp, #20
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	f003 0307 	and.w	r3, r3, #7
 8000702:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000704:	4b0c      	ldr	r3, [pc, #48]	; (8000738 <__NVIC_SetPriorityGrouping+0x44>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800070a:	68ba      	ldr	r2, [r7, #8]
 800070c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000710:	4013      	ands	r3, r2
 8000712:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800071c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000720:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000724:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000726:	4a04      	ldr	r2, [pc, #16]	; (8000738 <__NVIC_SetPriorityGrouping+0x44>)
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	60d3      	str	r3, [r2, #12]
}
 800072c:	bf00      	nop
 800072e:	3714      	adds	r7, #20
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000740:	4b04      	ldr	r3, [pc, #16]	; (8000754 <__NVIC_GetPriorityGrouping+0x18>)
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	0a1b      	lsrs	r3, r3, #8
 8000746:	f003 0307 	and.w	r3, r3, #7
}
 800074a:	4618      	mov	r0, r3
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000ed00 	.word	0xe000ed00

08000758 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	2b00      	cmp	r3, #0
 8000768:	db0b      	blt.n	8000782 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800076a:	79fb      	ldrb	r3, [r7, #7]
 800076c:	f003 021f 	and.w	r2, r3, #31
 8000770:	4906      	ldr	r1, [pc, #24]	; (800078c <__NVIC_EnableIRQ+0x34>)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	095b      	lsrs	r3, r3, #5
 8000778:	2001      	movs	r0, #1
 800077a:	fa00 f202 	lsl.w	r2, r0, r2
 800077e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000782:	bf00      	nop
 8000784:	370c      	adds	r7, #12
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	e000e100 	.word	0xe000e100

08000790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	6039      	str	r1, [r7, #0]
 800079a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800079c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	db0a      	blt.n	80007ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	b2da      	uxtb	r2, r3
 80007a8:	490c      	ldr	r1, [pc, #48]	; (80007dc <__NVIC_SetPriority+0x4c>)
 80007aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ae:	0112      	lsls	r2, r2, #4
 80007b0:	b2d2      	uxtb	r2, r2
 80007b2:	440b      	add	r3, r1
 80007b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007b8:	e00a      	b.n	80007d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	b2da      	uxtb	r2, r3
 80007be:	4908      	ldr	r1, [pc, #32]	; (80007e0 <__NVIC_SetPriority+0x50>)
 80007c0:	79fb      	ldrb	r3, [r7, #7]
 80007c2:	f003 030f 	and.w	r3, r3, #15
 80007c6:	3b04      	subs	r3, #4
 80007c8:	0112      	lsls	r2, r2, #4
 80007ca:	b2d2      	uxtb	r2, r2
 80007cc:	440b      	add	r3, r1
 80007ce:	761a      	strb	r2, [r3, #24]
}
 80007d0:	bf00      	nop
 80007d2:	370c      	adds	r7, #12
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bc80      	pop	{r7}
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000e100 	.word	0xe000e100
 80007e0:	e000ed00 	.word	0xe000ed00

080007e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b089      	sub	sp, #36	; 0x24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	60f8      	str	r0, [r7, #12]
 80007ec:	60b9      	str	r1, [r7, #8]
 80007ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	f003 0307 	and.w	r3, r3, #7
 80007f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007f8:	69fb      	ldr	r3, [r7, #28]
 80007fa:	f1c3 0307 	rsb	r3, r3, #7
 80007fe:	2b04      	cmp	r3, #4
 8000800:	bf28      	it	cs
 8000802:	2304      	movcs	r3, #4
 8000804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000806:	69fb      	ldr	r3, [r7, #28]
 8000808:	3304      	adds	r3, #4
 800080a:	2b06      	cmp	r3, #6
 800080c:	d902      	bls.n	8000814 <NVIC_EncodePriority+0x30>
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	3b03      	subs	r3, #3
 8000812:	e000      	b.n	8000816 <NVIC_EncodePriority+0x32>
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000818:	f04f 32ff 	mov.w	r2, #4294967295
 800081c:	69bb      	ldr	r3, [r7, #24]
 800081e:	fa02 f303 	lsl.w	r3, r2, r3
 8000822:	43da      	mvns	r2, r3
 8000824:	68bb      	ldr	r3, [r7, #8]
 8000826:	401a      	ands	r2, r3
 8000828:	697b      	ldr	r3, [r7, #20]
 800082a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800082c:	f04f 31ff 	mov.w	r1, #4294967295
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	fa01 f303 	lsl.w	r3, r1, r3
 8000836:	43d9      	mvns	r1, r3
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800083c:	4313      	orrs	r3, r2
         );
}
 800083e:	4618      	mov	r0, r3
 8000840:	3724      	adds	r7, #36	; 0x24
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b082      	sub	sp, #8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3b01      	subs	r3, #1
 8000854:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000858:	d301      	bcc.n	800085e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800085a:	2301      	movs	r3, #1
 800085c:	e00f      	b.n	800087e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800085e:	4a0a      	ldr	r2, [pc, #40]	; (8000888 <SysTick_Config+0x40>)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	3b01      	subs	r3, #1
 8000864:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000866:	210f      	movs	r1, #15
 8000868:	f04f 30ff 	mov.w	r0, #4294967295
 800086c:	f7ff ff90 	bl	8000790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000870:	4b05      	ldr	r3, [pc, #20]	; (8000888 <SysTick_Config+0x40>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000876:	4b04      	ldr	r3, [pc, #16]	; (8000888 <SysTick_Config+0x40>)
 8000878:	2207      	movs	r2, #7
 800087a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800087c:	2300      	movs	r3, #0
}
 800087e:	4618      	mov	r0, r3
 8000880:	3708      	adds	r7, #8
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	e000e010 	.word	0xe000e010

0800088c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000894:	6878      	ldr	r0, [r7, #4]
 8000896:	f7ff ff2d 	bl	80006f4 <__NVIC_SetPriorityGrouping>
}
 800089a:	bf00      	nop
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}

080008a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a2:	b580      	push	{r7, lr}
 80008a4:	b086      	sub	sp, #24
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	4603      	mov	r3, r0
 80008aa:	60b9      	str	r1, [r7, #8]
 80008ac:	607a      	str	r2, [r7, #4]
 80008ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80008b4:	f7ff ff42 	bl	800073c <__NVIC_GetPriorityGrouping>
 80008b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008ba:	687a      	ldr	r2, [r7, #4]
 80008bc:	68b9      	ldr	r1, [r7, #8]
 80008be:	6978      	ldr	r0, [r7, #20]
 80008c0:	f7ff ff90 	bl	80007e4 <NVIC_EncodePriority>
 80008c4:	4602      	mov	r2, r0
 80008c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ca:	4611      	mov	r1, r2
 80008cc:	4618      	mov	r0, r3
 80008ce:	f7ff ff5f 	bl	8000790 <__NVIC_SetPriority>
}
 80008d2:	bf00      	nop
 80008d4:	3718      	adds	r7, #24
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}

080008da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008da:	b580      	push	{r7, lr}
 80008dc:	b082      	sub	sp, #8
 80008de:	af00      	add	r7, sp, #0
 80008e0:	4603      	mov	r3, r0
 80008e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e8:	4618      	mov	r0, r3
 80008ea:	f7ff ff35 	bl	8000758 <__NVIC_EnableIRQ>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b082      	sub	sp, #8
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008fe:	6878      	ldr	r0, [r7, #4]
 8000900:	f7ff ffa2 	bl	8000848 <SysTick_Config>
 8000904:	4603      	mov	r3, r0
}
 8000906:	4618      	mov	r0, r3
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
	...

08000910 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000910:	b480      	push	{r7}
 8000912:	b085      	sub	sp, #20
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d101      	bne.n	8000922 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800091e:	2301      	movs	r3, #1
 8000920:	e059      	b.n	80009d6 <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	461a      	mov	r2, r3
 8000928:	4b2d      	ldr	r3, [pc, #180]	; (80009e0 <HAL_DMA_Init+0xd0>)
 800092a:	429a      	cmp	r2, r3
 800092c:	d80f      	bhi.n	800094e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	461a      	mov	r2, r3
 8000934:	4b2b      	ldr	r3, [pc, #172]	; (80009e4 <HAL_DMA_Init+0xd4>)
 8000936:	4413      	add	r3, r2
 8000938:	4a2b      	ldr	r2, [pc, #172]	; (80009e8 <HAL_DMA_Init+0xd8>)
 800093a:	fba2 2303 	umull	r2, r3, r2, r3
 800093e:	091b      	lsrs	r3, r3, #4
 8000940:	009a      	lsls	r2, r3, #2
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a28      	ldr	r2, [pc, #160]	; (80009ec <HAL_DMA_Init+0xdc>)
 800094a:	63da      	str	r2, [r3, #60]	; 0x3c
 800094c:	e00e      	b.n	800096c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	4b26      	ldr	r3, [pc, #152]	; (80009f0 <HAL_DMA_Init+0xe0>)
 8000956:	4413      	add	r3, r2
 8000958:	4a23      	ldr	r2, [pc, #140]	; (80009e8 <HAL_DMA_Init+0xd8>)
 800095a:	fba2 2303 	umull	r2, r3, r2, r3
 800095e:	091b      	lsrs	r3, r3, #4
 8000960:	009a      	lsls	r2, r3, #2
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	4a22      	ldr	r2, [pc, #136]	; (80009f4 <HAL_DMA_Init+0xe4>)
 800096a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2202      	movs	r2, #2
 8000970:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000986:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000990:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	68db      	ldr	r3, [r3, #12]
 8000996:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800099c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	695b      	ldr	r3, [r3, #20]
 80009a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80009a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	69db      	ldr	r3, [r3, #28]
 80009ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80009b0:	68fa      	ldr	r2, [r7, #12]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2200      	movs	r2, #0
 80009c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2201      	movs	r2, #1
 80009c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2200      	movs	r2, #0
 80009d0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80009d4:	2300      	movs	r3, #0
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3714      	adds	r7, #20
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr
 80009e0:	40026407 	.word	0x40026407
 80009e4:	bffd9ff8 	.word	0xbffd9ff8
 80009e8:	cccccccd 	.word	0xcccccccd
 80009ec:	40026000 	.word	0x40026000
 80009f0:	bffd9bf8 	.word	0xbffd9bf8
 80009f4:	40026400 	.word	0x40026400

080009f8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	f003 031c 	and.w	r3, r3, #28
 8000a18:	2204      	movs	r2, #4
 8000a1a:	409a      	lsls	r2, r3
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d026      	beq.n	8000a72 <HAL_DMA_IRQHandler+0x7a>
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	f003 0304 	and.w	r3, r3, #4
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d021      	beq.n	8000a72 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f003 0320 	and.w	r3, r3, #32
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d107      	bne.n	8000a4c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	681a      	ldr	r2, [r3, #0]
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	f022 0204 	bic.w	r2, r2, #4
 8000a4a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	f003 021c 	and.w	r2, r3, #28
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a58:	2104      	movs	r1, #4
 8000a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a5e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d071      	beq.n	8000b4c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000a70:	e06c      	b.n	8000b4c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	f003 031c 	and.w	r3, r3, #28
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	409a      	lsls	r2, r3
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	4013      	ands	r3, r2
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d02e      	beq.n	8000ae4 <HAL_DMA_IRQHandler+0xec>
 8000a86:	68bb      	ldr	r3, [r7, #8]
 8000a88:	f003 0302 	and.w	r3, r3, #2
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d029      	beq.n	8000ae4 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	f003 0320 	and.w	r3, r3, #32
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d10b      	bne.n	8000ab6 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f022 020a 	bic.w	r2, r2, #10
 8000aac:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	f003 021c 	and.w	r2, r3, #28
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ac2:	2102      	movs	r1, #2
 8000ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d038      	beq.n	8000b4c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ade:	6878      	ldr	r0, [r7, #4]
 8000ae0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000ae2:	e033      	b.n	8000b4c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae8:	f003 031c 	and.w	r3, r3, #28
 8000aec:	2208      	movs	r2, #8
 8000aee:	409a      	lsls	r2, r3
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4013      	ands	r3, r2
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d02a      	beq.n	8000b4e <HAL_DMA_IRQHandler+0x156>
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	f003 0308 	and.w	r3, r3, #8
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d025      	beq.n	8000b4e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	681a      	ldr	r2, [r3, #0]
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	f022 020e 	bic.w	r2, r2, #14
 8000b10:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b16:	f003 021c 	and.w	r2, r3, #28
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b1e:	2101      	movs	r1, #1
 8000b20:	fa01 f202 	lsl.w	r2, r1, r2
 8000b24:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2201      	movs	r2, #1
 8000b2a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	2201      	movs	r2, #1
 8000b30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	2200      	movs	r2, #0
 8000b38:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d004      	beq.n	8000b4e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b48:	6878      	ldr	r0, [r7, #4]
 8000b4a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
}
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000b58:	b480      	push	{r7}
 8000b5a:	b087      	sub	sp, #28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000b66:	2300      	movs	r3, #0
 8000b68:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b6e:	e14e      	b.n	8000e0e <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	2101      	movs	r1, #1
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	f000 8140 	beq.w	8000e08 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d003      	beq.n	8000b98 <HAL_GPIO_Init+0x40>
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	2b12      	cmp	r3, #18
 8000b96:	d123      	bne.n	8000be0 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	08da      	lsrs	r2, r3, #3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3208      	adds	r2, #8
 8000ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ba4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	f003 0307 	and.w	r3, r3, #7
 8000bac:	009b      	lsls	r3, r3, #2
 8000bae:	220f      	movs	r2, #15
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	693a      	ldr	r2, [r7, #16]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	691a      	ldr	r2, [r3, #16]
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	f003 0307 	and.w	r3, r3, #7
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	693a      	ldr	r2, [r7, #16]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	08da      	lsrs	r2, r3, #3
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	3208      	adds	r2, #8
 8000bda:	6939      	ldr	r1, [r7, #16]
 8000bdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	005b      	lsls	r3, r3, #1
 8000bea:	2203      	movs	r2, #3
 8000bec:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf0:	43db      	mvns	r3, r3
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	4013      	ands	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f003 0203 	and.w	r2, r3, #3
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	2b01      	cmp	r3, #1
 8000c1a:	d00b      	beq.n	8000c34 <HAL_GPIO_Init+0xdc>
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d007      	beq.n	8000c34 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000c28:	2b11      	cmp	r3, #17
 8000c2a:	d003      	beq.n	8000c34 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	2b12      	cmp	r3, #18
 8000c32:	d130      	bne.n	8000c96 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	2203      	movs	r2, #3
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	68da      	ldr	r2, [r3, #12]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	4013      	ands	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	091b      	lsrs	r3, r3, #4
 8000c80:	f003 0201 	and.w	r2, r3, #1
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	68db      	ldr	r3, [r3, #12]
 8000c9a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	2203      	movs	r2, #3
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	43db      	mvns	r3, r3
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	4013      	ands	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	689a      	ldr	r2, [r3, #8]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cba:	693a      	ldr	r2, [r7, #16]
 8000cbc:	4313      	orrs	r3, r2
 8000cbe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	f000 809a 	beq.w	8000e08 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cd4:	4b54      	ldr	r3, [pc, #336]	; (8000e28 <HAL_GPIO_Init+0x2d0>)
 8000cd6:	6a1b      	ldr	r3, [r3, #32]
 8000cd8:	4a53      	ldr	r2, [pc, #332]	; (8000e28 <HAL_GPIO_Init+0x2d0>)
 8000cda:	f043 0301 	orr.w	r3, r3, #1
 8000cde:	6213      	str	r3, [r2, #32]
 8000ce0:	4b51      	ldr	r3, [pc, #324]	; (8000e28 <HAL_GPIO_Init+0x2d0>)
 8000ce2:	6a1b      	ldr	r3, [r3, #32]
 8000ce4:	f003 0301 	and.w	r3, r3, #1
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8000cec:	4a4f      	ldr	r2, [pc, #316]	; (8000e2c <HAL_GPIO_Init+0x2d4>)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	089b      	lsrs	r3, r3, #2
 8000cf2:	3302      	adds	r3, #2
 8000cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cf8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	009b      	lsls	r3, r3, #2
 8000d02:	220f      	movs	r2, #15
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	4a47      	ldr	r2, [pc, #284]	; (8000e30 <HAL_GPIO_Init+0x2d8>)
 8000d14:	4293      	cmp	r3, r2
 8000d16:	d013      	beq.n	8000d40 <HAL_GPIO_Init+0x1e8>
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	4a46      	ldr	r2, [pc, #280]	; (8000e34 <HAL_GPIO_Init+0x2dc>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d00d      	beq.n	8000d3c <HAL_GPIO_Init+0x1e4>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4a45      	ldr	r2, [pc, #276]	; (8000e38 <HAL_GPIO_Init+0x2e0>)
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d007      	beq.n	8000d38 <HAL_GPIO_Init+0x1e0>
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	4a44      	ldr	r2, [pc, #272]	; (8000e3c <HAL_GPIO_Init+0x2e4>)
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	d101      	bne.n	8000d34 <HAL_GPIO_Init+0x1dc>
 8000d30:	2303      	movs	r3, #3
 8000d32:	e006      	b.n	8000d42 <HAL_GPIO_Init+0x1ea>
 8000d34:	2305      	movs	r3, #5
 8000d36:	e004      	b.n	8000d42 <HAL_GPIO_Init+0x1ea>
 8000d38:	2302      	movs	r3, #2
 8000d3a:	e002      	b.n	8000d42 <HAL_GPIO_Init+0x1ea>
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e000      	b.n	8000d42 <HAL_GPIO_Init+0x1ea>
 8000d40:	2300      	movs	r3, #0
 8000d42:	697a      	ldr	r2, [r7, #20]
 8000d44:	f002 0203 	and.w	r2, r2, #3
 8000d48:	0092      	lsls	r2, r2, #2
 8000d4a:	4093      	lsls	r3, r2
 8000d4c:	693a      	ldr	r2, [r7, #16]
 8000d4e:	4313      	orrs	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d52:	4936      	ldr	r1, [pc, #216]	; (8000e2c <HAL_GPIO_Init+0x2d4>)
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	089b      	lsrs	r3, r3, #2
 8000d58:	3302      	adds	r3, #2
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d60:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <HAL_GPIO_Init+0x2e8>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d003      	beq.n	8000d84 <HAL_GPIO_Init+0x22c>
        {
          SET_BIT(temp, iocurrent); 
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	4313      	orrs	r3, r2
 8000d82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d84:	4a2e      	ldr	r2, [pc, #184]	; (8000e40 <HAL_GPIO_Init+0x2e8>)
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000d8a:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <HAL_GPIO_Init+0x2e8>)
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	43db      	mvns	r3, r3
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	4013      	ands	r3, r2
 8000d98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_Init+0x256>
        {
          SET_BIT(temp, iocurrent); 
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000dae:	4a24      	ldr	r2, [pc, #144]	; (8000e40 <HAL_GPIO_Init+0x2e8>)
 8000db0:	693b      	ldr	r3, [r7, #16]
 8000db2:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000db4:	4b22      	ldr	r3, [pc, #136]	; (8000e40 <HAL_GPIO_Init+0x2e8>)
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d003      	beq.n	8000dd8 <HAL_GPIO_Init+0x280>
        {
          SET_BIT(temp, iocurrent); 
 8000dd0:	693a      	ldr	r2, [r7, #16]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dd8:	4a19      	ldr	r2, [pc, #100]	; (8000e40 <HAL_GPIO_Init+0x2e8>)
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <HAL_GPIO_Init+0x2e8>)
 8000de0:	68db      	ldr	r3, [r3, #12]
 8000de2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	43db      	mvns	r3, r3
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	4013      	ands	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d003      	beq.n	8000e02 <HAL_GPIO_Init+0x2aa>
        {
          SET_BIT(temp, iocurrent); 
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	4313      	orrs	r3, r2
 8000e00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000e02:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <HAL_GPIO_Init+0x2e8>)
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	fa22 f303 	lsr.w	r3, r2, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	f47f aea9 	bne.w	8000b70 <HAL_GPIO_Init+0x18>
  } 
}
 8000e1e:	bf00      	nop
 8000e20:	371c      	adds	r7, #28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40010000 	.word	0x40010000
 8000e30:	40020000 	.word	0x40020000
 8000e34:	40020400 	.word	0x40020400
 8000e38:	40020800 	.word	0x40020800
 8000e3c:	40020c00 	.word	0x40020c00
 8000e40:	40010400 	.word	0x40010400

08000e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]
 8000e50:	4613      	mov	r3, r2
 8000e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e54:	787b      	ldrb	r3, [r7, #1]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e5a:	887a      	ldrh	r2, [r7, #2]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000e60:	e003      	b.n	8000e6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000e62:	887b      	ldrh	r3, [r7, #2]
 8000e64:	041a      	lsls	r2, r3, #16
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	619a      	str	r2, [r3, #24]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d101      	bne.n	8000e86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e82:	2301      	movs	r3, #1
 8000e84:	e31d      	b.n	80014c2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e86:	4b94      	ldr	r3, [pc, #592]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8000e88:	689b      	ldr	r3, [r3, #8]
 8000e8a:	f003 030c 	and.w	r3, r3, #12
 8000e8e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e90:	4b91      	ldr	r3, [pc, #580]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e98:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d07b      	beq.n	8000f9e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	2b08      	cmp	r3, #8
 8000eaa:	d006      	beq.n	8000eba <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	2b0c      	cmp	r3, #12
 8000eb0:	d10f      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x5e>
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000eb8:	d10b      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000eba:	4b87      	ldr	r3, [pc, #540]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d06a      	beq.n	8000f9c <HAL_RCC_OscConfig+0x128>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d166      	bne.n	8000f9c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e2f7      	b.n	80014c2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d106      	bne.n	8000ee8 <HAL_RCC_OscConfig+0x74>
 8000eda:	4b7f      	ldr	r3, [pc, #508]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a7e      	ldr	r2, [pc, #504]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8000ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ee4:	6013      	str	r3, [r2, #0]
 8000ee6:	e02d      	b.n	8000f44 <HAL_RCC_OscConfig+0xd0>
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d10c      	bne.n	8000f0a <HAL_RCC_OscConfig+0x96>
 8000ef0:	4b79      	ldr	r3, [pc, #484]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a78      	ldr	r2, [pc, #480]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8000ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000efa:	6013      	str	r3, [r2, #0]
 8000efc:	4b76      	ldr	r3, [pc, #472]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a75      	ldr	r2, [pc, #468]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8000f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f06:	6013      	str	r3, [r2, #0]
 8000f08:	e01c      	b.n	8000f44 <HAL_RCC_OscConfig+0xd0>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	2b05      	cmp	r3, #5
 8000f10:	d10c      	bne.n	8000f2c <HAL_RCC_OscConfig+0xb8>
 8000f12:	4b71      	ldr	r3, [pc, #452]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	4a70      	ldr	r2, [pc, #448]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8000f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f1c:	6013      	str	r3, [r2, #0]
 8000f1e:	4b6e      	ldr	r3, [pc, #440]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a6d      	ldr	r2, [pc, #436]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8000f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f28:	6013      	str	r3, [r2, #0]
 8000f2a:	e00b      	b.n	8000f44 <HAL_RCC_OscConfig+0xd0>
 8000f2c:	4b6a      	ldr	r3, [pc, #424]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a69      	ldr	r2, [pc, #420]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8000f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f36:	6013      	str	r3, [r2, #0]
 8000f38:	4b67      	ldr	r3, [pc, #412]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a66      	ldr	r2, [pc, #408]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8000f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d013      	beq.n	8000f74 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fbc8 	bl	80006e0 <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f52:	e008      	b.n	8000f66 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f54:	f7ff fbc4 	bl	80006e0 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b64      	cmp	r3, #100	; 0x64
 8000f60:	d901      	bls.n	8000f66 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e2ad      	b.n	80014c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f66:	4b5c      	ldr	r3, [pc, #368]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d0f0      	beq.n	8000f54 <HAL_RCC_OscConfig+0xe0>
 8000f72:	e014      	b.n	8000f9e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fbb4 	bl	80006e0 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fbb0 	bl	80006e0 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b64      	cmp	r3, #100	; 0x64
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e299      	b.n	80014c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f8e:	4b52      	ldr	r3, [pc, #328]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1f0      	bne.n	8000f7c <HAL_RCC_OscConfig+0x108>
 8000f9a:	e000      	b.n	8000f9e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f003 0302 	and.w	r3, r3, #2
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d05a      	beq.n	8001060 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	2b04      	cmp	r3, #4
 8000fae:	d005      	beq.n	8000fbc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	2b0c      	cmp	r3, #12
 8000fb4:	d119      	bne.n	8000fea <HAL_RCC_OscConfig+0x176>
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d116      	bne.n	8000fea <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fbc:	4b46      	ldr	r3, [pc, #280]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d005      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x160>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d001      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e276      	b.n	80014c2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fd4:	4b40      	ldr	r3, [pc, #256]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	691b      	ldr	r3, [r3, #16]
 8000fe0:	021b      	lsls	r3, r3, #8
 8000fe2:	493d      	ldr	r1, [pc, #244]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fe8:	e03a      	b.n	8001060 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d020      	beq.n	8001034 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ff2:	4b3a      	ldr	r3, [pc, #232]	; (80010dc <HAL_RCC_OscConfig+0x268>)
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fb72 	bl	80006e0 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001000:	f7ff fb6e 	bl	80006e0 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e257      	b.n	80014c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001012:	4b31      	ldr	r3, [pc, #196]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 0302 	and.w	r3, r3, #2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d0f0      	beq.n	8001000 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800101e:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	492a      	ldr	r1, [pc, #168]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 800102e:	4313      	orrs	r3, r2
 8001030:	604b      	str	r3, [r1, #4]
 8001032:	e015      	b.n	8001060 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001034:	4b29      	ldr	r3, [pc, #164]	; (80010dc <HAL_RCC_OscConfig+0x268>)
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800103a:	f7ff fb51 	bl	80006e0 <HAL_GetTick>
 800103e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001040:	e008      	b.n	8001054 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001042:	f7ff fb4d 	bl	80006e0 <HAL_GetTick>
 8001046:	4602      	mov	r2, r0
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	2b02      	cmp	r3, #2
 800104e:	d901      	bls.n	8001054 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001050:	2303      	movs	r3, #3
 8001052:	e236      	b.n	80014c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001054:	4b20      	ldr	r3, [pc, #128]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	f003 0302 	and.w	r3, r3, #2
 800105c:	2b00      	cmp	r3, #0
 800105e:	d1f0      	bne.n	8001042 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0310 	and.w	r3, r3, #16
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80b8 	beq.w	80011de <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 800106e:	69bb      	ldr	r3, [r7, #24]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d170      	bne.n	8001156 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800107c:	2b00      	cmp	r3, #0
 800107e:	d005      	beq.n	800108c <HAL_RCC_OscConfig+0x218>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	699b      	ldr	r3, [r3, #24]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d101      	bne.n	800108c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8001088:	2301      	movs	r3, #1
 800108a:	e21a      	b.n	80014c2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6a1a      	ldr	r2, [r3, #32]
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8001098:	429a      	cmp	r2, r3
 800109a:	d921      	bls.n	80010e0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a1b      	ldr	r3, [r3, #32]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 fbd5 	bl	8001850 <RCC_SetFlashLatencyFromMSIRange>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e208      	b.n	80014c2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010b0:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	4906      	ldr	r1, [pc, #24]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 80010be:	4313      	orrs	r3, r2
 80010c0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010c2:	4b05      	ldr	r3, [pc, #20]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	061b      	lsls	r3, r3, #24
 80010d0:	4901      	ldr	r1, [pc, #4]	; (80010d8 <HAL_RCC_OscConfig+0x264>)
 80010d2:	4313      	orrs	r3, r2
 80010d4:	604b      	str	r3, [r1, #4]
 80010d6:	e020      	b.n	800111a <HAL_RCC_OscConfig+0x2a6>
 80010d8:	40023800 	.word	0x40023800
 80010dc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010e0:	4ba4      	ldr	r3, [pc, #656]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	49a1      	ldr	r1, [pc, #644]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 80010ee:	4313      	orrs	r3, r2
 80010f0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010f2:	4ba0      	ldr	r3, [pc, #640]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 80010f4:	685b      	ldr	r3, [r3, #4]
 80010f6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	061b      	lsls	r3, r3, #24
 8001100:	499c      	ldr	r1, [pc, #624]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 8001102:	4313      	orrs	r3, r2
 8001104:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a1b      	ldr	r3, [r3, #32]
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fba0 	bl	8001850 <RCC_SetFlashLatencyFromMSIRange>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e1d3      	b.n	80014c2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a1b      	ldr	r3, [r3, #32]
 800111e:	0b5b      	lsrs	r3, r3, #13
 8001120:	3301      	adds	r3, #1
 8001122:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001126:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800112a:	4a92      	ldr	r2, [pc, #584]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 800112c:	6892      	ldr	r2, [r2, #8]
 800112e:	0912      	lsrs	r2, r2, #4
 8001130:	f002 020f 	and.w	r2, r2, #15
 8001134:	4990      	ldr	r1, [pc, #576]	; (8001378 <HAL_RCC_OscConfig+0x504>)
 8001136:	5c8a      	ldrb	r2, [r1, r2]
 8001138:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800113a:	4a90      	ldr	r2, [pc, #576]	; (800137c <HAL_RCC_OscConfig+0x508>)
 800113c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800113e:	4b90      	ldr	r3, [pc, #576]	; (8001380 <HAL_RCC_OscConfig+0x50c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff fa80 	bl	8000648 <HAL_InitTick>
 8001148:	4603      	mov	r3, r0
 800114a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800114c:	7bfb      	ldrb	r3, [r7, #15]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d045      	beq.n	80011de <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001152:	7bfb      	ldrb	r3, [r7, #15]
 8001154:	e1b5      	b.n	80014c2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d029      	beq.n	80011b2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800115e:	4b89      	ldr	r3, [pc, #548]	; (8001384 <HAL_RCC_OscConfig+0x510>)
 8001160:	2201      	movs	r2, #1
 8001162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001164:	f7ff fabc 	bl	80006e0 <HAL_GetTick>
 8001168:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800116a:	e008      	b.n	800117e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800116c:	f7ff fab8 	bl	80006e0 <HAL_GetTick>
 8001170:	4602      	mov	r2, r0
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	1ad3      	subs	r3, r2, r3
 8001176:	2b02      	cmp	r3, #2
 8001178:	d901      	bls.n	800117e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800117a:	2303      	movs	r3, #3
 800117c:	e1a1      	b.n	80014c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800117e:	4b7d      	ldr	r3, [pc, #500]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001186:	2b00      	cmp	r3, #0
 8001188:	d0f0      	beq.n	800116c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800118a:	4b7a      	ldr	r3, [pc, #488]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6a1b      	ldr	r3, [r3, #32]
 8001196:	4977      	ldr	r1, [pc, #476]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 8001198:	4313      	orrs	r3, r2
 800119a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800119c:	4b75      	ldr	r3, [pc, #468]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	061b      	lsls	r3, r3, #24
 80011aa:	4972      	ldr	r1, [pc, #456]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	604b      	str	r3, [r1, #4]
 80011b0:	e015      	b.n	80011de <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011b2:	4b74      	ldr	r3, [pc, #464]	; (8001384 <HAL_RCC_OscConfig+0x510>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b8:	f7ff fa92 	bl	80006e0 <HAL_GetTick>
 80011bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80011be:	e008      	b.n	80011d2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011c0:	f7ff fa8e 	bl	80006e0 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	2b02      	cmp	r3, #2
 80011cc:	d901      	bls.n	80011d2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80011ce:	2303      	movs	r3, #3
 80011d0:	e177      	b.n	80014c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80011d2:	4b68      	ldr	r3, [pc, #416]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d1f0      	bne.n	80011c0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0308 	and.w	r3, r3, #8
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d030      	beq.n	800124c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d016      	beq.n	8001220 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011f2:	4b65      	ldr	r3, [pc, #404]	; (8001388 <HAL_RCC_OscConfig+0x514>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011f8:	f7ff fa72 	bl	80006e0 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001200:	f7ff fa6e 	bl	80006e0 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e157      	b.n	80014c2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001212:	4b58      	ldr	r3, [pc, #352]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 8001214:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f0      	beq.n	8001200 <HAL_RCC_OscConfig+0x38c>
 800121e:	e015      	b.n	800124c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001220:	4b59      	ldr	r3, [pc, #356]	; (8001388 <HAL_RCC_OscConfig+0x514>)
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001226:	f7ff fa5b 	bl	80006e0 <HAL_GetTick>
 800122a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800122c:	e008      	b.n	8001240 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800122e:	f7ff fa57 	bl	80006e0 <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d901      	bls.n	8001240 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e140      	b.n	80014c2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001240:	4b4c      	ldr	r3, [pc, #304]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 8001242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f0      	bne.n	800122e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 80b5 	beq.w	80013c4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800125a:	2300      	movs	r3, #0
 800125c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800125e:	4b45      	ldr	r3, [pc, #276]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 8001260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001262:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d10d      	bne.n	8001286 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800126a:	4b42      	ldr	r3, [pc, #264]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	4a41      	ldr	r2, [pc, #260]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 8001270:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001274:	6253      	str	r3, [r2, #36]	; 0x24
 8001276:	4b3f      	ldr	r3, [pc, #252]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 8001278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800127a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001282:	2301      	movs	r3, #1
 8001284:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001286:	4b41      	ldr	r3, [pc, #260]	; (800138c <HAL_RCC_OscConfig+0x518>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800128e:	2b00      	cmp	r3, #0
 8001290:	d118      	bne.n	80012c4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001292:	4b3e      	ldr	r3, [pc, #248]	; (800138c <HAL_RCC_OscConfig+0x518>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a3d      	ldr	r2, [pc, #244]	; (800138c <HAL_RCC_OscConfig+0x518>)
 8001298:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800129c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800129e:	f7ff fa1f 	bl	80006e0 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012a6:	f7ff fa1b 	bl	80006e0 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b64      	cmp	r3, #100	; 0x64
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e104      	b.n	80014c2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b8:	4b34      	ldr	r3, [pc, #208]	; (800138c <HAL_RCC_OscConfig+0x518>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d0f0      	beq.n	80012a6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d106      	bne.n	80012da <HAL_RCC_OscConfig+0x466>
 80012cc:	4b29      	ldr	r3, [pc, #164]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 80012ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012d0:	4a28      	ldr	r2, [pc, #160]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 80012d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d6:	6353      	str	r3, [r2, #52]	; 0x34
 80012d8:	e02d      	b.n	8001336 <HAL_RCC_OscConfig+0x4c2>
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10c      	bne.n	80012fc <HAL_RCC_OscConfig+0x488>
 80012e2:	4b24      	ldr	r3, [pc, #144]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 80012e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e6:	4a23      	ldr	r2, [pc, #140]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 80012e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012ec:	6353      	str	r3, [r2, #52]	; 0x34
 80012ee:	4b21      	ldr	r3, [pc, #132]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 80012f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012f2:	4a20      	ldr	r2, [pc, #128]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 80012f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80012f8:	6353      	str	r3, [r2, #52]	; 0x34
 80012fa:	e01c      	b.n	8001336 <HAL_RCC_OscConfig+0x4c2>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689b      	ldr	r3, [r3, #8]
 8001300:	2b05      	cmp	r3, #5
 8001302:	d10c      	bne.n	800131e <HAL_RCC_OscConfig+0x4aa>
 8001304:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 8001306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001308:	4a1a      	ldr	r2, [pc, #104]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 800130a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800130e:	6353      	str	r3, [r2, #52]	; 0x34
 8001310:	4b18      	ldr	r3, [pc, #96]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 8001312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001314:	4a17      	ldr	r2, [pc, #92]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 8001316:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131a:	6353      	str	r3, [r2, #52]	; 0x34
 800131c:	e00b      	b.n	8001336 <HAL_RCC_OscConfig+0x4c2>
 800131e:	4b15      	ldr	r3, [pc, #84]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 8001320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001322:	4a14      	ldr	r2, [pc, #80]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 8001324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001328:	6353      	str	r3, [r2, #52]	; 0x34
 800132a:	4b12      	ldr	r3, [pc, #72]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 800132c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800132e:	4a11      	ldr	r2, [pc, #68]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 8001330:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001334:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d015      	beq.n	800136a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800133e:	f7ff f9cf 	bl	80006e0 <HAL_GetTick>
 8001342:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001344:	e00a      	b.n	800135c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001346:	f7ff f9cb 	bl	80006e0 <HAL_GetTick>
 800134a:	4602      	mov	r2, r0
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	1ad3      	subs	r3, r2, r3
 8001350:	f241 3288 	movw	r2, #5000	; 0x1388
 8001354:	4293      	cmp	r3, r2
 8001356:	d901      	bls.n	800135c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001358:	2303      	movs	r3, #3
 800135a:	e0b2      	b.n	80014c2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800135c:	4b05      	ldr	r3, [pc, #20]	; (8001374 <HAL_RCC_OscConfig+0x500>)
 800135e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001364:	2b00      	cmp	r3, #0
 8001366:	d0ee      	beq.n	8001346 <HAL_RCC_OscConfig+0x4d2>
 8001368:	e023      	b.n	80013b2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136a:	f7ff f9b9 	bl	80006e0 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001370:	e019      	b.n	80013a6 <HAL_RCC_OscConfig+0x532>
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	08001f18 	.word	0x08001f18
 800137c:	20000000 	.word	0x20000000
 8001380:	20000004 	.word	0x20000004
 8001384:	42470020 	.word	0x42470020
 8001388:	42470680 	.word	0x42470680
 800138c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001390:	f7ff f9a6 	bl	80006e0 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	f241 3288 	movw	r2, #5000	; 0x1388
 800139e:	4293      	cmp	r3, r2
 80013a0:	d901      	bls.n	80013a6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e08d      	b.n	80014c2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013a6:	4b49      	ldr	r3, [pc, #292]	; (80014cc <HAL_RCC_OscConfig+0x658>)
 80013a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80013aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d1ee      	bne.n	8001390 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013b2:	7ffb      	ldrb	r3, [r7, #31]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d105      	bne.n	80013c4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013b8:	4b44      	ldr	r3, [pc, #272]	; (80014cc <HAL_RCC_OscConfig+0x658>)
 80013ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013bc:	4a43      	ldr	r2, [pc, #268]	; (80014cc <HAL_RCC_OscConfig+0x658>)
 80013be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013c2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d079      	beq.n	80014c0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	2b0c      	cmp	r3, #12
 80013d0:	d056      	beq.n	8001480 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d6:	2b02      	cmp	r3, #2
 80013d8:	d13b      	bne.n	8001452 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013da:	4b3d      	ldr	r3, [pc, #244]	; (80014d0 <HAL_RCC_OscConfig+0x65c>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013e0:	f7ff f97e 	bl	80006e0 <HAL_GetTick>
 80013e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013e8:	f7ff f97a 	bl	80006e0 <HAL_GetTick>
 80013ec:	4602      	mov	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e063      	b.n	80014c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80013fa:	4b34      	ldr	r3, [pc, #208]	; (80014cc <HAL_RCC_OscConfig+0x658>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001406:	4b31      	ldr	r3, [pc, #196]	; (80014cc <HAL_RCC_OscConfig+0x658>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001416:	4319      	orrs	r1, r3
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	430b      	orrs	r3, r1
 800141e:	492b      	ldr	r1, [pc, #172]	; (80014cc <HAL_RCC_OscConfig+0x658>)
 8001420:	4313      	orrs	r3, r2
 8001422:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001424:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <HAL_RCC_OscConfig+0x65c>)
 8001426:	2201      	movs	r2, #1
 8001428:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142a:	f7ff f959 	bl	80006e0 <HAL_GetTick>
 800142e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001430:	e008      	b.n	8001444 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001432:	f7ff f955 	bl	80006e0 <HAL_GetTick>
 8001436:	4602      	mov	r2, r0
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	1ad3      	subs	r3, r2, r3
 800143c:	2b02      	cmp	r3, #2
 800143e:	d901      	bls.n	8001444 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001440:	2303      	movs	r3, #3
 8001442:	e03e      	b.n	80014c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001444:	4b21      	ldr	r3, [pc, #132]	; (80014cc <HAL_RCC_OscConfig+0x658>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144c:	2b00      	cmp	r3, #0
 800144e:	d0f0      	beq.n	8001432 <HAL_RCC_OscConfig+0x5be>
 8001450:	e036      	b.n	80014c0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001452:	4b1f      	ldr	r3, [pc, #124]	; (80014d0 <HAL_RCC_OscConfig+0x65c>)
 8001454:	2200      	movs	r2, #0
 8001456:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001458:	f7ff f942 	bl	80006e0 <HAL_GetTick>
 800145c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800145e:	e008      	b.n	8001472 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001460:	f7ff f93e 	bl	80006e0 <HAL_GetTick>
 8001464:	4602      	mov	r2, r0
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	1ad3      	subs	r3, r2, r3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d901      	bls.n	8001472 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800146e:	2303      	movs	r3, #3
 8001470:	e027      	b.n	80014c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001472:	4b16      	ldr	r3, [pc, #88]	; (80014cc <HAL_RCC_OscConfig+0x658>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_RCC_OscConfig+0x5ec>
 800147e:	e01f      	b.n	80014c0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001484:	2b01      	cmp	r3, #1
 8001486:	d101      	bne.n	800148c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e01a      	b.n	80014c2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800148c:	4b0f      	ldr	r3, [pc, #60]	; (80014cc <HAL_RCC_OscConfig+0x658>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149c:	429a      	cmp	r2, r3
 800149e:	d10d      	bne.n	80014bc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d106      	bne.n	80014bc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d001      	beq.n	80014c0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e000      	b.n	80014c2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80014c0:	2300      	movs	r3, #0
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3720      	adds	r7, #32
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	40023800 	.word	0x40023800
 80014d0:	42470060 	.word	0x42470060

080014d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014e4:	2301      	movs	r3, #1
 80014e6:	e11a      	b.n	800171e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014e8:	4b8f      	ldr	r3, [pc, #572]	; (8001728 <HAL_RCC_ClockConfig+0x254>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	683a      	ldr	r2, [r7, #0]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d919      	bls.n	800152a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	2b01      	cmp	r3, #1
 80014fa:	d105      	bne.n	8001508 <HAL_RCC_ClockConfig+0x34>
 80014fc:	4b8a      	ldr	r3, [pc, #552]	; (8001728 <HAL_RCC_ClockConfig+0x254>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a89      	ldr	r2, [pc, #548]	; (8001728 <HAL_RCC_ClockConfig+0x254>)
 8001502:	f043 0304 	orr.w	r3, r3, #4
 8001506:	6013      	str	r3, [r2, #0]
 8001508:	4b87      	ldr	r3, [pc, #540]	; (8001728 <HAL_RCC_ClockConfig+0x254>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f023 0201 	bic.w	r2, r3, #1
 8001510:	4985      	ldr	r1, [pc, #532]	; (8001728 <HAL_RCC_ClockConfig+0x254>)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	4313      	orrs	r3, r2
 8001516:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001518:	4b83      	ldr	r3, [pc, #524]	; (8001728 <HAL_RCC_ClockConfig+0x254>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0301 	and.w	r3, r3, #1
 8001520:	683a      	ldr	r2, [r7, #0]
 8001522:	429a      	cmp	r2, r3
 8001524:	d001      	beq.n	800152a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	e0f9      	b.n	800171e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d008      	beq.n	8001548 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001536:	4b7d      	ldr	r3, [pc, #500]	; (800172c <HAL_RCC_ClockConfig+0x258>)
 8001538:	689b      	ldr	r3, [r3, #8]
 800153a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	497a      	ldr	r1, [pc, #488]	; (800172c <HAL_RCC_ClockConfig+0x258>)
 8001544:	4313      	orrs	r3, r2
 8001546:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	2b00      	cmp	r3, #0
 8001552:	f000 808e 	beq.w	8001672 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	2b02      	cmp	r3, #2
 800155c:	d107      	bne.n	800156e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800155e:	4b73      	ldr	r3, [pc, #460]	; (800172c <HAL_RCC_ClockConfig+0x258>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001566:	2b00      	cmp	r3, #0
 8001568:	d121      	bne.n	80015ae <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e0d7      	b.n	800171e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b03      	cmp	r3, #3
 8001574:	d107      	bne.n	8001586 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001576:	4b6d      	ldr	r3, [pc, #436]	; (800172c <HAL_RCC_ClockConfig+0x258>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d115      	bne.n	80015ae <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e0cb      	b.n	800171e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d107      	bne.n	800159e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800158e:	4b67      	ldr	r3, [pc, #412]	; (800172c <HAL_RCC_ClockConfig+0x258>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d109      	bne.n	80015ae <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e0bf      	b.n	800171e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800159e:	4b63      	ldr	r3, [pc, #396]	; (800172c <HAL_RCC_ClockConfig+0x258>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e0b7      	b.n	800171e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015ae:	4b5f      	ldr	r3, [pc, #380]	; (800172c <HAL_RCC_ClockConfig+0x258>)
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f023 0203 	bic.w	r2, r3, #3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	495c      	ldr	r1, [pc, #368]	; (800172c <HAL_RCC_ClockConfig+0x258>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015c0:	f7ff f88e 	bl	80006e0 <HAL_GetTick>
 80015c4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	2b02      	cmp	r3, #2
 80015cc:	d112      	bne.n	80015f4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015ce:	e00a      	b.n	80015e6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d0:	f7ff f886 	bl	80006e0 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	f241 3288 	movw	r2, #5000	; 0x1388
 80015de:	4293      	cmp	r3, r2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e09b      	b.n	800171e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80015e6:	4b51      	ldr	r3, [pc, #324]	; (800172c <HAL_RCC_ClockConfig+0x258>)
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	f003 030c 	and.w	r3, r3, #12
 80015ee:	2b08      	cmp	r3, #8
 80015f0:	d1ee      	bne.n	80015d0 <HAL_RCC_ClockConfig+0xfc>
 80015f2:	e03e      	b.n	8001672 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2b03      	cmp	r3, #3
 80015fa:	d112      	bne.n	8001622 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015fc:	e00a      	b.n	8001614 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fe:	f7ff f86f 	bl	80006e0 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f241 3288 	movw	r2, #5000	; 0x1388
 800160c:	4293      	cmp	r3, r2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e084      	b.n	800171e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001614:	4b45      	ldr	r3, [pc, #276]	; (800172c <HAL_RCC_ClockConfig+0x258>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 030c 	and.w	r3, r3, #12
 800161c:	2b0c      	cmp	r3, #12
 800161e:	d1ee      	bne.n	80015fe <HAL_RCC_ClockConfig+0x12a>
 8001620:	e027      	b.n	8001672 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b01      	cmp	r3, #1
 8001628:	d11d      	bne.n	8001666 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800162a:	e00a      	b.n	8001642 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800162c:	f7ff f858 	bl	80006e0 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	f241 3288 	movw	r2, #5000	; 0x1388
 800163a:	4293      	cmp	r3, r2
 800163c:	d901      	bls.n	8001642 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e06d      	b.n	800171e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001642:	4b3a      	ldr	r3, [pc, #232]	; (800172c <HAL_RCC_ClockConfig+0x258>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b04      	cmp	r3, #4
 800164c:	d1ee      	bne.n	800162c <HAL_RCC_ClockConfig+0x158>
 800164e:	e010      	b.n	8001672 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001650:	f7ff f846 	bl	80006e0 <HAL_GetTick>
 8001654:	4602      	mov	r2, r0
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	f241 3288 	movw	r2, #5000	; 0x1388
 800165e:	4293      	cmp	r3, r2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e05b      	b.n	800171e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001666:	4b31      	ldr	r3, [pc, #196]	; (800172c <HAL_RCC_ClockConfig+0x258>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 030c 	and.w	r3, r3, #12
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1ee      	bne.n	8001650 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001672:	4b2d      	ldr	r3, [pc, #180]	; (8001728 <HAL_RCC_ClockConfig+0x254>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	429a      	cmp	r2, r3
 800167e:	d219      	bcs.n	80016b4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d105      	bne.n	8001692 <HAL_RCC_ClockConfig+0x1be>
 8001686:	4b28      	ldr	r3, [pc, #160]	; (8001728 <HAL_RCC_ClockConfig+0x254>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a27      	ldr	r2, [pc, #156]	; (8001728 <HAL_RCC_ClockConfig+0x254>)
 800168c:	f043 0304 	orr.w	r3, r3, #4
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	4b25      	ldr	r3, [pc, #148]	; (8001728 <HAL_RCC_ClockConfig+0x254>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f023 0201 	bic.w	r2, r3, #1
 800169a:	4923      	ldr	r1, [pc, #140]	; (8001728 <HAL_RCC_ClockConfig+0x254>)
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	4313      	orrs	r3, r2
 80016a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016a2:	4b21      	ldr	r3, [pc, #132]	; (8001728 <HAL_RCC_ClockConfig+0x254>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	d001      	beq.n	80016b4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e034      	b.n	800171e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d008      	beq.n	80016d2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016c0:	4b1a      	ldr	r3, [pc, #104]	; (800172c <HAL_RCC_ClockConfig+0x258>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	4917      	ldr	r1, [pc, #92]	; (800172c <HAL_RCC_ClockConfig+0x258>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0308 	and.w	r3, r3, #8
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d009      	beq.n	80016f2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016de:	4b13      	ldr	r3, [pc, #76]	; (800172c <HAL_RCC_ClockConfig+0x258>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	691b      	ldr	r3, [r3, #16]
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	490f      	ldr	r1, [pc, #60]	; (800172c <HAL_RCC_ClockConfig+0x258>)
 80016ee:	4313      	orrs	r3, r2
 80016f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016f2:	f000 f823 	bl	800173c <HAL_RCC_GetSysClockFreq>
 80016f6:	4601      	mov	r1, r0
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <HAL_RCC_ClockConfig+0x258>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	091b      	lsrs	r3, r3, #4
 80016fe:	f003 030f 	and.w	r3, r3, #15
 8001702:	4a0b      	ldr	r2, [pc, #44]	; (8001730 <HAL_RCC_ClockConfig+0x25c>)
 8001704:	5cd3      	ldrb	r3, [r2, r3]
 8001706:	fa21 f303 	lsr.w	r3, r1, r3
 800170a:	4a0a      	ldr	r2, [pc, #40]	; (8001734 <HAL_RCC_ClockConfig+0x260>)
 800170c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800170e:	4b0a      	ldr	r3, [pc, #40]	; (8001738 <HAL_RCC_ClockConfig+0x264>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe ff98 	bl	8000648 <HAL_InitTick>
 8001718:	4603      	mov	r3, r0
 800171a:	72fb      	strb	r3, [r7, #11]

  return status;
 800171c:	7afb      	ldrb	r3, [r7, #11]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3710      	adds	r7, #16
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023c00 	.word	0x40023c00
 800172c:	40023800 	.word	0x40023800
 8001730:	08001f18 	.word	0x08001f18
 8001734:	20000000 	.word	0x20000000
 8001738:	20000004 	.word	0x20000004

0800173c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800173c:	b480      	push	{r7}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001742:	4b26      	ldr	r3, [pc, #152]	; (80017dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	f003 030c 	and.w	r3, r3, #12
 800174e:	2b08      	cmp	r3, #8
 8001750:	d006      	beq.n	8001760 <HAL_RCC_GetSysClockFreq+0x24>
 8001752:	2b0c      	cmp	r3, #12
 8001754:	d007      	beq.n	8001766 <HAL_RCC_GetSysClockFreq+0x2a>
 8001756:	2b04      	cmp	r3, #4
 8001758:	d12c      	bne.n	80017b4 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800175a:	4b21      	ldr	r3, [pc, #132]	; (80017e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800175c:	613b      	str	r3, [r7, #16]
      break;
 800175e:	e037      	b.n	80017d0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001760:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001762:	613b      	str	r3, [r7, #16]
      break;
 8001764:	e034      	b.n	80017d0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	0c9b      	lsrs	r3, r3, #18
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	4a1e      	ldr	r2, [pc, #120]	; (80017e8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001770:	5cd3      	ldrb	r3, [r2, r3]
 8001772:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	0d9b      	lsrs	r3, r3, #22
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	3301      	adds	r3, #1
 800177e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001780:	4b16      	ldr	r3, [pc, #88]	; (80017dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d008      	beq.n	800179e <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4a15      	ldr	r2, [pc, #84]	; (80017e4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001790:	fb02 f203 	mul.w	r2, r2, r3
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	fbb2 f3f3 	udiv	r3, r2, r3
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	e007      	b.n	80017ae <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	4a0f      	ldr	r2, [pc, #60]	; (80017e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017a2:	fb02 f203 	mul.w	r2, r2, r3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	613b      	str	r3, [r7, #16]
      break;
 80017b2:	e00d      	b.n	80017d0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80017b4:	4b09      	ldr	r3, [pc, #36]	; (80017dc <HAL_RCC_GetSysClockFreq+0xa0>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	0b5b      	lsrs	r3, r3, #13
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	3301      	adds	r3, #1
 80017c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	613b      	str	r3, [r7, #16]
      break;
 80017ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017d0:	693b      	ldr	r3, [r7, #16]
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	371c      	adds	r7, #28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr
 80017dc:	40023800 	.word	0x40023800
 80017e0:	00f42400 	.word	0x00f42400
 80017e4:	007a1200 	.word	0x007a1200
 80017e8:	08001f0c 	.word	0x08001f0c

080017ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017f0:	4b02      	ldr	r3, [pc, #8]	; (80017fc <HAL_RCC_GetHCLKFreq+0x10>)
 80017f2:	681b      	ldr	r3, [r3, #0]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	20000000 	.word	0x20000000

08001800 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001804:	f7ff fff2 	bl	80017ec <HAL_RCC_GetHCLKFreq>
 8001808:	4601      	mov	r1, r0
 800180a:	4b05      	ldr	r3, [pc, #20]	; (8001820 <HAL_RCC_GetPCLK1Freq+0x20>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	0a1b      	lsrs	r3, r3, #8
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	4a03      	ldr	r2, [pc, #12]	; (8001824 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001816:	5cd3      	ldrb	r3, [r2, r3]
 8001818:	fa21 f303 	lsr.w	r3, r1, r3
}
 800181c:	4618      	mov	r0, r3
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40023800 	.word	0x40023800
 8001824:	08001f28 	.word	0x08001f28

08001828 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800182c:	f7ff ffde 	bl	80017ec <HAL_RCC_GetHCLKFreq>
 8001830:	4601      	mov	r1, r0
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	0adb      	lsrs	r3, r3, #11
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	4a03      	ldr	r2, [pc, #12]	; (800184c <HAL_RCC_GetPCLK2Freq+0x24>)
 800183e:	5cd3      	ldrb	r3, [r2, r3]
 8001840:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001844:	4618      	mov	r0, r3
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40023800 	.word	0x40023800
 800184c:	08001f28 	.word	0x08001f28

08001850 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001850:	b480      	push	{r7}
 8001852:	b087      	sub	sp, #28
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001858:	2300      	movs	r3, #0
 800185a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800185c:	4b29      	ldr	r3, [pc, #164]	; (8001904 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d12c      	bne.n	80018c2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001868:	4b26      	ldr	r3, [pc, #152]	; (8001904 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d005      	beq.n	8001880 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001874:	4b24      	ldr	r3, [pc, #144]	; (8001908 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	e016      	b.n	80018ae <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001880:	4b20      	ldr	r3, [pc, #128]	; (8001904 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001884:	4a1f      	ldr	r2, [pc, #124]	; (8001904 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001886:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800188a:	6253      	str	r3, [r2, #36]	; 0x24
 800188c:	4b1d      	ldr	r3, [pc, #116]	; (8001904 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80018a0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80018a2:	4b18      	ldr	r3, [pc, #96]	; (8001904 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80018a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a6:	4a17      	ldr	r2, [pc, #92]	; (8001904 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80018a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ac:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80018b4:	d105      	bne.n	80018c2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80018bc:	d101      	bne.n	80018c2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80018be:	2301      	movs	r3, #1
 80018c0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d105      	bne.n	80018d4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80018c8:	4b10      	ldr	r3, [pc, #64]	; (800190c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0f      	ldr	r2, [pc, #60]	; (800190c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	6013      	str	r3, [r2, #0]
 80018d4:	4b0d      	ldr	r3, [pc, #52]	; (800190c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f023 0201 	bic.w	r2, r3, #1
 80018dc:	490b      	ldr	r1, [pc, #44]	; (800190c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d001      	beq.n	80018f6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e000      	b.n	80018f8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80018f6:	2300      	movs	r3, #0
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	371c      	adds	r7, #28
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40023800 	.word	0x40023800
 8001908:	40007000 	.word	0x40007000
 800190c:	40023c00 	.word	0x40023c00

08001910 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e03f      	b.n	80019a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d106      	bne.n	800193c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2200      	movs	r2, #0
 8001932:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7fe fdda 	bl	80004f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2224      	movs	r2, #36	; 0x24
 8001940:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001952:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f919 	bl	8001b8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	691a      	ldr	r2, [r3, #16]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001968:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695a      	ldr	r2, [r3, #20]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001978:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001988:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2220      	movs	r2, #32
 8001994:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2220      	movs	r2, #32
 800199c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b088      	sub	sp, #32
 80019ae:	af02      	add	r7, sp, #8
 80019b0:	60f8      	str	r0, [r7, #12]
 80019b2:	60b9      	str	r1, [r7, #8]
 80019b4:	603b      	str	r3, [r7, #0]
 80019b6:	4613      	mov	r3, r2
 80019b8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80019ba:	2300      	movs	r3, #0
 80019bc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	2b20      	cmp	r3, #32
 80019c8:	f040 8090 	bne.w	8001aec <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <HAL_UART_Receive+0x2e>
 80019d2:	88fb      	ldrh	r3, [r7, #6]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e088      	b.n	8001aee <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_UART_Receive+0x40>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e081      	b.n	8001aee <HAL_UART_Receive+0x144>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2200      	movs	r2, #0
 80019f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2222      	movs	r2, #34	; 0x22
 80019fc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001a00:	f7fe fe6e 	bl	80006e0 <HAL_GetTick>
 8001a04:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	88fa      	ldrh	r2, [r7, #6]
 8001a0a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	88fa      	ldrh	r2, [r7, #6]
 8001a10:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001a12:	e05c      	b.n	8001ace <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001a18:	b29b      	uxth	r3, r3
 8001a1a:	3b01      	subs	r3, #1
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a2a:	d12b      	bne.n	8001a84 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	2200      	movs	r2, #0
 8001a34:	2120      	movs	r1, #32
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	f000 f85d 	bl	8001af6 <UART_WaitOnFlagUntilTimeout>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e053      	b.n	8001aee <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	691b      	ldr	r3, [r3, #16]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d10c      	bne.n	8001a6c <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	693b      	ldr	r3, [r7, #16]
 8001a62:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	3302      	adds	r3, #2
 8001a68:	60bb      	str	r3, [r7, #8]
 8001a6a:	e030      	b.n	8001ace <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	e024      	b.n	8001ace <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	9300      	str	r3, [sp, #0]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2120      	movs	r1, #32
 8001a8e:	68f8      	ldr	r0, [r7, #12]
 8001a90:	f000 f831 	bl	8001af6 <UART_WaitOnFlagUntilTimeout>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e027      	b.n	8001aee <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d108      	bne.n	8001ab8 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	6859      	ldr	r1, [r3, #4]
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	1c5a      	adds	r2, r3, #1
 8001ab0:	60ba      	str	r2, [r7, #8]
 8001ab2:	b2ca      	uxtb	r2, r1
 8001ab4:	701a      	strb	r2, [r3, #0]
 8001ab6:	e00a      	b.n	8001ace <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	b2da      	uxtb	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	1c59      	adds	r1, r3, #1
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d19d      	bne.n	8001a14 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2220      	movs	r2, #32
 8001adc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	e000      	b.n	8001aee <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8001aec:	2302      	movs	r3, #2
  }
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3718      	adds	r7, #24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b084      	sub	sp, #16
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	603b      	str	r3, [r7, #0]
 8001b02:	4613      	mov	r3, r2
 8001b04:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b06:	e02c      	b.n	8001b62 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b08:	69bb      	ldr	r3, [r7, #24]
 8001b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0e:	d028      	beq.n	8001b62 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d007      	beq.n	8001b26 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b16:	f7fe fde3 	bl	80006e0 <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d21d      	bcs.n	8001b62 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68da      	ldr	r2, [r3, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001b34:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	695a      	ldr	r2, [r3, #20]
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f022 0201 	bic.w	r2, r2, #1
 8001b44:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2220      	movs	r2, #32
 8001b4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2220      	movs	r2, #32
 8001b52:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e00f      	b.n	8001b82 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	bf0c      	ite	eq
 8001b72:	2301      	moveq	r3, #1
 8001b74:	2300      	movne	r3, #0
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	461a      	mov	r2, r3
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d0c3      	beq.n	8001b08 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3710      	adds	r7, #16
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
	...

08001b8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	68da      	ldr	r2, [r3, #12]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	431a      	orrs	r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	69db      	ldr	r3, [r3, #28]
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001bcc:	f023 030c 	bic.w	r3, r3, #12
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	68f9      	ldr	r1, [r7, #12]
 8001bd6:	430b      	orrs	r3, r1
 8001bd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	695b      	ldr	r3, [r3, #20]
 8001be0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	699a      	ldr	r2, [r3, #24]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bf8:	f040 80a5 	bne.w	8001d46 <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4aa4      	ldr	r2, [pc, #656]	; (8001e94 <UART_SetConfig+0x308>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d14f      	bne.n	8001ca6 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c06:	f7ff fe0f 	bl	8001828 <HAL_RCC_GetPCLK2Freq>
 8001c0a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	4413      	add	r3, r2
 8001c14:	009a      	lsls	r2, r3, #2
 8001c16:	441a      	add	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c22:	4a9d      	ldr	r2, [pc, #628]	; (8001e98 <UART_SetConfig+0x30c>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	095b      	lsrs	r3, r3, #5
 8001c2a:	0119      	lsls	r1, r3, #4
 8001c2c:	68ba      	ldr	r2, [r7, #8]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	009a      	lsls	r2, r3, #2
 8001c36:	441a      	add	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c42:	4b95      	ldr	r3, [pc, #596]	; (8001e98 <UART_SetConfig+0x30c>)
 8001c44:	fba3 0302 	umull	r0, r3, r3, r2
 8001c48:	095b      	lsrs	r3, r3, #5
 8001c4a:	2064      	movs	r0, #100	; 0x64
 8001c4c:	fb00 f303 	mul.w	r3, r0, r3
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	00db      	lsls	r3, r3, #3
 8001c54:	3332      	adds	r3, #50	; 0x32
 8001c56:	4a90      	ldr	r2, [pc, #576]	; (8001e98 <UART_SetConfig+0x30c>)
 8001c58:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5c:	095b      	lsrs	r3, r3, #5
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001c64:	4419      	add	r1, r3
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	4413      	add	r3, r2
 8001c6e:	009a      	lsls	r2, r3, #2
 8001c70:	441a      	add	r2, r3
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c7c:	4b86      	ldr	r3, [pc, #536]	; (8001e98 <UART_SetConfig+0x30c>)
 8001c7e:	fba3 0302 	umull	r0, r3, r3, r2
 8001c82:	095b      	lsrs	r3, r3, #5
 8001c84:	2064      	movs	r0, #100	; 0x64
 8001c86:	fb00 f303 	mul.w	r3, r0, r3
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	3332      	adds	r3, #50	; 0x32
 8001c90:	4a81      	ldr	r2, [pc, #516]	; (8001e98 <UART_SetConfig+0x30c>)
 8001c92:	fba2 2303 	umull	r2, r3, r2, r3
 8001c96:	095b      	lsrs	r3, r3, #5
 8001c98:	f003 0207 	and.w	r2, r3, #7
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	440a      	add	r2, r1
 8001ca2:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001ca4:	e0f1      	b.n	8001e8a <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001ca6:	f7ff fdab 	bl	8001800 <HAL_RCC_GetPCLK1Freq>
 8001caa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001cac:	68ba      	ldr	r2, [r7, #8]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	009a      	lsls	r2, r3, #2
 8001cb6:	441a      	add	r2, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	005b      	lsls	r3, r3, #1
 8001cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc2:	4a75      	ldr	r2, [pc, #468]	; (8001e98 <UART_SetConfig+0x30c>)
 8001cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc8:	095b      	lsrs	r3, r3, #5
 8001cca:	0119      	lsls	r1, r3, #4
 8001ccc:	68ba      	ldr	r2, [r7, #8]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	009a      	lsls	r2, r3, #2
 8001cd6:	441a      	add	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ce2:	4b6d      	ldr	r3, [pc, #436]	; (8001e98 <UART_SetConfig+0x30c>)
 8001ce4:	fba3 0302 	umull	r0, r3, r3, r2
 8001ce8:	095b      	lsrs	r3, r3, #5
 8001cea:	2064      	movs	r0, #100	; 0x64
 8001cec:	fb00 f303 	mul.w	r3, r0, r3
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	3332      	adds	r3, #50	; 0x32
 8001cf6:	4a68      	ldr	r2, [pc, #416]	; (8001e98 <UART_SetConfig+0x30c>)
 8001cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfc:	095b      	lsrs	r3, r3, #5
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d04:	4419      	add	r1, r3
 8001d06:	68ba      	ldr	r2, [r7, #8]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	4413      	add	r3, r2
 8001d0e:	009a      	lsls	r2, r3, #2
 8001d10:	441a      	add	r2, r3
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d1c:	4b5e      	ldr	r3, [pc, #376]	; (8001e98 <UART_SetConfig+0x30c>)
 8001d1e:	fba3 0302 	umull	r0, r3, r3, r2
 8001d22:	095b      	lsrs	r3, r3, #5
 8001d24:	2064      	movs	r0, #100	; 0x64
 8001d26:	fb00 f303 	mul.w	r3, r0, r3
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	00db      	lsls	r3, r3, #3
 8001d2e:	3332      	adds	r3, #50	; 0x32
 8001d30:	4a59      	ldr	r2, [pc, #356]	; (8001e98 <UART_SetConfig+0x30c>)
 8001d32:	fba2 2303 	umull	r2, r3, r2, r3
 8001d36:	095b      	lsrs	r3, r3, #5
 8001d38:	f003 0207 	and.w	r2, r3, #7
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	440a      	add	r2, r1
 8001d42:	609a      	str	r2, [r3, #8]
}
 8001d44:	e0a1      	b.n	8001e8a <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a52      	ldr	r2, [pc, #328]	; (8001e94 <UART_SetConfig+0x308>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d14e      	bne.n	8001dee <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d50:	f7ff fd6a 	bl	8001828 <HAL_RCC_GetPCLK2Freq>
 8001d54:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d56:	68ba      	ldr	r2, [r7, #8]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	009b      	lsls	r3, r3, #2
 8001d5c:	4413      	add	r3, r2
 8001d5e:	009a      	lsls	r2, r3, #2
 8001d60:	441a      	add	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6c:	4a4a      	ldr	r2, [pc, #296]	; (8001e98 <UART_SetConfig+0x30c>)
 8001d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d72:	095b      	lsrs	r3, r3, #5
 8001d74:	0119      	lsls	r1, r3, #4
 8001d76:	68ba      	ldr	r2, [r7, #8]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	4413      	add	r3, r2
 8001d7e:	009a      	lsls	r2, r3, #2
 8001d80:	441a      	add	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d8c:	4b42      	ldr	r3, [pc, #264]	; (8001e98 <UART_SetConfig+0x30c>)
 8001d8e:	fba3 0302 	umull	r0, r3, r3, r2
 8001d92:	095b      	lsrs	r3, r3, #5
 8001d94:	2064      	movs	r0, #100	; 0x64
 8001d96:	fb00 f303 	mul.w	r3, r0, r3
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	011b      	lsls	r3, r3, #4
 8001d9e:	3332      	adds	r3, #50	; 0x32
 8001da0:	4a3d      	ldr	r2, [pc, #244]	; (8001e98 <UART_SetConfig+0x30c>)
 8001da2:	fba2 2303 	umull	r2, r3, r2, r3
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dac:	4419      	add	r1, r3
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	4613      	mov	r3, r2
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	4413      	add	r3, r2
 8001db6:	009a      	lsls	r2, r3, #2
 8001db8:	441a      	add	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dc4:	4b34      	ldr	r3, [pc, #208]	; (8001e98 <UART_SetConfig+0x30c>)
 8001dc6:	fba3 0302 	umull	r0, r3, r3, r2
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	2064      	movs	r0, #100	; 0x64
 8001dce:	fb00 f303 	mul.w	r3, r0, r3
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	011b      	lsls	r3, r3, #4
 8001dd6:	3332      	adds	r3, #50	; 0x32
 8001dd8:	4a2f      	ldr	r2, [pc, #188]	; (8001e98 <UART_SetConfig+0x30c>)
 8001dda:	fba2 2303 	umull	r2, r3, r2, r3
 8001dde:	095b      	lsrs	r3, r3, #5
 8001de0:	f003 020f 	and.w	r2, r3, #15
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	440a      	add	r2, r1
 8001dea:	609a      	str	r2, [r3, #8]
}
 8001dec:	e04d      	b.n	8001e8a <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001dee:	f7ff fd07 	bl	8001800 <HAL_RCC_GetPCLK1Freq>
 8001df2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	4613      	mov	r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	009a      	lsls	r2, r3, #2
 8001dfe:	441a      	add	r2, r3
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0a:	4a23      	ldr	r2, [pc, #140]	; (8001e98 <UART_SetConfig+0x30c>)
 8001e0c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e10:	095b      	lsrs	r3, r3, #5
 8001e12:	0119      	lsls	r1, r3, #4
 8001e14:	68ba      	ldr	r2, [r7, #8]
 8001e16:	4613      	mov	r3, r2
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4413      	add	r3, r2
 8001e1c:	009a      	lsls	r2, r3, #2
 8001e1e:	441a      	add	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e2a:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <UART_SetConfig+0x30c>)
 8001e2c:	fba3 0302 	umull	r0, r3, r3, r2
 8001e30:	095b      	lsrs	r3, r3, #5
 8001e32:	2064      	movs	r0, #100	; 0x64
 8001e34:	fb00 f303 	mul.w	r3, r0, r3
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	011b      	lsls	r3, r3, #4
 8001e3c:	3332      	adds	r3, #50	; 0x32
 8001e3e:	4a16      	ldr	r2, [pc, #88]	; (8001e98 <UART_SetConfig+0x30c>)
 8001e40:	fba2 2303 	umull	r2, r3, r2, r3
 8001e44:	095b      	lsrs	r3, r3, #5
 8001e46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e4a:	4419      	add	r1, r3
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	009a      	lsls	r2, r3, #2
 8001e56:	441a      	add	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e62:	4b0d      	ldr	r3, [pc, #52]	; (8001e98 <UART_SetConfig+0x30c>)
 8001e64:	fba3 0302 	umull	r0, r3, r3, r2
 8001e68:	095b      	lsrs	r3, r3, #5
 8001e6a:	2064      	movs	r0, #100	; 0x64
 8001e6c:	fb00 f303 	mul.w	r3, r0, r3
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	011b      	lsls	r3, r3, #4
 8001e74:	3332      	adds	r3, #50	; 0x32
 8001e76:	4a08      	ldr	r2, [pc, #32]	; (8001e98 <UART_SetConfig+0x30c>)
 8001e78:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7c:	095b      	lsrs	r3, r3, #5
 8001e7e:	f003 020f 	and.w	r2, r3, #15
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	440a      	add	r2, r1
 8001e88:	609a      	str	r2, [r3, #8]
}
 8001e8a:	bf00      	nop
 8001e8c:	3710      	adds	r7, #16
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40013800 	.word	0x40013800
 8001e98:	51eb851f 	.word	0x51eb851f

08001e9c <__libc_init_array>:
 8001e9c:	b570      	push	{r4, r5, r6, lr}
 8001e9e:	2500      	movs	r5, #0
 8001ea0:	4e0c      	ldr	r6, [pc, #48]	; (8001ed4 <__libc_init_array+0x38>)
 8001ea2:	4c0d      	ldr	r4, [pc, #52]	; (8001ed8 <__libc_init_array+0x3c>)
 8001ea4:	1ba4      	subs	r4, r4, r6
 8001ea6:	10a4      	asrs	r4, r4, #2
 8001ea8:	42a5      	cmp	r5, r4
 8001eaa:	d109      	bne.n	8001ec0 <__libc_init_array+0x24>
 8001eac:	f000 f822 	bl	8001ef4 <_init>
 8001eb0:	2500      	movs	r5, #0
 8001eb2:	4e0a      	ldr	r6, [pc, #40]	; (8001edc <__libc_init_array+0x40>)
 8001eb4:	4c0a      	ldr	r4, [pc, #40]	; (8001ee0 <__libc_init_array+0x44>)
 8001eb6:	1ba4      	subs	r4, r4, r6
 8001eb8:	10a4      	asrs	r4, r4, #2
 8001eba:	42a5      	cmp	r5, r4
 8001ebc:	d105      	bne.n	8001eca <__libc_init_array+0x2e>
 8001ebe:	bd70      	pop	{r4, r5, r6, pc}
 8001ec0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ec4:	4798      	blx	r3
 8001ec6:	3501      	adds	r5, #1
 8001ec8:	e7ee      	b.n	8001ea8 <__libc_init_array+0xc>
 8001eca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001ece:	4798      	blx	r3
 8001ed0:	3501      	adds	r5, #1
 8001ed2:	e7f2      	b.n	8001eba <__libc_init_array+0x1e>
 8001ed4:	08001f30 	.word	0x08001f30
 8001ed8:	08001f30 	.word	0x08001f30
 8001edc:	08001f30 	.word	0x08001f30
 8001ee0:	08001f34 	.word	0x08001f34

08001ee4 <memset>:
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4402      	add	r2, r0
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d100      	bne.n	8001eee <memset+0xa>
 8001eec:	4770      	bx	lr
 8001eee:	f803 1b01 	strb.w	r1, [r3], #1
 8001ef2:	e7f9      	b.n	8001ee8 <memset+0x4>

08001ef4 <_init>:
 8001ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ef6:	bf00      	nop
 8001ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001efa:	bc08      	pop	{r3}
 8001efc:	469e      	mov	lr, r3
 8001efe:	4770      	bx	lr

08001f00 <_fini>:
 8001f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f02:	bf00      	nop
 8001f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f06:	bc08      	pop	{r3}
 8001f08:	469e      	mov	lr, r3
 8001f0a:	4770      	bx	lr

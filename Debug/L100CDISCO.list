
L100CDISCO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027a4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000274  080028e0  080028e0  000128e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b54  08002b54  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08002b54  08002b54  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b54  08002b54  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b54  08002b54  00012b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b58  08002b58  00012b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08002b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000070  200001dc  08002d38  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000024c  08002d38  0002024c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000658c  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000151a  00000000  00000000  00026791  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000640  00000000  00000000  00027cb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000578  00000000  00000000  000282f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015250  00000000  00000000  00028868  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006261  00000000  00000000  0003dab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080a23  00000000  00000000  00043d19  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c473c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c34  00000000  00000000  000c47b8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	200001dc 	.word	0x200001dc
 8000158:	00000000 	.word	0x00000000
 800015c:	080028c8 	.word	0x080028c8

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	200001e0 	.word	0x200001e0
 8000178:	080028c8 	.word	0x080028c8

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800018c:	b580      	push	{r7, lr}
 800018e:	b08a      	sub	sp, #40	; 0x28
 8000190:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000192:	f107 0314 	add.w	r3, r7, #20
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
 800019a:	605a      	str	r2, [r3, #4]
 800019c:	609a      	str	r2, [r3, #8]
 800019e:	60da      	str	r2, [r3, #12]
 80001a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001a2:	4b2a      	ldr	r3, [pc, #168]	; (800024c <MX_GPIO_Init+0xc0>)
 80001a4:	69db      	ldr	r3, [r3, #28]
 80001a6:	4a29      	ldr	r2, [pc, #164]	; (800024c <MX_GPIO_Init+0xc0>)
 80001a8:	f043 0304 	orr.w	r3, r3, #4
 80001ac:	61d3      	str	r3, [r2, #28]
 80001ae:	4b27      	ldr	r3, [pc, #156]	; (800024c <MX_GPIO_Init+0xc0>)
 80001b0:	69db      	ldr	r3, [r3, #28]
 80001b2:	f003 0304 	and.w	r3, r3, #4
 80001b6:	613b      	str	r3, [r7, #16]
 80001b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80001ba:	4b24      	ldr	r3, [pc, #144]	; (800024c <MX_GPIO_Init+0xc0>)
 80001bc:	69db      	ldr	r3, [r3, #28]
 80001be:	4a23      	ldr	r2, [pc, #140]	; (800024c <MX_GPIO_Init+0xc0>)
 80001c0:	f043 0320 	orr.w	r3, r3, #32
 80001c4:	61d3      	str	r3, [r2, #28]
 80001c6:	4b21      	ldr	r3, [pc, #132]	; (800024c <MX_GPIO_Init+0xc0>)
 80001c8:	69db      	ldr	r3, [r3, #28]
 80001ca:	f003 0320 	and.w	r3, r3, #32
 80001ce:	60fb      	str	r3, [r7, #12]
 80001d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001d2:	4b1e      	ldr	r3, [pc, #120]	; (800024c <MX_GPIO_Init+0xc0>)
 80001d4:	69db      	ldr	r3, [r3, #28]
 80001d6:	4a1d      	ldr	r2, [pc, #116]	; (800024c <MX_GPIO_Init+0xc0>)
 80001d8:	f043 0301 	orr.w	r3, r3, #1
 80001dc:	61d3      	str	r3, [r2, #28]
 80001de:	4b1b      	ldr	r3, [pc, #108]	; (800024c <MX_GPIO_Init+0xc0>)
 80001e0:	69db      	ldr	r3, [r3, #28]
 80001e2:	f003 0301 	and.w	r3, r3, #1
 80001e6:	60bb      	str	r3, [r7, #8]
 80001e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001ea:	4b18      	ldr	r3, [pc, #96]	; (800024c <MX_GPIO_Init+0xc0>)
 80001ec:	69db      	ldr	r3, [r3, #28]
 80001ee:	4a17      	ldr	r2, [pc, #92]	; (800024c <MX_GPIO_Init+0xc0>)
 80001f0:	f043 0302 	orr.w	r3, r3, #2
 80001f4:	61d3      	str	r3, [r2, #28]
 80001f6:	4b15      	ldr	r3, [pc, #84]	; (800024c <MX_GPIO_Init+0xc0>)
 80001f8:	69db      	ldr	r3, [r3, #28]
 80001fa:	f003 0302 	and.w	r3, r3, #2
 80001fe:	607b      	str	r3, [r7, #4]
 8000200:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8000202:	2200      	movs	r2, #0
 8000204:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000208:	4811      	ldr	r0, [pc, #68]	; (8000250 <MX_GPIO_Init+0xc4>)
 800020a:	f000 fd82 	bl	8000d12 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800020e:	2301      	movs	r3, #1
 8000210:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000212:	4b10      	ldr	r3, [pc, #64]	; (8000254 <MX_GPIO_Init+0xc8>)
 8000214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000216:	2300      	movs	r3, #0
 8000218:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800021a:	f107 0314 	add.w	r3, r7, #20
 800021e:	4619      	mov	r1, r3
 8000220:	480d      	ldr	r0, [pc, #52]	; (8000258 <MX_GPIO_Init+0xcc>)
 8000222:	f000 fbe9 	bl	80009f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000226:	f44f 7340 	mov.w	r3, #768	; 0x300
 800022a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800022c:	2301      	movs	r3, #1
 800022e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000230:	2300      	movs	r3, #0
 8000232:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000234:	2300      	movs	r3, #0
 8000236:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000238:	f107 0314 	add.w	r3, r7, #20
 800023c:	4619      	mov	r1, r3
 800023e:	4804      	ldr	r0, [pc, #16]	; (8000250 <MX_GPIO_Init+0xc4>)
 8000240:	f000 fbda 	bl	80009f8 <HAL_GPIO_Init>

}
 8000244:	bf00      	nop
 8000246:	3728      	adds	r7, #40	; 0x28
 8000248:	46bd      	mov	sp, r7
 800024a:	bd80      	pop	{r7, pc}
 800024c:	40023800 	.word	0x40023800
 8000250:	40020800 	.word	0x40020800
 8000254:	10110000 	.word	0x10110000
 8000258:	40020000 	.word	0x40020000

0800025c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t opt = 0;
 8000262:	2300      	movs	r3, #0
 8000264:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000266:	f000 fa74 	bl	8000752 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800026a:	f000 f813 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026e:	f7ff ff8d 	bl	800018c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000272:	f000 f9cf 	bl	8000614 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printMessage:
  	  printWelcomeMessage();
 8000276:	f000 f85b 	bl	8000330 <printWelcomeMessage>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	   //printTestMessage();
    /* USER CODE END WHILE */
		opt = readUserInput();
 800027a:	f000 f883 	bl	8000384 <readUserInput>
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]
		processUserInput(opt);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	4618      	mov	r0, r3
 8000286:	f000 f89d 	bl	80003c4 <processUserInput>
		if(opt == 3)
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	2b03      	cmp	r3, #3
 800028e:	d1f4      	bne.n	800027a <main+0x1e>
			goto printMessage;
 8000290:	e7f1      	b.n	8000276 <main+0x1a>
	...

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b092      	sub	sp, #72	; 0x48
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	f107 0314 	add.w	r3, r7, #20
 800029e:	2234      	movs	r2, #52	; 0x34
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f001 fe40 	bl	8001f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a8:	463b      	mov	r3, r7
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]
 80002ae:	605a      	str	r2, [r3, #4]
 80002b0:	609a      	str	r2, [r3, #8]
 80002b2:	60da      	str	r2, [r3, #12]
 80002b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002b6:	4b1d      	ldr	r3, [pc, #116]	; (800032c <SystemClock_Config+0x98>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80002be:	4a1b      	ldr	r2, [pc, #108]	; (800032c <SystemClock_Config+0x98>)
 80002c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80002c4:	6013      	str	r3, [r2, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c6:	2302      	movs	r3, #2
 80002c8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ca:	2301      	movs	r3, #1
 80002cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ce:	2310      	movs	r3, #16
 80002d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d2:	2302      	movs	r3, #2
 80002d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002d6:	2300      	movs	r3, #0
 80002d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002da:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80002de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 80002e0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80002e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e6:	f107 0314 	add.w	r3, r7, #20
 80002ea:	4618      	mov	r0, r3
 80002ec:	f000 fd42 	bl	8000d74 <HAL_RCC_OscConfig>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d001      	beq.n	80002fa <SystemClock_Config+0x66>
  {
    Error_Handler();
 80002f6:	f000 f8cd 	bl	8000494 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002fa:	230f      	movs	r3, #15
 80002fc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fe:	2303      	movs	r3, #3
 8000300:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000306:	2300      	movs	r3, #0
 8000308:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800030a:	2300      	movs	r3, #0
 800030c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800030e:	463b      	mov	r3, r7
 8000310:	2101      	movs	r1, #1
 8000312:	4618      	mov	r0, r3
 8000314:	f001 f85e 	bl	80013d4 <HAL_RCC_ClockConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800031e:	f000 f8b9 	bl	8000494 <Error_Handler>
  }
}
 8000322:	bf00      	nop
 8000324:	3748      	adds	r7, #72	; 0x48
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	40007000 	.word	0x40007000

08000330 <printWelcomeMessage>:

/* USER CODE BEGIN 4 */
void printWelcomeMessage(void) {
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1, (uint8_t*)"\033[0;0H", strlen("\033[0;0H"), HAL_MAX_DELAY);
 8000334:	f04f 33ff 	mov.w	r3, #4294967295
 8000338:	2206      	movs	r2, #6
 800033a:	490d      	ldr	r1, [pc, #52]	; (8000370 <printWelcomeMessage+0x40>)
 800033c:	480d      	ldr	r0, [pc, #52]	; (8000374 <printWelcomeMessage+0x44>)
 800033e:	f001 fab4 	bl	80018aa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\033[2J", strlen("\033[2J"), HAL_MAX_DELAY);
 8000342:	f04f 33ff 	mov.w	r3, #4294967295
 8000346:	2204      	movs	r2, #4
 8000348:	490b      	ldr	r1, [pc, #44]	; (8000378 <printWelcomeMessage+0x48>)
 800034a:	480a      	ldr	r0, [pc, #40]	; (8000374 <printWelcomeMessage+0x44>)
 800034c:	f001 faad 	bl	80018aa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)WELCOME_MSG, strlen(WELCOME_MSG), HAL_MAX_DELAY);
 8000350:	f04f 33ff 	mov.w	r3, #4294967295
 8000354:	222c      	movs	r2, #44	; 0x2c
 8000356:	4909      	ldr	r1, [pc, #36]	; (800037c <printWelcomeMessage+0x4c>)
 8000358:	4806      	ldr	r0, [pc, #24]	; (8000374 <printWelcomeMessage+0x44>)
 800035a:	f001 faa6 	bl	80018aa <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)MAIN_MENU, strlen(MAIN_MENU), HAL_MAX_DELAY);
 800035e:	f04f 33ff 	mov.w	r3, #4294967295
 8000362:	228b      	movs	r2, #139	; 0x8b
 8000364:	4906      	ldr	r1, [pc, #24]	; (8000380 <printWelcomeMessage+0x50>)
 8000366:	4803      	ldr	r0, [pc, #12]	; (8000374 <printWelcomeMessage+0x44>)
 8000368:	f001 fa9f 	bl	80018aa <HAL_UART_Transmit>
}
 800036c:	bf00      	nop
 800036e:	bd80      	pop	{r7, pc}
 8000370:	080028e0 	.word	0x080028e0
 8000374:	20000204 	.word	0x20000204
 8000378:	080028e8 	.word	0x080028e8
 800037c:	080028f0 	.word	0x080028f0
 8000380:	08002920 	.word	0x08002920

08000384 <readUserInput>:
	HAL_UART_Transmit(&huart1, (uint8_t*)"\033[0;0H", strlen("\033[0;0H"), HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart1, (uint8_t*)"\033[2J", strlen("\033[2J"), HAL_MAX_DELAY);
	HAL_UART_Transmit(&huart1, (uint8_t*)TEST, strlen(TEST), HAL_MAX_DELAY);
}

uint8_t readUserInput(void) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
	char readBuf[1];

	HAL_UART_Transmit(&huart1, (uint8_t*)PROMPT, strlen(PROMPT), HAL_MAX_DELAY);
 800038a:	f04f 33ff 	mov.w	r3, #4294967295
 800038e:	2204      	movs	r2, #4
 8000390:	490a      	ldr	r1, [pc, #40]	; (80003bc <readUserInput+0x38>)
 8000392:	480b      	ldr	r0, [pc, #44]	; (80003c0 <readUserInput+0x3c>)
 8000394:	f001 fa89 	bl	80018aa <HAL_UART_Transmit>
	HAL_UART_Receive(&huart1, (uint8_t*)readBuf, 1, HAL_MAX_DELAY);
 8000398:	1d39      	adds	r1, r7, #4
 800039a:	f04f 33ff 	mov.w	r3, #4294967295
 800039e:	2201      	movs	r2, #1
 80003a0:	4807      	ldr	r0, [pc, #28]	; (80003c0 <readUserInput+0x3c>)
 80003a2:	f001 fb1b 	bl	80019dc <HAL_UART_Receive>
	return atoi(readBuf);
 80003a6:	1d3b      	adds	r3, r7, #4
 80003a8:	4618      	mov	r0, r3
 80003aa:	f001 fd8f 	bl	8001ecc <atoi>
 80003ae:	4603      	mov	r3, r0
 80003b0:	b2db      	uxtb	r3, r3
}
 80003b2:	4618      	mov	r0, r3
 80003b4:	3708      	adds	r7, #8
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	080029b4 	.word	0x080029b4
 80003c0:	20000204 	.word	0x20000204

080003c4 <processUserInput>:


uint8_t processUserInput(uint8_t opt) {
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b08a      	sub	sp, #40	; 0x28
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]
	char msg[30];

	if(!opt || opt > 3)
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d002      	beq.n	80003da <processUserInput+0x16>
 80003d4:	79fb      	ldrb	r3, [r7, #7]
 80003d6:	2b03      	cmp	r3, #3
 80003d8:	d901      	bls.n	80003de <processUserInput+0x1a>
		return 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	e048      	b.n	8000470 <processUserInput+0xac>

	sprintf(msg, "%d", opt);
 80003de:	79fa      	ldrb	r2, [r7, #7]
 80003e0:	f107 0308 	add.w	r3, r7, #8
 80003e4:	4924      	ldr	r1, [pc, #144]	; (8000478 <processUserInput+0xb4>)
 80003e6:	4618      	mov	r0, r3
 80003e8:	f001 fda6 	bl	8001f38 <siprintf>
	HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80003ec:	f107 0308 	add.w	r3, r7, #8
 80003f0:	4618      	mov	r0, r3
 80003f2:	f7ff fec3 	bl	800017c <strlen>
 80003f6:	4603      	mov	r3, r0
 80003f8:	b29a      	uxth	r2, r3
 80003fa:	f107 0108 	add.w	r1, r7, #8
 80003fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000402:	481e      	ldr	r0, [pc, #120]	; (800047c <processUserInput+0xb8>)
 8000404:	f001 fa51 	bl	80018aa <HAL_UART_Transmit>

	switch(opt) {
 8000408:	79fb      	ldrb	r3, [r7, #7]
 800040a:	2b02      	cmp	r3, #2
 800040c:	d00e      	beq.n	800042c <processUserInput+0x68>
 800040e:	2b03      	cmp	r3, #3
 8000410:	d02b      	beq.n	800046a <processUserInput+0xa6>
 8000412:	2b01      	cmp	r3, #1
 8000414:	d12b      	bne.n	800046e <processUserInput+0xaa>
	case 1:
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000416:	f44f 7180 	mov.w	r1, #256	; 0x100
 800041a:	4819      	ldr	r0, [pc, #100]	; (8000480 <processUserInput+0xbc>)
 800041c:	f000 fc91 	bl	8000d42 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_9);
 8000420:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000424:	4816      	ldr	r0, [pc, #88]	; (8000480 <processUserInput+0xbc>)
 8000426:	f000 fc8c 	bl	8000d42 <HAL_GPIO_TogglePin>
		break;
 800042a:	e020      	b.n	800046e <processUserInput+0xaa>
	case 2:
		sprintf(msg, "\r\nUSER BUTTON status: %s", HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_RESET ? "RELEASED" : "PRESSED");
 800042c:	2101      	movs	r1, #1
 800042e:	4815      	ldr	r0, [pc, #84]	; (8000484 <processUserInput+0xc0>)
 8000430:	f000 fc58 	bl	8000ce4 <HAL_GPIO_ReadPin>
 8000434:	4603      	mov	r3, r0
 8000436:	2b00      	cmp	r3, #0
 8000438:	d101      	bne.n	800043e <processUserInput+0x7a>
 800043a:	4a13      	ldr	r2, [pc, #76]	; (8000488 <processUserInput+0xc4>)
 800043c:	e000      	b.n	8000440 <processUserInput+0x7c>
 800043e:	4a13      	ldr	r2, [pc, #76]	; (800048c <processUserInput+0xc8>)
 8000440:	f107 0308 	add.w	r3, r7, #8
 8000444:	4912      	ldr	r1, [pc, #72]	; (8000490 <processUserInput+0xcc>)
 8000446:	4618      	mov	r0, r3
 8000448:	f001 fd76 	bl	8001f38 <siprintf>
		HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 800044c:	f107 0308 	add.w	r3, r7, #8
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff fe93 	bl	800017c <strlen>
 8000456:	4603      	mov	r3, r0
 8000458:	b29a      	uxth	r2, r3
 800045a:	f107 0108 	add.w	r1, r7, #8
 800045e:	f04f 33ff 	mov.w	r3, #4294967295
 8000462:	4806      	ldr	r0, [pc, #24]	; (800047c <processUserInput+0xb8>)
 8000464:	f001 fa21 	bl	80018aa <HAL_UART_Transmit>
		break;
 8000468:	e001      	b.n	800046e <processUserInput+0xaa>
	case 3:
		return 2;
 800046a:	2302      	movs	r3, #2
 800046c:	e000      	b.n	8000470 <processUserInput+0xac>
	};

	return 1;
 800046e:	2301      	movs	r3, #1
}
 8000470:	4618      	mov	r0, r3
 8000472:	3728      	adds	r7, #40	; 0x28
 8000474:	46bd      	mov	sp, r7
 8000476:	bd80      	pop	{r7, pc}
 8000478:	080029bc 	.word	0x080029bc
 800047c:	20000204 	.word	0x20000204
 8000480:	40020800 	.word	0x40020800
 8000484:	40020000 	.word	0x40020000
 8000488:	080029c0 	.word	0x080029c0
 800048c:	080029cc 	.word	0x080029cc
 8000490:	080029d4 	.word	0x080029d4

08000494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000498:	bf00      	nop
 800049a:	46bd      	mov	sp, r7
 800049c:	bc80      	pop	{r7}
 800049e:	4770      	bx	lr

080004a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b084      	sub	sp, #16
 80004a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80004a6:	4b15      	ldr	r3, [pc, #84]	; (80004fc <HAL_MspInit+0x5c>)
 80004a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004aa:	4a14      	ldr	r2, [pc, #80]	; (80004fc <HAL_MspInit+0x5c>)
 80004ac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004b0:	6253      	str	r3, [r2, #36]	; 0x24
 80004b2:	4b12      	ldr	r3, [pc, #72]	; (80004fc <HAL_MspInit+0x5c>)
 80004b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004be:	4b0f      	ldr	r3, [pc, #60]	; (80004fc <HAL_MspInit+0x5c>)
 80004c0:	6a1b      	ldr	r3, [r3, #32]
 80004c2:	4a0e      	ldr	r2, [pc, #56]	; (80004fc <HAL_MspInit+0x5c>)
 80004c4:	f043 0301 	orr.w	r3, r3, #1
 80004c8:	6213      	str	r3, [r2, #32]
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <HAL_MspInit+0x5c>)
 80004cc:	6a1b      	ldr	r3, [r3, #32]
 80004ce:	f003 0301 	and.w	r3, r3, #1
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d6:	4b09      	ldr	r3, [pc, #36]	; (80004fc <HAL_MspInit+0x5c>)
 80004d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004da:	4a08      	ldr	r2, [pc, #32]	; (80004fc <HAL_MspInit+0x5c>)
 80004dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004e0:	6253      	str	r3, [r2, #36]	; 0x24
 80004e2:	4b06      	ldr	r3, [pc, #24]	; (80004fc <HAL_MspInit+0x5c>)
 80004e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004ee:	2007      	movs	r0, #7
 80004f0:	f000 fa4e 	bl	8000990 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f4:	bf00      	nop
 80004f6:	3710      	adds	r7, #16
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40023800 	.word	0x40023800

08000500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	bc80      	pop	{r7}
 800050a:	4770      	bx	lr

0800050c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <HardFault_Handler+0x4>

08000512 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000516:	e7fe      	b.n	8000516 <MemManage_Handler+0x4>

08000518 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800051c:	e7fe      	b.n	800051c <BusFault_Handler+0x4>

0800051e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <UsageFault_Handler+0x4>

08000524 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000528:	bf00      	nop
 800052a:	46bd      	mov	sp, r7
 800052c:	bc80      	pop	{r7}
 800052e:	4770      	bx	lr

08000530 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000534:	bf00      	nop
 8000536:	46bd      	mov	sp, r7
 8000538:	bc80      	pop	{r7}
 800053a:	4770      	bx	lr

0800053c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	bc80      	pop	{r7}
 8000546:	4770      	bx	lr

08000548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800054c:	f000 f954 	bl	80007f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}

08000554 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b084      	sub	sp, #16
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800055c:	4b11      	ldr	r3, [pc, #68]	; (80005a4 <_sbrk+0x50>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d102      	bne.n	800056a <_sbrk+0x16>
		heap_end = &end;
 8000564:	4b0f      	ldr	r3, [pc, #60]	; (80005a4 <_sbrk+0x50>)
 8000566:	4a10      	ldr	r2, [pc, #64]	; (80005a8 <_sbrk+0x54>)
 8000568:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800056a:	4b0e      	ldr	r3, [pc, #56]	; (80005a4 <_sbrk+0x50>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <_sbrk+0x50>)
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	4413      	add	r3, r2
 8000578:	466a      	mov	r2, sp
 800057a:	4293      	cmp	r3, r2
 800057c:	d907      	bls.n	800058e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800057e:	f001 fca9 	bl	8001ed4 <__errno>
 8000582:	4602      	mov	r2, r0
 8000584:	230c      	movs	r3, #12
 8000586:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000588:	f04f 33ff 	mov.w	r3, #4294967295
 800058c:	e006      	b.n	800059c <_sbrk+0x48>
	}

	heap_end += incr;
 800058e:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <_sbrk+0x50>)
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4413      	add	r3, r2
 8000596:	4a03      	ldr	r2, [pc, #12]	; (80005a4 <_sbrk+0x50>)
 8000598:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800059a:	68fb      	ldr	r3, [r7, #12]
}
 800059c:	4618      	mov	r0, r3
 800059e:	3710      	adds	r7, #16
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	200001f8 	.word	0x200001f8
 80005a8:	20000250 	.word	0x20000250

080005ac <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80005b0:	4b15      	ldr	r3, [pc, #84]	; (8000608 <SystemInit+0x5c>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a14      	ldr	r2, [pc, #80]	; (8000608 <SystemInit+0x5c>)
 80005b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005ba:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80005bc:	4b12      	ldr	r3, [pc, #72]	; (8000608 <SystemInit+0x5c>)
 80005be:	689a      	ldr	r2, [r3, #8]
 80005c0:	4911      	ldr	r1, [pc, #68]	; (8000608 <SystemInit+0x5c>)
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <SystemInit+0x60>)
 80005c4:	4013      	ands	r3, r2
 80005c6:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80005c8:	4b0f      	ldr	r3, [pc, #60]	; (8000608 <SystemInit+0x5c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <SystemInit+0x5c>)
 80005ce:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80005d2:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80005d6:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005d8:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <SystemInit+0x5c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a0a      	ldr	r2, [pc, #40]	; (8000608 <SystemInit+0x5c>)
 80005de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005e2:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80005e4:	4b08      	ldr	r3, [pc, #32]	; (8000608 <SystemInit+0x5c>)
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	4a07      	ldr	r2, [pc, #28]	; (8000608 <SystemInit+0x5c>)
 80005ea:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 80005ee:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <SystemInit+0x5c>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <SystemInit+0x64>)
 80005f8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80005fc:	609a      	str	r2, [r3, #8]
#endif
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	bc80      	pop	{r7}
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40023800 	.word	0x40023800
 800060c:	88ffc00c 	.word	0x88ffc00c
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <MX_USART1_UART_Init+0x4c>)
 800061a:	4a12      	ldr	r2, [pc, #72]	; (8000664 <MX_USART1_UART_Init+0x50>)
 800061c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <MX_USART1_UART_Init+0x4c>)
 8000620:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000624:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <MX_USART1_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_USART1_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <MX_USART1_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000638:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_USART1_UART_Init+0x4c>)
 800063a:	220c      	movs	r2, #12
 800063c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	4b08      	ldr	r3, [pc, #32]	; (8000660 <MX_USART1_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000644:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_USART1_UART_Init+0x4c>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800064a:	4805      	ldr	r0, [pc, #20]	; (8000660 <MX_USART1_UART_Init+0x4c>)
 800064c:	f001 f8e0 	bl	8001810 <HAL_UART_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000656:	f7ff ff1d 	bl	8000494 <Error_Handler>
  }

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000204 	.word	0x20000204
 8000664:	40013800 	.word	0x40013800

08000668 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	; 0x28
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000670:	f107 0314 	add.w	r3, r7, #20
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a1d      	ldr	r2, [pc, #116]	; (80006fc <HAL_UART_MspInit+0x94>)
 8000686:	4293      	cmp	r3, r2
 8000688:	d134      	bne.n	80006f4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800068a:	4b1d      	ldr	r3, [pc, #116]	; (8000700 <HAL_UART_MspInit+0x98>)
 800068c:	6a1b      	ldr	r3, [r3, #32]
 800068e:	4a1c      	ldr	r2, [pc, #112]	; (8000700 <HAL_UART_MspInit+0x98>)
 8000690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000694:	6213      	str	r3, [r2, #32]
 8000696:	4b1a      	ldr	r3, [pc, #104]	; (8000700 <HAL_UART_MspInit+0x98>)
 8000698:	6a1b      	ldr	r3, [r3, #32]
 800069a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069e:	613b      	str	r3, [r7, #16]
 80006a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a2:	4b17      	ldr	r3, [pc, #92]	; (8000700 <HAL_UART_MspInit+0x98>)
 80006a4:	69db      	ldr	r3, [r3, #28]
 80006a6:	4a16      	ldr	r2, [pc, #88]	; (8000700 <HAL_UART_MspInit+0x98>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	61d3      	str	r3, [r2, #28]
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <HAL_UART_MspInit+0x98>)
 80006b0:	69db      	ldr	r3, [r3, #28]
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <HAL_UART_MspInit+0x98>)
 80006bc:	69db      	ldr	r3, [r3, #28]
 80006be:	4a10      	ldr	r2, [pc, #64]	; (8000700 <HAL_UART_MspInit+0x98>)
 80006c0:	f043 0304 	orr.w	r3, r3, #4
 80006c4:	61d3      	str	r3, [r2, #28]
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <HAL_UART_MspInit+0x98>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	f003 0304 	and.w	r3, r3, #4
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80006d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80006d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d8:	2302      	movs	r3, #2
 80006da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e0:	2303      	movs	r3, #3
 80006e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80006e4:	2307      	movs	r3, #7
 80006e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	4619      	mov	r1, r3
 80006ee:	4805      	ldr	r0, [pc, #20]	; (8000704 <HAL_UART_MspInit+0x9c>)
 80006f0:	f000 f982 	bl	80009f8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80006f4:	bf00      	nop
 80006f6:	3728      	adds	r7, #40	; 0x28
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40013800 	.word	0x40013800
 8000700:	40023800 	.word	0x40023800
 8000704:	40020000 	.word	0x40020000

08000708 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000708:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800070a:	e003      	b.n	8000714 <LoopCopyDataInit>

0800070c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800070c:	4b0b      	ldr	r3, [pc, #44]	; (800073c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800070e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000710:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000712:	3104      	adds	r1, #4

08000714 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000714:	480a      	ldr	r0, [pc, #40]	; (8000740 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000716:	4b0b      	ldr	r3, [pc, #44]	; (8000744 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000718:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800071a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800071c:	d3f6      	bcc.n	800070c <CopyDataInit>
  ldr r2, =_sbss
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000720:	e002      	b.n	8000728 <LoopFillZerobss>

08000722 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000724:	f842 3b04 	str.w	r3, [r2], #4

08000728 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800072a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800072c:	d3f9      	bcc.n	8000722 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800072e:	f7ff ff3d 	bl	80005ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000732:	f001 fbd5 	bl	8001ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000736:	f7ff fd91 	bl	800025c <main>
  bx lr
 800073a:	4770      	bx	lr
  ldr r3, =_sidata
 800073c:	08002b5c 	.word	0x08002b5c
  ldr r0, =_sdata
 8000740:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000744:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8000748:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 800074c:	2000024c 	.word	0x2000024c

08000750 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000750:	e7fe      	b.n	8000750 <ADC1_IRQHandler>

08000752 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b082      	sub	sp, #8
 8000756:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000758:	2300      	movs	r3, #0
 800075a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800075c:	2003      	movs	r0, #3
 800075e:	f000 f917 	bl	8000990 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000762:	2000      	movs	r0, #0
 8000764:	f000 f80e 	bl	8000784 <HAL_InitTick>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d002      	beq.n	8000774 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800076e:	2301      	movs	r3, #1
 8000770:	71fb      	strb	r3, [r7, #7]
 8000772:	e001      	b.n	8000778 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000774:	f7ff fe94 	bl	80004a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000778:	79fb      	ldrb	r3, [r7, #7]
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800078c:	2300      	movs	r3, #0
 800078e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000790:	4b16      	ldr	r3, [pc, #88]	; (80007ec <HAL_InitTick+0x68>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d022      	beq.n	80007de <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000798:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <HAL_InitTick+0x6c>)
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4b13      	ldr	r3, [pc, #76]	; (80007ec <HAL_InitTick+0x68>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80007a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ac:	4618      	mov	r0, r3
 80007ae:	f000 f916 	bl	80009de <HAL_SYSTICK_Config>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d10f      	bne.n	80007d8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	2b0f      	cmp	r3, #15
 80007bc:	d809      	bhi.n	80007d2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007be:	2200      	movs	r2, #0
 80007c0:	6879      	ldr	r1, [r7, #4]
 80007c2:	f04f 30ff 	mov.w	r0, #4294967295
 80007c6:	f000 f8ee 	bl	80009a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007ca:	4a0a      	ldr	r2, [pc, #40]	; (80007f4 <HAL_InitTick+0x70>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6013      	str	r3, [r2, #0]
 80007d0:	e007      	b.n	80007e2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80007d2:	2301      	movs	r3, #1
 80007d4:	73fb      	strb	r3, [r7, #15]
 80007d6:	e004      	b.n	80007e2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007d8:	2301      	movs	r3, #1
 80007da:	73fb      	strb	r3, [r7, #15]
 80007dc:	e001      	b.n	80007e2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80007de:	2301      	movs	r3, #1
 80007e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000000 	.word	0x20000000
 80007f4:	20000004 	.word	0x20000004

080007f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007fc:	4b05      	ldr	r3, [pc, #20]	; (8000814 <HAL_IncTick+0x1c>)
 80007fe:	681a      	ldr	r2, [r3, #0]
 8000800:	4b05      	ldr	r3, [pc, #20]	; (8000818 <HAL_IncTick+0x20>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4413      	add	r3, r2
 8000806:	4a03      	ldr	r2, [pc, #12]	; (8000814 <HAL_IncTick+0x1c>)
 8000808:	6013      	str	r3, [r2, #0]
}
 800080a:	bf00      	nop
 800080c:	46bd      	mov	sp, r7
 800080e:	bc80      	pop	{r7}
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000244 	.word	0x20000244
 8000818:	20000008 	.word	0x20000008

0800081c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return uwTick;
 8000820:	4b02      	ldr	r3, [pc, #8]	; (800082c <HAL_GetTick+0x10>)
 8000822:	681b      	ldr	r3, [r3, #0]
}
 8000824:	4618      	mov	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	bc80      	pop	{r7}
 800082a:	4770      	bx	lr
 800082c:	20000244 	.word	0x20000244

08000830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <__NVIC_SetPriorityGrouping+0x44>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800084c:	4013      	ands	r3, r2
 800084e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000854:	68bb      	ldr	r3, [r7, #8]
 8000856:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000858:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800085c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000860:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000862:	4a04      	ldr	r2, [pc, #16]	; (8000874 <__NVIC_SetPriorityGrouping+0x44>)
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	60d3      	str	r3, [r2, #12]
}
 8000868:	bf00      	nop
 800086a:	3714      	adds	r7, #20
 800086c:	46bd      	mov	sp, r7
 800086e:	bc80      	pop	{r7}
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	e000ed00 	.word	0xe000ed00

08000878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <__NVIC_GetPriorityGrouping+0x18>)
 800087e:	68db      	ldr	r3, [r3, #12]
 8000880:	0a1b      	lsrs	r3, r3, #8
 8000882:	f003 0307 	and.w	r3, r3, #7
}
 8000886:	4618      	mov	r0, r3
 8000888:	46bd      	mov	sp, r7
 800088a:	bc80      	pop	{r7}
 800088c:	4770      	bx	lr
 800088e:	bf00      	nop
 8000890:	e000ed00 	.word	0xe000ed00

08000894 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000894:	b480      	push	{r7}
 8000896:	b083      	sub	sp, #12
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	6039      	str	r1, [r7, #0]
 800089e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	db0a      	blt.n	80008be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	b2da      	uxtb	r2, r3
 80008ac:	490c      	ldr	r1, [pc, #48]	; (80008e0 <__NVIC_SetPriority+0x4c>)
 80008ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b2:	0112      	lsls	r2, r2, #4
 80008b4:	b2d2      	uxtb	r2, r2
 80008b6:	440b      	add	r3, r1
 80008b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008bc:	e00a      	b.n	80008d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	b2da      	uxtb	r2, r3
 80008c2:	4908      	ldr	r1, [pc, #32]	; (80008e4 <__NVIC_SetPriority+0x50>)
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	f003 030f 	and.w	r3, r3, #15
 80008ca:	3b04      	subs	r3, #4
 80008cc:	0112      	lsls	r2, r2, #4
 80008ce:	b2d2      	uxtb	r2, r2
 80008d0:	440b      	add	r3, r1
 80008d2:	761a      	strb	r2, [r3, #24]
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000e100 	.word	0xe000e100
 80008e4:	e000ed00 	.word	0xe000ed00

080008e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e8:	b480      	push	{r7}
 80008ea:	b089      	sub	sp, #36	; 0x24
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	60f8      	str	r0, [r7, #12]
 80008f0:	60b9      	str	r1, [r7, #8]
 80008f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008fc:	69fb      	ldr	r3, [r7, #28]
 80008fe:	f1c3 0307 	rsb	r3, r3, #7
 8000902:	2b04      	cmp	r3, #4
 8000904:	bf28      	it	cs
 8000906:	2304      	movcs	r3, #4
 8000908:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	3304      	adds	r3, #4
 800090e:	2b06      	cmp	r3, #6
 8000910:	d902      	bls.n	8000918 <NVIC_EncodePriority+0x30>
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	3b03      	subs	r3, #3
 8000916:	e000      	b.n	800091a <NVIC_EncodePriority+0x32>
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800091c:	f04f 32ff 	mov.w	r2, #4294967295
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	fa02 f303 	lsl.w	r3, r2, r3
 8000926:	43da      	mvns	r2, r3
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	401a      	ands	r2, r3
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000930:	f04f 31ff 	mov.w	r1, #4294967295
 8000934:	697b      	ldr	r3, [r7, #20]
 8000936:	fa01 f303 	lsl.w	r3, r1, r3
 800093a:	43d9      	mvns	r1, r3
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000940:	4313      	orrs	r3, r2
         );
}
 8000942:	4618      	mov	r0, r3
 8000944:	3724      	adds	r7, #36	; 0x24
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr

0800094c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	3b01      	subs	r3, #1
 8000958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800095c:	d301      	bcc.n	8000962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800095e:	2301      	movs	r3, #1
 8000960:	e00f      	b.n	8000982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <SysTick_Config+0x40>)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	3b01      	subs	r3, #1
 8000968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800096a:	210f      	movs	r1, #15
 800096c:	f04f 30ff 	mov.w	r0, #4294967295
 8000970:	f7ff ff90 	bl	8000894 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000974:	4b05      	ldr	r3, [pc, #20]	; (800098c <SysTick_Config+0x40>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800097a:	4b04      	ldr	r3, [pc, #16]	; (800098c <SysTick_Config+0x40>)
 800097c:	2207      	movs	r2, #7
 800097e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	3708      	adds	r7, #8
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	e000e010 	.word	0xe000e010

08000990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b082      	sub	sp, #8
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000998:	6878      	ldr	r0, [r7, #4]
 800099a:	f7ff ff49 	bl	8000830 <__NVIC_SetPriorityGrouping>
}
 800099e:	bf00      	nop
 80009a0:	3708      	adds	r7, #8
 80009a2:	46bd      	mov	sp, r7
 80009a4:	bd80      	pop	{r7, pc}

080009a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	b086      	sub	sp, #24
 80009aa:	af00      	add	r7, sp, #0
 80009ac:	4603      	mov	r3, r0
 80009ae:	60b9      	str	r1, [r7, #8]
 80009b0:	607a      	str	r2, [r7, #4]
 80009b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009b4:	2300      	movs	r3, #0
 80009b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b8:	f7ff ff5e 	bl	8000878 <__NVIC_GetPriorityGrouping>
 80009bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	68b9      	ldr	r1, [r7, #8]
 80009c2:	6978      	ldr	r0, [r7, #20]
 80009c4:	f7ff ff90 	bl	80008e8 <NVIC_EncodePriority>
 80009c8:	4602      	mov	r2, r0
 80009ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ce:	4611      	mov	r1, r2
 80009d0:	4618      	mov	r0, r3
 80009d2:	f7ff ff5f 	bl	8000894 <__NVIC_SetPriority>
}
 80009d6:	bf00      	nop
 80009d8:	3718      	adds	r7, #24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}

080009de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009de:	b580      	push	{r7, lr}
 80009e0:	b082      	sub	sp, #8
 80009e2:	af00      	add	r7, sp, #0
 80009e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e6:	6878      	ldr	r0, [r7, #4]
 80009e8:	f7ff ffb0 	bl	800094c <SysTick_Config>
 80009ec:	4603      	mov	r3, r0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
	...

080009f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 80009f8:	b480      	push	{r7}
 80009fa:	b087      	sub	sp, #28
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
 8000a00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000a02:	2300      	movs	r3, #0
 8000a04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000a0e:	e14e      	b.n	8000cae <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	2101      	movs	r1, #1
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	f000 8140 	beq.w	8000ca8 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	2b02      	cmp	r3, #2
 8000a2e:	d003      	beq.n	8000a38 <HAL_GPIO_Init+0x40>
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	685b      	ldr	r3, [r3, #4]
 8000a34:	2b12      	cmp	r3, #18
 8000a36:	d123      	bne.n	8000a80 <HAL_GPIO_Init+0x88>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */ 
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	08da      	lsrs	r2, r3, #3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3208      	adds	r2, #8
 8000a40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a44:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	f003 0307 	and.w	r3, r3, #7
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	220f      	movs	r2, #15
 8000a50:	fa02 f303 	lsl.w	r3, r2, r3
 8000a54:	43db      	mvns	r3, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	691a      	ldr	r2, [r3, #16]
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	f003 0307 	and.w	r3, r3, #7
 8000a66:	009b      	lsls	r3, r3, #2
 8000a68:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000a72:	697b      	ldr	r3, [r7, #20]
 8000a74:	08da      	lsrs	r2, r3, #3
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	3208      	adds	r2, #8
 8000a7a:	6939      	ldr	r1, [r7, #16]
 8000a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a90:	43db      	mvns	r3, r3
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	4013      	ands	r3, r2
 8000a96:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f003 0203 	and.w	r2, r3, #3
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	005b      	lsls	r3, r3, #1
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	693a      	ldr	r2, [r7, #16]
 8000ab2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	2b01      	cmp	r3, #1
 8000aba:	d00b      	beq.n	8000ad4 <HAL_GPIO_Init+0xdc>
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d007      	beq.n	8000ad4 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ac8:	2b11      	cmp	r3, #17
 8000aca:	d003      	beq.n	8000ad4 <HAL_GPIO_Init+0xdc>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	2b12      	cmp	r3, #18
 8000ad2:	d130      	bne.n	8000b36 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	2203      	movs	r2, #3
 8000ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae4:	43db      	mvns	r3, r3
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	68da      	ldr	r2, [r3, #12]
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	fa02 f303 	lsl.w	r3, r2, r3
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	4313      	orrs	r3, r2
 8000afc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	43db      	mvns	r3, r3
 8000b14:	693a      	ldr	r2, [r7, #16]
 8000b16:	4013      	ands	r3, r2
 8000b18:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	091b      	lsrs	r3, r3, #4
 8000b20:	f003 0201 	and.w	r2, r3, #1
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2a:	693a      	ldr	r2, [r7, #16]
 8000b2c:	4313      	orrs	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	693a      	ldr	r2, [r7, #16]
 8000b34:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	2203      	movs	r2, #3
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	697b      	ldr	r3, [r7, #20]
 8000b54:	005b      	lsls	r3, r3, #1
 8000b56:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	693a      	ldr	r2, [r7, #16]
 8000b64:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	f000 809a 	beq.w	8000ca8 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b74:	4b54      	ldr	r3, [pc, #336]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000b76:	6a1b      	ldr	r3, [r3, #32]
 8000b78:	4a53      	ldr	r2, [pc, #332]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	6213      	str	r3, [r2, #32]
 8000b80:	4b51      	ldr	r3, [pc, #324]	; (8000cc8 <HAL_GPIO_Init+0x2d0>)
 8000b82:	6a1b      	ldr	r3, [r3, #32]
 8000b84:	f003 0301 	and.w	r3, r3, #1
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	68bb      	ldr	r3, [r7, #8]
        
        temp = SYSCFG->EXTICR[position >> 2];
 8000b8c:	4a4f      	ldr	r2, [pc, #316]	; (8000ccc <HAL_GPIO_Init+0x2d4>)
 8000b8e:	697b      	ldr	r3, [r7, #20]
 8000b90:	089b      	lsrs	r3, r3, #2
 8000b92:	3302      	adds	r3, #2
 8000b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b98:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	f003 0303 	and.w	r3, r3, #3
 8000ba0:	009b      	lsls	r3, r3, #2
 8000ba2:	220f      	movs	r2, #15
 8000ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba8:	43db      	mvns	r3, r3
 8000baa:	693a      	ldr	r2, [r7, #16]
 8000bac:	4013      	ands	r3, r2
 8000bae:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a47      	ldr	r2, [pc, #284]	; (8000cd0 <HAL_GPIO_Init+0x2d8>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d013      	beq.n	8000be0 <HAL_GPIO_Init+0x1e8>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a46      	ldr	r2, [pc, #280]	; (8000cd4 <HAL_GPIO_Init+0x2dc>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d00d      	beq.n	8000bdc <HAL_GPIO_Init+0x1e4>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a45      	ldr	r2, [pc, #276]	; (8000cd8 <HAL_GPIO_Init+0x2e0>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d007      	beq.n	8000bd8 <HAL_GPIO_Init+0x1e0>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a44      	ldr	r2, [pc, #272]	; (8000cdc <HAL_GPIO_Init+0x2e4>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d101      	bne.n	8000bd4 <HAL_GPIO_Init+0x1dc>
 8000bd0:	2303      	movs	r3, #3
 8000bd2:	e006      	b.n	8000be2 <HAL_GPIO_Init+0x1ea>
 8000bd4:	2305      	movs	r3, #5
 8000bd6:	e004      	b.n	8000be2 <HAL_GPIO_Init+0x1ea>
 8000bd8:	2302      	movs	r3, #2
 8000bda:	e002      	b.n	8000be2 <HAL_GPIO_Init+0x1ea>
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e000      	b.n	8000be2 <HAL_GPIO_Init+0x1ea>
 8000be0:	2300      	movs	r3, #0
 8000be2:	697a      	ldr	r2, [r7, #20]
 8000be4:	f002 0203 	and.w	r2, r2, #3
 8000be8:	0092      	lsls	r2, r2, #2
 8000bea:	4093      	lsls	r3, r2
 8000bec:	693a      	ldr	r2, [r7, #16]
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000bf2:	4936      	ldr	r1, [pc, #216]	; (8000ccc <HAL_GPIO_Init+0x2d4>)
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	089b      	lsrs	r3, r3, #2
 8000bf8:	3302      	adds	r3, #2
 8000bfa:	693a      	ldr	r2, [r7, #16]
 8000bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c00:	4b37      	ldr	r3, [pc, #220]	; (8000ce0 <HAL_GPIO_Init+0x2e8>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	43db      	mvns	r3, r3
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	685b      	ldr	r3, [r3, #4]
 8000c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d003      	beq.n	8000c24 <HAL_GPIO_Init+0x22c>
        {
          SET_BIT(temp, iocurrent); 
 8000c1c:	693a      	ldr	r2, [r7, #16]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c24:	4a2e      	ldr	r2, [pc, #184]	; (8000ce0 <HAL_GPIO_Init+0x2e8>)
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000c2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ce0 <HAL_GPIO_Init+0x2e8>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	43db      	mvns	r3, r3
 8000c34:	693a      	ldr	r2, [r7, #16]
 8000c36:	4013      	ands	r3, r2
 8000c38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d003      	beq.n	8000c4e <HAL_GPIO_Init+0x256>
        {
          SET_BIT(temp, iocurrent); 
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c4e:	4a24      	ldr	r2, [pc, #144]	; (8000ce0 <HAL_GPIO_Init+0x2e8>)
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	6053      	str	r3, [r2, #4]
  
        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c54:	4b22      	ldr	r3, [pc, #136]	; (8000ce0 <HAL_GPIO_Init+0x2e8>)
 8000c56:	689b      	ldr	r3, [r3, #8]
 8000c58:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d003      	beq.n	8000c78 <HAL_GPIO_Init+0x280>
        {
          SET_BIT(temp, iocurrent); 
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c78:	4a19      	ldr	r2, [pc, #100]	; (8000ce0 <HAL_GPIO_Init+0x2e8>)
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c7e:	4b18      	ldr	r3, [pc, #96]	; (8000ce0 <HAL_GPIO_Init+0x2e8>)
 8000c80:	68db      	ldr	r3, [r3, #12]
 8000c82:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	43db      	mvns	r3, r3
 8000c88:	693a      	ldr	r2, [r7, #16]
 8000c8a:	4013      	ands	r3, r2
 8000c8c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d003      	beq.n	8000ca2 <HAL_GPIO_Init+0x2aa>
        {
          SET_BIT(temp, iocurrent); 
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ca2:	4a0f      	ldr	r2, [pc, #60]	; (8000ce0 <HAL_GPIO_Init+0x2e8>)
 8000ca4:	693b      	ldr	r3, [r7, #16]
 8000ca6:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	3301      	adds	r3, #1
 8000cac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	f47f aea9 	bne.w	8000a10 <HAL_GPIO_Init+0x18>
  } 
}
 8000cbe:	bf00      	nop
 8000cc0:	371c      	adds	r7, #28
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bc80      	pop	{r7}
 8000cc6:	4770      	bx	lr
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40010000 	.word	0x40010000
 8000cd0:	40020000 	.word	0x40020000
 8000cd4:	40020400 	.word	0x40020400
 8000cd8:	40020800 	.word	0x40020800
 8000cdc:	40020c00 	.word	0x40020c00
 8000ce0:	40010400 	.word	0x40010400

08000ce4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	460b      	mov	r3, r1
 8000cee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	691a      	ldr	r2, [r3, #16]
 8000cf4:	887b      	ldrh	r3, [r7, #2]
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d002      	beq.n	8000d02 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	73fb      	strb	r3, [r7, #15]
 8000d00:	e001      	b.n	8000d06 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000d02:	2300      	movs	r3, #0
 8000d04:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bc80      	pop	{r7}
 8000d10:	4770      	bx	lr

08000d12 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d12:	b480      	push	{r7}
 8000d14:	b083      	sub	sp, #12
 8000d16:	af00      	add	r7, sp, #0
 8000d18:	6078      	str	r0, [r7, #4]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	807b      	strh	r3, [r7, #2]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d22:	787b      	ldrb	r3, [r7, #1]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d003      	beq.n	8000d30 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d28:	887a      	ldrh	r2, [r7, #2]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000d2e:	e003      	b.n	8000d38 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000d30:	887b      	ldrh	r3, [r7, #2]
 8000d32:	041a      	lsls	r2, r3, #16
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	619a      	str	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	bc80      	pop	{r7}
 8000d40:	4770      	bx	lr

08000d42 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices 
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d42:	b480      	push	{r7}
 8000d44:	b083      	sub	sp, #12
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	695a      	ldr	r2, [r3, #20]
 8000d52:	887b      	ldrh	r3, [r7, #2]
 8000d54:	4013      	ands	r3, r2
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d004      	beq.n	8000d64 <HAL_GPIO_TogglePin+0x22>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000d5a:	887b      	ldrh	r3, [r7, #2]
 8000d5c:	041a      	lsls	r2, r3, #16
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000d62:	e002      	b.n	8000d6a <HAL_GPIO_TogglePin+0x28>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d64:	887a      	ldrh	r2, [r7, #2]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	619a      	str	r2, [r3, #24]
}
 8000d6a:	bf00      	nop
 8000d6c:	370c      	adds	r7, #12
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b088      	sub	sp, #32
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d101      	bne.n	8000d86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	e31d      	b.n	80013c2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d86:	4b94      	ldr	r3, [pc, #592]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000d88:	689b      	ldr	r3, [r3, #8]
 8000d8a:	f003 030c 	and.w	r3, r3, #12
 8000d8e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d90:	4b91      	ldr	r3, [pc, #580]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d98:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	f003 0301 	and.w	r3, r3, #1
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d07b      	beq.n	8000e9e <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000da6:	69bb      	ldr	r3, [r7, #24]
 8000da8:	2b08      	cmp	r3, #8
 8000daa:	d006      	beq.n	8000dba <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000dac:	69bb      	ldr	r3, [r7, #24]
 8000dae:	2b0c      	cmp	r3, #12
 8000db0:	d10f      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x5e>
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000db8:	d10b      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dba:	4b87      	ldr	r3, [pc, #540]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d06a      	beq.n	8000e9c <HAL_RCC_OscConfig+0x128>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d166      	bne.n	8000e9c <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e2f7      	b.n	80013c2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d106      	bne.n	8000de8 <HAL_RCC_OscConfig+0x74>
 8000dda:	4b7f      	ldr	r3, [pc, #508]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a7e      	ldr	r2, [pc, #504]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de4:	6013      	str	r3, [r2, #0]
 8000de6:	e02d      	b.n	8000e44 <HAL_RCC_OscConfig+0xd0>
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d10c      	bne.n	8000e0a <HAL_RCC_OscConfig+0x96>
 8000df0:	4b79      	ldr	r3, [pc, #484]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a78      	ldr	r2, [pc, #480]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000df6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000dfa:	6013      	str	r3, [r2, #0]
 8000dfc:	4b76      	ldr	r3, [pc, #472]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a75      	ldr	r2, [pc, #468]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000e02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e06:	6013      	str	r3, [r2, #0]
 8000e08:	e01c      	b.n	8000e44 <HAL_RCC_OscConfig+0xd0>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b05      	cmp	r3, #5
 8000e10:	d10c      	bne.n	8000e2c <HAL_RCC_OscConfig+0xb8>
 8000e12:	4b71      	ldr	r3, [pc, #452]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a70      	ldr	r2, [pc, #448]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	4b6e      	ldr	r3, [pc, #440]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a6d      	ldr	r2, [pc, #436]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	e00b      	b.n	8000e44 <HAL_RCC_OscConfig+0xd0>
 8000e2c:	4b6a      	ldr	r3, [pc, #424]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a69      	ldr	r2, [pc, #420]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e36:	6013      	str	r3, [r2, #0]
 8000e38:	4b67      	ldr	r3, [pc, #412]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a66      	ldr	r2, [pc, #408]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d013      	beq.n	8000e74 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e4c:	f7ff fce6 	bl	800081c <HAL_GetTick>
 8000e50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e52:	e008      	b.n	8000e66 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e54:	f7ff fce2 	bl	800081c <HAL_GetTick>
 8000e58:	4602      	mov	r2, r0
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	1ad3      	subs	r3, r2, r3
 8000e5e:	2b64      	cmp	r3, #100	; 0x64
 8000e60:	d901      	bls.n	8000e66 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e2ad      	b.n	80013c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000e66:	4b5c      	ldr	r3, [pc, #368]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d0f0      	beq.n	8000e54 <HAL_RCC_OscConfig+0xe0>
 8000e72:	e014      	b.n	8000e9e <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e74:	f7ff fcd2 	bl	800081c <HAL_GetTick>
 8000e78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e7a:	e008      	b.n	8000e8e <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e7c:	f7ff fcce 	bl	800081c <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	693b      	ldr	r3, [r7, #16]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	2b64      	cmp	r3, #100	; 0x64
 8000e88:	d901      	bls.n	8000e8e <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	e299      	b.n	80013c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000e8e:	4b52      	ldr	r3, [pc, #328]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1f0      	bne.n	8000e7c <HAL_RCC_OscConfig+0x108>
 8000e9a:	e000      	b.n	8000e9e <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f003 0302 	and.w	r3, r3, #2
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d05a      	beq.n	8000f60 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	2b04      	cmp	r3, #4
 8000eae:	d005      	beq.n	8000ebc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	2b0c      	cmp	r3, #12
 8000eb4:	d119      	bne.n	8000eea <HAL_RCC_OscConfig+0x176>
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d116      	bne.n	8000eea <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ebc:	4b46      	ldr	r3, [pc, #280]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d005      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x160>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d001      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	e276      	b.n	80013c2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ed4:	4b40      	ldr	r3, [pc, #256]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	691b      	ldr	r3, [r3, #16]
 8000ee0:	021b      	lsls	r3, r3, #8
 8000ee2:	493d      	ldr	r1, [pc, #244]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ee8:	e03a      	b.n	8000f60 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d020      	beq.n	8000f34 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ef2:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <HAL_RCC_OscConfig+0x268>)
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ef8:	f7ff fc90 	bl	800081c <HAL_GetTick>
 8000efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000efe:	e008      	b.n	8000f12 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f00:	f7ff fc8c 	bl	800081c <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d901      	bls.n	8000f12 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e257      	b.n	80013c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000f12:	4b31      	ldr	r3, [pc, #196]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d0f0      	beq.n	8000f00 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f1e:	4b2e      	ldr	r3, [pc, #184]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	691b      	ldr	r3, [r3, #16]
 8000f2a:	021b      	lsls	r3, r3, #8
 8000f2c:	492a      	ldr	r1, [pc, #168]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	604b      	str	r3, [r1, #4]
 8000f32:	e015      	b.n	8000f60 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f34:	4b29      	ldr	r3, [pc, #164]	; (8000fdc <HAL_RCC_OscConfig+0x268>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f3a:	f7ff fc6f 	bl	800081c <HAL_GetTick>
 8000f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f40:	e008      	b.n	8000f54 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f42:	f7ff fc6b 	bl	800081c <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	d901      	bls.n	8000f54 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8000f50:	2303      	movs	r3, #3
 8000f52:	e236      	b.n	80013c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8000f54:	4b20      	ldr	r3, [pc, #128]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f003 0302 	and.w	r3, r3, #2
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d1f0      	bne.n	8000f42 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 0310 	and.w	r3, r3, #16
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 80b8 	beq.w	80010de <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d170      	bne.n	8001056 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000f74:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d005      	beq.n	8000f8c <HAL_RCC_OscConfig+0x218>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d101      	bne.n	8000f8c <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e21a      	b.n	80013c2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a1a      	ldr	r2, [r3, #32]
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d921      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6a1b      	ldr	r3, [r3, #32]
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	f000 fbd5 	bl	8001750 <RCC_SetFlashLatencyFromMSIRange>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e208      	b.n	80013c2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a1b      	ldr	r3, [r3, #32]
 8000fbc:	4906      	ldr	r1, [pc, #24]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	061b      	lsls	r3, r3, #24
 8000fd0:	4901      	ldr	r1, [pc, #4]	; (8000fd8 <HAL_RCC_OscConfig+0x264>)
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	604b      	str	r3, [r1, #4]
 8000fd6:	e020      	b.n	800101a <HAL_RCC_OscConfig+0x2a6>
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000fe0:	4ba4      	ldr	r3, [pc, #656]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	49a1      	ldr	r1, [pc, #644]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ff2:	4ba0      	ldr	r3, [pc, #640]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	69db      	ldr	r3, [r3, #28]
 8000ffe:	061b      	lsls	r3, r3, #24
 8001000:	499c      	ldr	r1, [pc, #624]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 8001002:	4313      	orrs	r3, r2
 8001004:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6a1b      	ldr	r3, [r3, #32]
 800100a:	4618      	mov	r0, r3
 800100c:	f000 fba0 	bl	8001750 <RCC_SetFlashLatencyFromMSIRange>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e1d3      	b.n	80013c2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a1b      	ldr	r3, [r3, #32]
 800101e:	0b5b      	lsrs	r3, r3, #13
 8001020:	3301      	adds	r3, #1
 8001022:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800102a:	4a92      	ldr	r2, [pc, #584]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 800102c:	6892      	ldr	r2, [r2, #8]
 800102e:	0912      	lsrs	r2, r2, #4
 8001030:	f002 020f 	and.w	r2, r2, #15
 8001034:	4990      	ldr	r1, [pc, #576]	; (8001278 <HAL_RCC_OscConfig+0x504>)
 8001036:	5c8a      	ldrb	r2, [r1, r2]
 8001038:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800103a:	4a90      	ldr	r2, [pc, #576]	; (800127c <HAL_RCC_OscConfig+0x508>)
 800103c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800103e:	4b90      	ldr	r3, [pc, #576]	; (8001280 <HAL_RCC_OscConfig+0x50c>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff fb9e 	bl	8000784 <HAL_InitTick>
 8001048:	4603      	mov	r3, r0
 800104a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d045      	beq.n	80010de <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001052:	7bfb      	ldrb	r3, [r7, #15]
 8001054:	e1b5      	b.n	80013c2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	699b      	ldr	r3, [r3, #24]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d029      	beq.n	80010b2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800105e:	4b89      	ldr	r3, [pc, #548]	; (8001284 <HAL_RCC_OscConfig+0x510>)
 8001060:	2201      	movs	r2, #1
 8001062:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001064:	f7ff fbda 	bl	800081c <HAL_GetTick>
 8001068:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800106a:	e008      	b.n	800107e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800106c:	f7ff fbd6 	bl	800081c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	693b      	ldr	r3, [r7, #16]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	2b02      	cmp	r3, #2
 8001078:	d901      	bls.n	800107e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800107a:	2303      	movs	r3, #3
 800107c:	e1a1      	b.n	80013c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800107e:	4b7d      	ldr	r3, [pc, #500]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001086:	2b00      	cmp	r3, #0
 8001088:	d0f0      	beq.n	800106c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800108a:	4b7a      	ldr	r3, [pc, #488]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6a1b      	ldr	r3, [r3, #32]
 8001096:	4977      	ldr	r1, [pc, #476]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 8001098:	4313      	orrs	r3, r2
 800109a:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800109c:	4b75      	ldr	r3, [pc, #468]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	69db      	ldr	r3, [r3, #28]
 80010a8:	061b      	lsls	r3, r3, #24
 80010aa:	4972      	ldr	r1, [pc, #456]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 80010ac:	4313      	orrs	r3, r2
 80010ae:	604b      	str	r3, [r1, #4]
 80010b0:	e015      	b.n	80010de <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80010b2:	4b74      	ldr	r3, [pc, #464]	; (8001284 <HAL_RCC_OscConfig+0x510>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010b8:	f7ff fbb0 	bl	800081c <HAL_GetTick>
 80010bc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80010be:	e008      	b.n	80010d2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80010c0:	f7ff fbac 	bl	800081c <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	693b      	ldr	r3, [r7, #16]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d901      	bls.n	80010d2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80010ce:	2303      	movs	r3, #3
 80010d0:	e177      	b.n	80013c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80010d2:	4b68      	ldr	r3, [pc, #416]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f0      	bne.n	80010c0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f003 0308 	and.w	r3, r3, #8
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d030      	beq.n	800114c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d016      	beq.n	8001120 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010f2:	4b65      	ldr	r3, [pc, #404]	; (8001288 <HAL_RCC_OscConfig+0x514>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010f8:	f7ff fb90 	bl	800081c <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001100:	f7ff fb8c 	bl	800081c <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b02      	cmp	r3, #2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e157      	b.n	80013c2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001112:	4b58      	ldr	r3, [pc, #352]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 8001114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f0      	beq.n	8001100 <HAL_RCC_OscConfig+0x38c>
 800111e:	e015      	b.n	800114c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001120:	4b59      	ldr	r3, [pc, #356]	; (8001288 <HAL_RCC_OscConfig+0x514>)
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001126:	f7ff fb79 	bl	800081c <HAL_GetTick>
 800112a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800112c:	e008      	b.n	8001140 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800112e:	f7ff fb75 	bl	800081c <HAL_GetTick>
 8001132:	4602      	mov	r2, r0
 8001134:	693b      	ldr	r3, [r7, #16]
 8001136:	1ad3      	subs	r3, r2, r3
 8001138:	2b02      	cmp	r3, #2
 800113a:	d901      	bls.n	8001140 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800113c:	2303      	movs	r3, #3
 800113e:	e140      	b.n	80013c2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001140:	4b4c      	ldr	r3, [pc, #304]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 8001142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001144:	f003 0302 	and.w	r3, r3, #2
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1f0      	bne.n	800112e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	f000 80b5 	beq.w	80012c4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800115a:	2300      	movs	r3, #0
 800115c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800115e:	4b45      	ldr	r3, [pc, #276]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 8001160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d10d      	bne.n	8001186 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800116a:	4b42      	ldr	r3, [pc, #264]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	4a41      	ldr	r2, [pc, #260]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 8001170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001174:	6253      	str	r3, [r2, #36]	; 0x24
 8001176:	4b3f      	ldr	r3, [pc, #252]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 8001178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800117a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001182:	2301      	movs	r3, #1
 8001184:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001186:	4b41      	ldr	r3, [pc, #260]	; (800128c <HAL_RCC_OscConfig+0x518>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800118e:	2b00      	cmp	r3, #0
 8001190:	d118      	bne.n	80011c4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001192:	4b3e      	ldr	r3, [pc, #248]	; (800128c <HAL_RCC_OscConfig+0x518>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a3d      	ldr	r2, [pc, #244]	; (800128c <HAL_RCC_OscConfig+0x518>)
 8001198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800119c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800119e:	f7ff fb3d 	bl	800081c <HAL_GetTick>
 80011a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011a6:	f7ff fb39 	bl	800081c <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b64      	cmp	r3, #100	; 0x64
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e104      	b.n	80013c2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011b8:	4b34      	ldr	r3, [pc, #208]	; (800128c <HAL_RCC_OscConfig+0x518>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d0f0      	beq.n	80011a6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d106      	bne.n	80011da <HAL_RCC_OscConfig+0x466>
 80011cc:	4b29      	ldr	r3, [pc, #164]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 80011ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011d0:	4a28      	ldr	r2, [pc, #160]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 80011d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d6:	6353      	str	r3, [r2, #52]	; 0x34
 80011d8:	e02d      	b.n	8001236 <HAL_RCC_OscConfig+0x4c2>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d10c      	bne.n	80011fc <HAL_RCC_OscConfig+0x488>
 80011e2:	4b24      	ldr	r3, [pc, #144]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 80011e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e6:	4a23      	ldr	r2, [pc, #140]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 80011e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80011ec:	6353      	str	r3, [r2, #52]	; 0x34
 80011ee:	4b21      	ldr	r3, [pc, #132]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 80011f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011f2:	4a20      	ldr	r2, [pc, #128]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 80011f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011f8:	6353      	str	r3, [r2, #52]	; 0x34
 80011fa:	e01c      	b.n	8001236 <HAL_RCC_OscConfig+0x4c2>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	2b05      	cmp	r3, #5
 8001202:	d10c      	bne.n	800121e <HAL_RCC_OscConfig+0x4aa>
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 8001206:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001208:	4a1a      	ldr	r2, [pc, #104]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 800120a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800120e:	6353      	str	r3, [r2, #52]	; 0x34
 8001210:	4b18      	ldr	r3, [pc, #96]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 8001212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001214:	4a17      	ldr	r2, [pc, #92]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 8001216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800121a:	6353      	str	r3, [r2, #52]	; 0x34
 800121c:	e00b      	b.n	8001236 <HAL_RCC_OscConfig+0x4c2>
 800121e:	4b15      	ldr	r3, [pc, #84]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 8001220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001222:	4a14      	ldr	r2, [pc, #80]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 8001224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001228:	6353      	str	r3, [r2, #52]	; 0x34
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 800122c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800122e:	4a11      	ldr	r2, [pc, #68]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 8001230:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001234:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	689b      	ldr	r3, [r3, #8]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d015      	beq.n	800126a <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123e:	f7ff faed 	bl	800081c <HAL_GetTick>
 8001242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001244:	e00a      	b.n	800125c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001246:	f7ff fae9 	bl	800081c <HAL_GetTick>
 800124a:	4602      	mov	r2, r0
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	1ad3      	subs	r3, r2, r3
 8001250:	f241 3288 	movw	r2, #5000	; 0x1388
 8001254:	4293      	cmp	r3, r2
 8001256:	d901      	bls.n	800125c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001258:	2303      	movs	r3, #3
 800125a:	e0b2      	b.n	80013c2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <HAL_RCC_OscConfig+0x500>)
 800125e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001260:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001264:	2b00      	cmp	r3, #0
 8001266:	d0ee      	beq.n	8001246 <HAL_RCC_OscConfig+0x4d2>
 8001268:	e023      	b.n	80012b2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126a:	f7ff fad7 	bl	800081c <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001270:	e019      	b.n	80012a6 <HAL_RCC_OscConfig+0x532>
 8001272:	bf00      	nop
 8001274:	40023800 	.word	0x40023800
 8001278:	080029fc 	.word	0x080029fc
 800127c:	20000000 	.word	0x20000000
 8001280:	20000004 	.word	0x20000004
 8001284:	42470020 	.word	0x42470020
 8001288:	42470680 	.word	0x42470680
 800128c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001290:	f7ff fac4 	bl	800081c <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	f241 3288 	movw	r2, #5000	; 0x1388
 800129e:	4293      	cmp	r3, r2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e08d      	b.n	80013c2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80012a6:	4b49      	ldr	r3, [pc, #292]	; (80013cc <HAL_RCC_OscConfig+0x658>)
 80012a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d1ee      	bne.n	8001290 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80012b2:	7ffb      	ldrb	r3, [r7, #31]
 80012b4:	2b01      	cmp	r3, #1
 80012b6:	d105      	bne.n	80012c4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012b8:	4b44      	ldr	r3, [pc, #272]	; (80013cc <HAL_RCC_OscConfig+0x658>)
 80012ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012bc:	4a43      	ldr	r2, [pc, #268]	; (80013cc <HAL_RCC_OscConfig+0x658>)
 80012be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012c2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d079      	beq.n	80013c0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012cc:	69bb      	ldr	r3, [r7, #24]
 80012ce:	2b0c      	cmp	r3, #12
 80012d0:	d056      	beq.n	8001380 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	2b02      	cmp	r3, #2
 80012d8:	d13b      	bne.n	8001352 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012da:	4b3d      	ldr	r3, [pc, #244]	; (80013d0 <HAL_RCC_OscConfig+0x65c>)
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012e0:	f7ff fa9c 	bl	800081c <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012e8:	f7ff fa98 	bl	800081c <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b02      	cmp	r3, #2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e063      	b.n	80013c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80012fa:	4b34      	ldr	r3, [pc, #208]	; (80013cc <HAL_RCC_OscConfig+0x658>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d1f0      	bne.n	80012e8 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001306:	4b31      	ldr	r3, [pc, #196]	; (80013cc <HAL_RCC_OscConfig+0x658>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001316:	4319      	orrs	r1, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	430b      	orrs	r3, r1
 800131e:	492b      	ldr	r1, [pc, #172]	; (80013cc <HAL_RCC_OscConfig+0x658>)
 8001320:	4313      	orrs	r3, r2
 8001322:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001324:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <HAL_RCC_OscConfig+0x65c>)
 8001326:	2201      	movs	r2, #1
 8001328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132a:	f7ff fa77 	bl	800081c <HAL_GetTick>
 800132e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001330:	e008      	b.n	8001344 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001332:	f7ff fa73 	bl	800081c <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d901      	bls.n	8001344 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	e03e      	b.n	80013c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001344:	4b21      	ldr	r3, [pc, #132]	; (80013cc <HAL_RCC_OscConfig+0x658>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0f0      	beq.n	8001332 <HAL_RCC_OscConfig+0x5be>
 8001350:	e036      	b.n	80013c0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <HAL_RCC_OscConfig+0x65c>)
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001358:	f7ff fa60 	bl	800081c <HAL_GetTick>
 800135c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001360:	f7ff fa5c 	bl	800081c <HAL_GetTick>
 8001364:	4602      	mov	r2, r0
 8001366:	693b      	ldr	r3, [r7, #16]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b02      	cmp	r3, #2
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e027      	b.n	80013c2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001372:	4b16      	ldr	r3, [pc, #88]	; (80013cc <HAL_RCC_OscConfig+0x658>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x5ec>
 800137e:	e01f      	b.n	80013c0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	2b01      	cmp	r3, #1
 8001386:	d101      	bne.n	800138c <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e01a      	b.n	80013c2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <HAL_RCC_OscConfig+0x658>)
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139c:	429a      	cmp	r2, r3
 800139e:	d10d      	bne.n	80013bc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d106      	bne.n	80013bc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80013b8:	429a      	cmp	r2, r3
 80013ba:	d001      	beq.n	80013c0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3720      	adds	r7, #32
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	40023800 	.word	0x40023800
 80013d0:	42470060 	.word	0x42470060

080013d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d101      	bne.n	80013e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	e11a      	b.n	800161e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013e8:	4b8f      	ldr	r3, [pc, #572]	; (8001628 <HAL_RCC_ClockConfig+0x254>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	d919      	bls.n	800142a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d105      	bne.n	8001408 <HAL_RCC_ClockConfig+0x34>
 80013fc:	4b8a      	ldr	r3, [pc, #552]	; (8001628 <HAL_RCC_ClockConfig+0x254>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a89      	ldr	r2, [pc, #548]	; (8001628 <HAL_RCC_ClockConfig+0x254>)
 8001402:	f043 0304 	orr.w	r3, r3, #4
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b87      	ldr	r3, [pc, #540]	; (8001628 <HAL_RCC_ClockConfig+0x254>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f023 0201 	bic.w	r2, r3, #1
 8001410:	4985      	ldr	r1, [pc, #532]	; (8001628 <HAL_RCC_ClockConfig+0x254>)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	4313      	orrs	r3, r2
 8001416:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001418:	4b83      	ldr	r3, [pc, #524]	; (8001628 <HAL_RCC_ClockConfig+0x254>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	683a      	ldr	r2, [r7, #0]
 8001422:	429a      	cmp	r2, r3
 8001424:	d001      	beq.n	800142a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e0f9      	b.n	800161e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0302 	and.w	r3, r3, #2
 8001432:	2b00      	cmp	r3, #0
 8001434:	d008      	beq.n	8001448 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001436:	4b7d      	ldr	r3, [pc, #500]	; (800162c <HAL_RCC_ClockConfig+0x258>)
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	497a      	ldr	r1, [pc, #488]	; (800162c <HAL_RCC_ClockConfig+0x258>)
 8001444:	4313      	orrs	r3, r2
 8001446:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0301 	and.w	r3, r3, #1
 8001450:	2b00      	cmp	r3, #0
 8001452:	f000 808e 	beq.w	8001572 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b02      	cmp	r3, #2
 800145c:	d107      	bne.n	800146e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800145e:	4b73      	ldr	r3, [pc, #460]	; (800162c <HAL_RCC_ClockConfig+0x258>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d121      	bne.n	80014ae <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e0d7      	b.n	800161e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	2b03      	cmp	r3, #3
 8001474:	d107      	bne.n	8001486 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001476:	4b6d      	ldr	r3, [pc, #436]	; (800162c <HAL_RCC_ClockConfig+0x258>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d115      	bne.n	80014ae <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e0cb      	b.n	800161e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d107      	bne.n	800149e <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800148e:	4b67      	ldr	r3, [pc, #412]	; (800162c <HAL_RCC_ClockConfig+0x258>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d109      	bne.n	80014ae <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	e0bf      	b.n	800161e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800149e:	4b63      	ldr	r3, [pc, #396]	; (800162c <HAL_RCC_ClockConfig+0x258>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d101      	bne.n	80014ae <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80014aa:	2301      	movs	r3, #1
 80014ac:	e0b7      	b.n	800161e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014ae:	4b5f      	ldr	r3, [pc, #380]	; (800162c <HAL_RCC_ClockConfig+0x258>)
 80014b0:	689b      	ldr	r3, [r3, #8]
 80014b2:	f023 0203 	bic.w	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	495c      	ldr	r1, [pc, #368]	; (800162c <HAL_RCC_ClockConfig+0x258>)
 80014bc:	4313      	orrs	r3, r2
 80014be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014c0:	f7ff f9ac 	bl	800081c <HAL_GetTick>
 80014c4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d112      	bne.n	80014f4 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014ce:	e00a      	b.n	80014e6 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014d0:	f7ff f9a4 	bl	800081c <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	f241 3288 	movw	r2, #5000	; 0x1388
 80014de:	4293      	cmp	r3, r2
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e09b      	b.n	800161e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80014e6:	4b51      	ldr	r3, [pc, #324]	; (800162c <HAL_RCC_ClockConfig+0x258>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b08      	cmp	r3, #8
 80014f0:	d1ee      	bne.n	80014d0 <HAL_RCC_ClockConfig+0xfc>
 80014f2:	e03e      	b.n	8001572 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	2b03      	cmp	r3, #3
 80014fa:	d112      	bne.n	8001522 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80014fc:	e00a      	b.n	8001514 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014fe:	f7ff f98d 	bl	800081c <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	f241 3288 	movw	r2, #5000	; 0x1388
 800150c:	4293      	cmp	r3, r2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e084      	b.n	800161e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001514:	4b45      	ldr	r3, [pc, #276]	; (800162c <HAL_RCC_ClockConfig+0x258>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f003 030c 	and.w	r3, r3, #12
 800151c:	2b0c      	cmp	r3, #12
 800151e:	d1ee      	bne.n	80014fe <HAL_RCC_ClockConfig+0x12a>
 8001520:	e027      	b.n	8001572 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d11d      	bne.n	8001566 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800152a:	e00a      	b.n	8001542 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800152c:	f7ff f976 	bl	800081c <HAL_GetTick>
 8001530:	4602      	mov	r2, r0
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	f241 3288 	movw	r2, #5000	; 0x1388
 800153a:	4293      	cmp	r3, r2
 800153c:	d901      	bls.n	8001542 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800153e:	2303      	movs	r3, #3
 8001540:	e06d      	b.n	800161e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001542:	4b3a      	ldr	r3, [pc, #232]	; (800162c <HAL_RCC_ClockConfig+0x258>)
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 030c 	and.w	r3, r3, #12
 800154a:	2b04      	cmp	r3, #4
 800154c:	d1ee      	bne.n	800152c <HAL_RCC_ClockConfig+0x158>
 800154e:	e010      	b.n	8001572 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001550:	f7ff f964 	bl	800081c <HAL_GetTick>
 8001554:	4602      	mov	r2, r0
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	f241 3288 	movw	r2, #5000	; 0x1388
 800155e:	4293      	cmp	r3, r2
 8001560:	d901      	bls.n	8001566 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e05b      	b.n	800161e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001566:	4b31      	ldr	r3, [pc, #196]	; (800162c <HAL_RCC_ClockConfig+0x258>)
 8001568:	689b      	ldr	r3, [r3, #8]
 800156a:	f003 030c 	and.w	r3, r3, #12
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1ee      	bne.n	8001550 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001572:	4b2d      	ldr	r3, [pc, #180]	; (8001628 <HAL_RCC_ClockConfig+0x254>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f003 0301 	and.w	r3, r3, #1
 800157a:	683a      	ldr	r2, [r7, #0]
 800157c:	429a      	cmp	r2, r3
 800157e:	d219      	bcs.n	80015b4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d105      	bne.n	8001592 <HAL_RCC_ClockConfig+0x1be>
 8001586:	4b28      	ldr	r3, [pc, #160]	; (8001628 <HAL_RCC_ClockConfig+0x254>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a27      	ldr	r2, [pc, #156]	; (8001628 <HAL_RCC_ClockConfig+0x254>)
 800158c:	f043 0304 	orr.w	r3, r3, #4
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	4b25      	ldr	r3, [pc, #148]	; (8001628 <HAL_RCC_ClockConfig+0x254>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f023 0201 	bic.w	r2, r3, #1
 800159a:	4923      	ldr	r1, [pc, #140]	; (8001628 <HAL_RCC_ClockConfig+0x254>)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	4313      	orrs	r3, r2
 80015a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	4b21      	ldr	r3, [pc, #132]	; (8001628 <HAL_RCC_ClockConfig+0x254>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e034      	b.n	800161e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d008      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c0:	4b1a      	ldr	r3, [pc, #104]	; (800162c <HAL_RCC_ClockConfig+0x258>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4917      	ldr	r1, [pc, #92]	; (800162c <HAL_RCC_ClockConfig+0x258>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d009      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <HAL_RCC_ClockConfig+0x258>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	490f      	ldr	r1, [pc, #60]	; (800162c <HAL_RCC_ClockConfig+0x258>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015f2:	f000 f823 	bl	800163c <HAL_RCC_GetSysClockFreq>
 80015f6:	4601      	mov	r1, r0
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <HAL_RCC_ClockConfig+0x258>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	091b      	lsrs	r3, r3, #4
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	4a0b      	ldr	r2, [pc, #44]	; (8001630 <HAL_RCC_ClockConfig+0x25c>)
 8001604:	5cd3      	ldrb	r3, [r2, r3]
 8001606:	fa21 f303 	lsr.w	r3, r1, r3
 800160a:	4a0a      	ldr	r2, [pc, #40]	; (8001634 <HAL_RCC_ClockConfig+0x260>)
 800160c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800160e:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <HAL_RCC_ClockConfig+0x264>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff f8b6 	bl	8000784 <HAL_InitTick>
 8001618:	4603      	mov	r3, r0
 800161a:	72fb      	strb	r3, [r7, #11]

  return status;
 800161c:	7afb      	ldrb	r3, [r7, #11]
}
 800161e:	4618      	mov	r0, r3
 8001620:	3710      	adds	r7, #16
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023c00 	.word	0x40023c00
 800162c:	40023800 	.word	0x40023800
 8001630:	080029fc 	.word	0x080029fc
 8001634:	20000000 	.word	0x20000000
 8001638:	20000004 	.word	0x20000004

0800163c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001642:	4b26      	ldr	r3, [pc, #152]	; (80016dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b08      	cmp	r3, #8
 8001650:	d006      	beq.n	8001660 <HAL_RCC_GetSysClockFreq+0x24>
 8001652:	2b0c      	cmp	r3, #12
 8001654:	d007      	beq.n	8001666 <HAL_RCC_GetSysClockFreq+0x2a>
 8001656:	2b04      	cmp	r3, #4
 8001658:	d12c      	bne.n	80016b4 <HAL_RCC_GetSysClockFreq+0x78>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800165a:	4b21      	ldr	r3, [pc, #132]	; (80016e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800165c:	613b      	str	r3, [r7, #16]
      break;
 800165e:	e037      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001660:	4b20      	ldr	r3, [pc, #128]	; (80016e4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001662:	613b      	str	r3, [r7, #16]
      break;
 8001664:	e034      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	0c9b      	lsrs	r3, r3, #18
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	4a1e      	ldr	r2, [pc, #120]	; (80016e8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001670:	5cd3      	ldrb	r3, [r2, r3]
 8001672:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	0d9b      	lsrs	r3, r3, #22
 8001678:	f003 0303 	and.w	r3, r3, #3
 800167c:	3301      	adds	r3, #1
 800167e:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001680:	4b16      	ldr	r3, [pc, #88]	; (80016dc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <HAL_RCC_GetSysClockFreq+0x62>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	4a15      	ldr	r2, [pc, #84]	; (80016e4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8001690:	fb02 f203 	mul.w	r2, r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	fbb2 f3f3 	udiv	r3, r2, r3
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	e007      	b.n	80016ae <HAL_RCC_GetSysClockFreq+0x72>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE * pllm) / plld;
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	4a0f      	ldr	r2, [pc, #60]	; (80016e0 <HAL_RCC_GetSysClockFreq+0xa4>)
 80016a2:	fb02 f203 	mul.w	r2, r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ac:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	613b      	str	r3, [r7, #16]
      break;
 80016b2:	e00d      	b.n	80016d0 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_RCC_GetSysClockFreq+0xa0>)
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	0b5b      	lsrs	r3, r3, #13
 80016ba:	f003 0307 	and.w	r3, r3, #7
 80016be:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	3301      	adds	r3, #1
 80016c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	613b      	str	r3, [r7, #16]
      break;
 80016ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016d0:	693b      	ldr	r3, [r7, #16]
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	371c      	adds	r7, #28
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bc80      	pop	{r7}
 80016da:	4770      	bx	lr
 80016dc:	40023800 	.word	0x40023800
 80016e0:	00f42400 	.word	0x00f42400
 80016e4:	007a1200 	.word	0x007a1200
 80016e8:	080029f0 	.word	0x080029f0

080016ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016f0:	4b02      	ldr	r3, [pc, #8]	; (80016fc <HAL_RCC_GetHCLKFreq+0x10>)
 80016f2:	681b      	ldr	r3, [r3, #0]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr
 80016fc:	20000000 	.word	0x20000000

08001700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001704:	f7ff fff2 	bl	80016ec <HAL_RCC_GetHCLKFreq>
 8001708:	4601      	mov	r1, r0
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	0a1b      	lsrs	r3, r3, #8
 8001710:	f003 0307 	and.w	r3, r3, #7
 8001714:	4a03      	ldr	r2, [pc, #12]	; (8001724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001716:	5cd3      	ldrb	r3, [r2, r3]
 8001718:	fa21 f303 	lsr.w	r3, r1, r3
}
 800171c:	4618      	mov	r0, r3
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40023800 	.word	0x40023800
 8001724:	08002a0c 	.word	0x08002a0c

08001728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800172c:	f7ff ffde 	bl	80016ec <HAL_RCC_GetHCLKFreq>
 8001730:	4601      	mov	r1, r0
 8001732:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	0adb      	lsrs	r3, r3, #11
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	4a03      	ldr	r2, [pc, #12]	; (800174c <HAL_RCC_GetPCLK2Freq+0x24>)
 800173e:	5cd3      	ldrb	r3, [r2, r3]
 8001740:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001744:	4618      	mov	r0, r3
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40023800 	.word	0x40023800
 800174c:	08002a0c 	.word	0x08002a0c

08001750 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001750:	b480      	push	{r7}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001758:	2300      	movs	r3, #0
 800175a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800175c:	4b29      	ldr	r3, [pc, #164]	; (8001804 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d12c      	bne.n	80017c2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001768:	4b26      	ldr	r3, [pc, #152]	; (8001804 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001774:	4b24      	ldr	r3, [pc, #144]	; (8001808 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800177c:	617b      	str	r3, [r7, #20]
 800177e:	e016      	b.n	80017ae <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001780:	4b20      	ldr	r3, [pc, #128]	; (8001804 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	4a1f      	ldr	r2, [pc, #124]	; (8001804 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800178a:	6253      	str	r3, [r2, #36]	; 0x24
 800178c:	4b1d      	ldr	r3, [pc, #116]	; (8001804 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800178e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001798:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80017a0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	4a17      	ldr	r2, [pc, #92]	; (8001804 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80017a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017ac:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80017b4:	d105      	bne.n	80017c2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80017bc:	d101      	bne.n	80017c2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80017be:	2301      	movs	r3, #1
 80017c0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80017c8:	4b10      	ldr	r3, [pc, #64]	; (800180c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0f      	ldr	r2, [pc, #60]	; (800180c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017ce:	f043 0304 	orr.w	r3, r3, #4
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f023 0201 	bic.w	r2, r3, #1
 80017dc:	490b      	ldr	r1, [pc, #44]	; (800180c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	4313      	orrs	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80017e4:	4b09      	ldr	r3, [pc, #36]	; (800180c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d001      	beq.n	80017f6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	371c      	adds	r7, #28
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	40007000 	.word	0x40007000
 800180c:	40023c00 	.word	0x40023c00

08001810 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e03f      	b.n	80018a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d106      	bne.n	800183c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7fe ff16 	bl	8000668 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2224      	movs	r2, #36	; 0x24
 8001840:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001852:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f9b1 	bl	8001bbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	691a      	ldr	r2, [r3, #16]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001868:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	695a      	ldr	r2, [r3, #20]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001878:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001888:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2220      	movs	r2, #32
 8001894:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2220      	movs	r2, #32
 800189c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b088      	sub	sp, #32
 80018ae:	af02      	add	r7, sp, #8
 80018b0:	60f8      	str	r0, [r7, #12]
 80018b2:	60b9      	str	r1, [r7, #8]
 80018b4:	603b      	str	r3, [r7, #0]
 80018b6:	4613      	mov	r3, r2
 80018b8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	2b20      	cmp	r3, #32
 80018c8:	f040 8083 	bne.w	80019d2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d002      	beq.n	80018d8 <HAL_UART_Transmit+0x2e>
 80018d2:	88fb      	ldrh	r3, [r7, #6]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d101      	bne.n	80018dc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e07b      	b.n	80019d4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d101      	bne.n	80018ea <HAL_UART_Transmit+0x40>
 80018e6:	2302      	movs	r3, #2
 80018e8:	e074      	b.n	80019d4 <HAL_UART_Transmit+0x12a>
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	2221      	movs	r2, #33	; 0x21
 80018fc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001900:	f7fe ff8c 	bl	800081c <HAL_GetTick>
 8001904:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	88fa      	ldrh	r2, [r7, #6]
 800190a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	88fa      	ldrh	r2, [r7, #6]
 8001910:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001912:	e042      	b.n	800199a <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001918:	b29b      	uxth	r3, r3
 800191a:	3b01      	subs	r3, #1
 800191c:	b29a      	uxth	r2, r3
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800192a:	d122      	bne.n	8001972 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	2200      	movs	r2, #0
 8001934:	2180      	movs	r1, #128	; 0x80
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 f8f6 	bl	8001b28 <UART_WaitOnFlagUntilTimeout>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d001      	beq.n	8001946 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e046      	b.n	80019d4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	881b      	ldrh	r3, [r3, #0]
 800194e:	461a      	mov	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001958:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	691b      	ldr	r3, [r3, #16]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d103      	bne.n	800196a <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	3302      	adds	r3, #2
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	e017      	b.n	800199a <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	3301      	adds	r3, #1
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	e013      	b.n	800199a <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	2200      	movs	r2, #0
 800197a:	2180      	movs	r1, #128	; 0x80
 800197c:	68f8      	ldr	r0, [r7, #12]
 800197e:	f000 f8d3 	bl	8001b28 <UART_WaitOnFlagUntilTimeout>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001988:	2303      	movs	r3, #3
 800198a:	e023      	b.n	80019d4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	1c5a      	adds	r2, r3, #1
 8001990:	60ba      	str	r2, [r7, #8]
 8001992:	781a      	ldrb	r2, [r3, #0]
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800199e:	b29b      	uxth	r3, r3
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1b7      	bne.n	8001914 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	2200      	movs	r2, #0
 80019ac:	2140      	movs	r1, #64	; 0x40
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 f8ba 	bl	8001b28 <UART_WaitOnFlagUntilTimeout>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e00a      	b.n	80019d4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2220      	movs	r2, #32
 80019c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e000      	b.n	80019d4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80019d2:	2302      	movs	r3, #2
  }
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3718      	adds	r7, #24
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af02      	add	r7, sp, #8
 80019e2:	60f8      	str	r0, [r7, #12]
 80019e4:	60b9      	str	r1, [r7, #8]
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	4613      	mov	r3, r2
 80019ea:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80019ec:	2300      	movs	r3, #0
 80019ee:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b20      	cmp	r3, #32
 80019fa:	f040 8090 	bne.w	8001b1e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d002      	beq.n	8001a0a <HAL_UART_Receive+0x2e>
 8001a04:	88fb      	ldrh	r3, [r7, #6]
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d101      	bne.n	8001a0e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e088      	b.n	8001b20 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d101      	bne.n	8001a1c <HAL_UART_Receive+0x40>
 8001a18:	2302      	movs	r3, #2
 8001a1a:	e081      	b.n	8001b20 <HAL_UART_Receive+0x144>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	2200      	movs	r2, #0
 8001a28:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2222      	movs	r2, #34	; 0x22
 8001a2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001a32:	f7fe fef3 	bl	800081c <HAL_GetTick>
 8001a36:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	88fa      	ldrh	r2, [r7, #6]
 8001a3c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	88fa      	ldrh	r2, [r7, #6]
 8001a42:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001a44:	e05c      	b.n	8001b00 <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	b29a      	uxth	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	689b      	ldr	r3, [r3, #8]
 8001a58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a5c:	d12b      	bne.n	8001ab6 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	9300      	str	r3, [sp, #0]
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	2200      	movs	r2, #0
 8001a66:	2120      	movs	r1, #32
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f000 f85d 	bl	8001b28 <UART_WaitOnFlagUntilTimeout>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e053      	b.n	8001b20 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	691b      	ldr	r3, [r3, #16]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d10c      	bne.n	8001a9e <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	3302      	adds	r3, #2
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	e030      	b.n	8001b00 <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	e024      	b.n	8001b00 <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ab6:	683b      	ldr	r3, [r7, #0]
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	2200      	movs	r2, #0
 8001abe:	2120      	movs	r1, #32
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 f831 	bl	8001b28 <UART_WaitOnFlagUntilTimeout>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8001acc:	2303      	movs	r3, #3
 8001ace:	e027      	b.n	8001b20 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d108      	bne.n	8001aea <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6859      	ldr	r1, [r3, #4]
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	1c5a      	adds	r2, r3, #1
 8001ae2:	60ba      	str	r2, [r7, #8]
 8001ae4:	b2ca      	uxtb	r2, r1
 8001ae6:	701a      	strb	r2, [r3, #0]
 8001ae8:	e00a      	b.n	8001b00 <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	1c59      	adds	r1, r3, #1
 8001af6:	60b9      	str	r1, [r7, #8]
 8001af8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001afc:	b2d2      	uxtb	r2, r2
 8001afe:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b04:	b29b      	uxth	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d19d      	bne.n	8001a46 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2220      	movs	r2, #32
 8001b0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	e000      	b.n	8001b20 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8001b1e:	2302      	movs	r3, #2
  }
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	603b      	str	r3, [r7, #0]
 8001b34:	4613      	mov	r3, r2
 8001b36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b38:	e02c      	b.n	8001b94 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b40:	d028      	beq.n	8001b94 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d007      	beq.n	8001b58 <UART_WaitOnFlagUntilTimeout+0x30>
 8001b48:	f7fe fe68 	bl	800081c <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d21d      	bcs.n	8001b94 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68da      	ldr	r2, [r3, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001b66:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	695a      	ldr	r2, [r3, #20]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0201 	bic.w	r2, r2, #1
 8001b76:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2220      	movs	r2, #32
 8001b7c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2220      	movs	r2, #32
 8001b84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e00f      	b.n	8001bb4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	68ba      	ldr	r2, [r7, #8]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	bf0c      	ite	eq
 8001ba4:	2301      	moveq	r3, #1
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	461a      	mov	r2, r3
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d0c3      	beq.n	8001b3a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	431a      	orrs	r2, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	69db      	ldr	r3, [r3, #28]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001bfc:	f023 030c 	bic.w	r3, r3, #12
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	68f9      	ldr	r1, [r7, #12]
 8001c06:	430b      	orrs	r3, r1
 8001c08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	699a      	ldr	r2, [r3, #24]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	69db      	ldr	r3, [r3, #28]
 8001c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c28:	f040 80a5 	bne.w	8001d76 <UART_SetConfig+0x1ba>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	4aa4      	ldr	r2, [pc, #656]	; (8001ec4 <UART_SetConfig+0x308>)
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d14f      	bne.n	8001cd6 <UART_SetConfig+0x11a>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001c36:	f7ff fd77 	bl	8001728 <HAL_RCC_GetPCLK2Freq>
 8001c3a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c3c:	68ba      	ldr	r2, [r7, #8]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	4413      	add	r3, r2
 8001c44:	009a      	lsls	r2, r3, #2
 8001c46:	441a      	add	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c52:	4a9d      	ldr	r2, [pc, #628]	; (8001ec8 <UART_SetConfig+0x30c>)
 8001c54:	fba2 2303 	umull	r2, r3, r2, r3
 8001c58:	095b      	lsrs	r3, r3, #5
 8001c5a:	0119      	lsls	r1, r3, #4
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	4613      	mov	r3, r2
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	4413      	add	r3, r2
 8001c64:	009a      	lsls	r2, r3, #2
 8001c66:	441a      	add	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001c72:	4b95      	ldr	r3, [pc, #596]	; (8001ec8 <UART_SetConfig+0x30c>)
 8001c74:	fba3 0302 	umull	r0, r3, r3, r2
 8001c78:	095b      	lsrs	r3, r3, #5
 8001c7a:	2064      	movs	r0, #100	; 0x64
 8001c7c:	fb00 f303 	mul.w	r3, r0, r3
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	3332      	adds	r3, #50	; 0x32
 8001c86:	4a90      	ldr	r2, [pc, #576]	; (8001ec8 <UART_SetConfig+0x30c>)
 8001c88:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8c:	095b      	lsrs	r3, r3, #5
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001c94:	4419      	add	r1, r3
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	009a      	lsls	r2, r3, #2
 8001ca0:	441a      	add	r2, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001cac:	4b86      	ldr	r3, [pc, #536]	; (8001ec8 <UART_SetConfig+0x30c>)
 8001cae:	fba3 0302 	umull	r0, r3, r3, r2
 8001cb2:	095b      	lsrs	r3, r3, #5
 8001cb4:	2064      	movs	r0, #100	; 0x64
 8001cb6:	fb00 f303 	mul.w	r3, r0, r3
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	00db      	lsls	r3, r3, #3
 8001cbe:	3332      	adds	r3, #50	; 0x32
 8001cc0:	4a81      	ldr	r2, [pc, #516]	; (8001ec8 <UART_SetConfig+0x30c>)
 8001cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001cc6:	095b      	lsrs	r3, r3, #5
 8001cc8:	f003 0207 	and.w	r2, r3, #7
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	440a      	add	r2, r1
 8001cd2:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8001cd4:	e0f1      	b.n	8001eba <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001cd6:	f7ff fd13 	bl	8001700 <HAL_RCC_GetPCLK1Freq>
 8001cda:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001cdc:	68ba      	ldr	r2, [r7, #8]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	009a      	lsls	r2, r3, #2
 8001ce6:	441a      	add	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf2:	4a75      	ldr	r2, [pc, #468]	; (8001ec8 <UART_SetConfig+0x30c>)
 8001cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8001cf8:	095b      	lsrs	r3, r3, #5
 8001cfa:	0119      	lsls	r1, r3, #4
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	4613      	mov	r3, r2
 8001d00:	009b      	lsls	r3, r3, #2
 8001d02:	4413      	add	r3, r2
 8001d04:	009a      	lsls	r2, r3, #2
 8001d06:	441a      	add	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d12:	4b6d      	ldr	r3, [pc, #436]	; (8001ec8 <UART_SetConfig+0x30c>)
 8001d14:	fba3 0302 	umull	r0, r3, r3, r2
 8001d18:	095b      	lsrs	r3, r3, #5
 8001d1a:	2064      	movs	r0, #100	; 0x64
 8001d1c:	fb00 f303 	mul.w	r3, r0, r3
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	00db      	lsls	r3, r3, #3
 8001d24:	3332      	adds	r3, #50	; 0x32
 8001d26:	4a68      	ldr	r2, [pc, #416]	; (8001ec8 <UART_SetConfig+0x30c>)
 8001d28:	fba2 2303 	umull	r2, r3, r2, r3
 8001d2c:	095b      	lsrs	r3, r3, #5
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d34:	4419      	add	r1, r3
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	4613      	mov	r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4413      	add	r3, r2
 8001d3e:	009a      	lsls	r2, r3, #2
 8001d40:	441a      	add	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d4c:	4b5e      	ldr	r3, [pc, #376]	; (8001ec8 <UART_SetConfig+0x30c>)
 8001d4e:	fba3 0302 	umull	r0, r3, r3, r2
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	2064      	movs	r0, #100	; 0x64
 8001d56:	fb00 f303 	mul.w	r3, r0, r3
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	3332      	adds	r3, #50	; 0x32
 8001d60:	4a59      	ldr	r2, [pc, #356]	; (8001ec8 <UART_SetConfig+0x30c>)
 8001d62:	fba2 2303 	umull	r2, r3, r2, r3
 8001d66:	095b      	lsrs	r3, r3, #5
 8001d68:	f003 0207 	and.w	r2, r3, #7
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	440a      	add	r2, r1
 8001d72:	609a      	str	r2, [r3, #8]
}
 8001d74:	e0a1      	b.n	8001eba <UART_SetConfig+0x2fe>
    if((huart->Instance == USART1))
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a52      	ldr	r2, [pc, #328]	; (8001ec4 <UART_SetConfig+0x308>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d14e      	bne.n	8001e1e <UART_SetConfig+0x262>
      pclk = HAL_RCC_GetPCLK2Freq();
 8001d80:	f7ff fcd2 	bl	8001728 <HAL_RCC_GetPCLK2Freq>
 8001d84:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009a      	lsls	r2, r3, #2
 8001d90:	441a      	add	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d9c:	4a4a      	ldr	r2, [pc, #296]	; (8001ec8 <UART_SetConfig+0x30c>)
 8001d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001da2:	095b      	lsrs	r3, r3, #5
 8001da4:	0119      	lsls	r1, r3, #4
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	009a      	lsls	r2, r3, #2
 8001db0:	441a      	add	r2, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dbc:	4b42      	ldr	r3, [pc, #264]	; (8001ec8 <UART_SetConfig+0x30c>)
 8001dbe:	fba3 0302 	umull	r0, r3, r3, r2
 8001dc2:	095b      	lsrs	r3, r3, #5
 8001dc4:	2064      	movs	r0, #100	; 0x64
 8001dc6:	fb00 f303 	mul.w	r3, r0, r3
 8001dca:	1ad3      	subs	r3, r2, r3
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	3332      	adds	r3, #50	; 0x32
 8001dd0:	4a3d      	ldr	r2, [pc, #244]	; (8001ec8 <UART_SetConfig+0x30c>)
 8001dd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001dd6:	095b      	lsrs	r3, r3, #5
 8001dd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ddc:	4419      	add	r1, r3
 8001dde:	68ba      	ldr	r2, [r7, #8]
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	009a      	lsls	r2, r3, #2
 8001de8:	441a      	add	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001df4:	4b34      	ldr	r3, [pc, #208]	; (8001ec8 <UART_SetConfig+0x30c>)
 8001df6:	fba3 0302 	umull	r0, r3, r3, r2
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	2064      	movs	r0, #100	; 0x64
 8001dfe:	fb00 f303 	mul.w	r3, r0, r3
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	011b      	lsls	r3, r3, #4
 8001e06:	3332      	adds	r3, #50	; 0x32
 8001e08:	4a2f      	ldr	r2, [pc, #188]	; (8001ec8 <UART_SetConfig+0x30c>)
 8001e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	f003 020f 	and.w	r2, r3, #15
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	440a      	add	r2, r1
 8001e1a:	609a      	str	r2, [r3, #8]
}
 8001e1c:	e04d      	b.n	8001eba <UART_SetConfig+0x2fe>
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e1e:	f7ff fc6f 	bl	8001700 <HAL_RCC_GetPCLK1Freq>
 8001e22:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009a      	lsls	r2, r3, #2
 8001e2e:	441a      	add	r2, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e3a:	4a23      	ldr	r2, [pc, #140]	; (8001ec8 <UART_SetConfig+0x30c>)
 8001e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e40:	095b      	lsrs	r3, r3, #5
 8001e42:	0119      	lsls	r1, r3, #4
 8001e44:	68ba      	ldr	r2, [r7, #8]
 8001e46:	4613      	mov	r3, r2
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	4413      	add	r3, r2
 8001e4c:	009a      	lsls	r2, r3, #2
 8001e4e:	441a      	add	r2, r3
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ec8 <UART_SetConfig+0x30c>)
 8001e5c:	fba3 0302 	umull	r0, r3, r3, r2
 8001e60:	095b      	lsrs	r3, r3, #5
 8001e62:	2064      	movs	r0, #100	; 0x64
 8001e64:	fb00 f303 	mul.w	r3, r0, r3
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	011b      	lsls	r3, r3, #4
 8001e6c:	3332      	adds	r3, #50	; 0x32
 8001e6e:	4a16      	ldr	r2, [pc, #88]	; (8001ec8 <UART_SetConfig+0x30c>)
 8001e70:	fba2 2303 	umull	r2, r3, r2, r3
 8001e74:	095b      	lsrs	r3, r3, #5
 8001e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e7a:	4419      	add	r1, r3
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	4413      	add	r3, r2
 8001e84:	009a      	lsls	r2, r3, #2
 8001e86:	441a      	add	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8001e92:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <UART_SetConfig+0x30c>)
 8001e94:	fba3 0302 	umull	r0, r3, r3, r2
 8001e98:	095b      	lsrs	r3, r3, #5
 8001e9a:	2064      	movs	r0, #100	; 0x64
 8001e9c:	fb00 f303 	mul.w	r3, r0, r3
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	011b      	lsls	r3, r3, #4
 8001ea4:	3332      	adds	r3, #50	; 0x32
 8001ea6:	4a08      	ldr	r2, [pc, #32]	; (8001ec8 <UART_SetConfig+0x30c>)
 8001ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8001eac:	095b      	lsrs	r3, r3, #5
 8001eae:	f003 020f 	and.w	r2, r3, #15
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	440a      	add	r2, r1
 8001eb8:	609a      	str	r2, [r3, #8]
}
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40013800 	.word	0x40013800
 8001ec8:	51eb851f 	.word	0x51eb851f

08001ecc <atoi>:
 8001ecc:	220a      	movs	r2, #10
 8001ece:	2100      	movs	r1, #0
 8001ed0:	f000 b8ce 	b.w	8002070 <strtol>

08001ed4 <__errno>:
 8001ed4:	4b01      	ldr	r3, [pc, #4]	; (8001edc <__errno+0x8>)
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	2000000c 	.word	0x2000000c

08001ee0 <__libc_init_array>:
 8001ee0:	b570      	push	{r4, r5, r6, lr}
 8001ee2:	2500      	movs	r5, #0
 8001ee4:	4e0c      	ldr	r6, [pc, #48]	; (8001f18 <__libc_init_array+0x38>)
 8001ee6:	4c0d      	ldr	r4, [pc, #52]	; (8001f1c <__libc_init_array+0x3c>)
 8001ee8:	1ba4      	subs	r4, r4, r6
 8001eea:	10a4      	asrs	r4, r4, #2
 8001eec:	42a5      	cmp	r5, r4
 8001eee:	d109      	bne.n	8001f04 <__libc_init_array+0x24>
 8001ef0:	f000 fcea 	bl	80028c8 <_init>
 8001ef4:	2500      	movs	r5, #0
 8001ef6:	4e0a      	ldr	r6, [pc, #40]	; (8001f20 <__libc_init_array+0x40>)
 8001ef8:	4c0a      	ldr	r4, [pc, #40]	; (8001f24 <__libc_init_array+0x44>)
 8001efa:	1ba4      	subs	r4, r4, r6
 8001efc:	10a4      	asrs	r4, r4, #2
 8001efe:	42a5      	cmp	r5, r4
 8001f00:	d105      	bne.n	8001f0e <__libc_init_array+0x2e>
 8001f02:	bd70      	pop	{r4, r5, r6, pc}
 8001f04:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f08:	4798      	blx	r3
 8001f0a:	3501      	adds	r5, #1
 8001f0c:	e7ee      	b.n	8001eec <__libc_init_array+0xc>
 8001f0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f12:	4798      	blx	r3
 8001f14:	3501      	adds	r5, #1
 8001f16:	e7f2      	b.n	8001efe <__libc_init_array+0x1e>
 8001f18:	08002b54 	.word	0x08002b54
 8001f1c:	08002b54 	.word	0x08002b54
 8001f20:	08002b54 	.word	0x08002b54
 8001f24:	08002b58 	.word	0x08002b58

08001f28 <memset>:
 8001f28:	4603      	mov	r3, r0
 8001f2a:	4402      	add	r2, r0
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d100      	bne.n	8001f32 <memset+0xa>
 8001f30:	4770      	bx	lr
 8001f32:	f803 1b01 	strb.w	r1, [r3], #1
 8001f36:	e7f9      	b.n	8001f2c <memset+0x4>

08001f38 <siprintf>:
 8001f38:	b40e      	push	{r1, r2, r3}
 8001f3a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001f3e:	b500      	push	{lr}
 8001f40:	b09c      	sub	sp, #112	; 0x70
 8001f42:	ab1d      	add	r3, sp, #116	; 0x74
 8001f44:	9002      	str	r0, [sp, #8]
 8001f46:	9006      	str	r0, [sp, #24]
 8001f48:	9107      	str	r1, [sp, #28]
 8001f4a:	9104      	str	r1, [sp, #16]
 8001f4c:	4808      	ldr	r0, [pc, #32]	; (8001f70 <siprintf+0x38>)
 8001f4e:	4909      	ldr	r1, [pc, #36]	; (8001f74 <siprintf+0x3c>)
 8001f50:	f853 2b04 	ldr.w	r2, [r3], #4
 8001f54:	9105      	str	r1, [sp, #20]
 8001f56:	6800      	ldr	r0, [r0, #0]
 8001f58:	a902      	add	r1, sp, #8
 8001f5a:	9301      	str	r3, [sp, #4]
 8001f5c:	f000 f90e 	bl	800217c <_svfiprintf_r>
 8001f60:	2200      	movs	r2, #0
 8001f62:	9b02      	ldr	r3, [sp, #8]
 8001f64:	701a      	strb	r2, [r3, #0]
 8001f66:	b01c      	add	sp, #112	; 0x70
 8001f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8001f6c:	b003      	add	sp, #12
 8001f6e:	4770      	bx	lr
 8001f70:	2000000c 	.word	0x2000000c
 8001f74:	ffff0208 	.word	0xffff0208

08001f78 <_strtol_l.isra.0>:
 8001f78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f7c:	4680      	mov	r8, r0
 8001f7e:	4689      	mov	r9, r1
 8001f80:	4692      	mov	sl, r2
 8001f82:	461e      	mov	r6, r3
 8001f84:	460f      	mov	r7, r1
 8001f86:	463d      	mov	r5, r7
 8001f88:	9808      	ldr	r0, [sp, #32]
 8001f8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8001f8e:	f000 f885 	bl	800209c <__locale_ctype_ptr_l>
 8001f92:	4420      	add	r0, r4
 8001f94:	7843      	ldrb	r3, [r0, #1]
 8001f96:	f013 0308 	ands.w	r3, r3, #8
 8001f9a:	d132      	bne.n	8002002 <_strtol_l.isra.0+0x8a>
 8001f9c:	2c2d      	cmp	r4, #45	; 0x2d
 8001f9e:	d132      	bne.n	8002006 <_strtol_l.isra.0+0x8e>
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	787c      	ldrb	r4, [r7, #1]
 8001fa4:	1cbd      	adds	r5, r7, #2
 8001fa6:	2e00      	cmp	r6, #0
 8001fa8:	d05d      	beq.n	8002066 <_strtol_l.isra.0+0xee>
 8001faa:	2e10      	cmp	r6, #16
 8001fac:	d109      	bne.n	8001fc2 <_strtol_l.isra.0+0x4a>
 8001fae:	2c30      	cmp	r4, #48	; 0x30
 8001fb0:	d107      	bne.n	8001fc2 <_strtol_l.isra.0+0x4a>
 8001fb2:	782b      	ldrb	r3, [r5, #0]
 8001fb4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8001fb8:	2b58      	cmp	r3, #88	; 0x58
 8001fba:	d14f      	bne.n	800205c <_strtol_l.isra.0+0xe4>
 8001fbc:	2610      	movs	r6, #16
 8001fbe:	786c      	ldrb	r4, [r5, #1]
 8001fc0:	3502      	adds	r5, #2
 8001fc2:	2a00      	cmp	r2, #0
 8001fc4:	bf14      	ite	ne
 8001fc6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8001fca:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8001fce:	2700      	movs	r7, #0
 8001fd0:	fbb1 fcf6 	udiv	ip, r1, r6
 8001fd4:	4638      	mov	r0, r7
 8001fd6:	fb06 1e1c 	mls	lr, r6, ip, r1
 8001fda:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8001fde:	2b09      	cmp	r3, #9
 8001fe0:	d817      	bhi.n	8002012 <_strtol_l.isra.0+0x9a>
 8001fe2:	461c      	mov	r4, r3
 8001fe4:	42a6      	cmp	r6, r4
 8001fe6:	dd23      	ble.n	8002030 <_strtol_l.isra.0+0xb8>
 8001fe8:	1c7b      	adds	r3, r7, #1
 8001fea:	d007      	beq.n	8001ffc <_strtol_l.isra.0+0x84>
 8001fec:	4584      	cmp	ip, r0
 8001fee:	d31c      	bcc.n	800202a <_strtol_l.isra.0+0xb2>
 8001ff0:	d101      	bne.n	8001ff6 <_strtol_l.isra.0+0x7e>
 8001ff2:	45a6      	cmp	lr, r4
 8001ff4:	db19      	blt.n	800202a <_strtol_l.isra.0+0xb2>
 8001ff6:	2701      	movs	r7, #1
 8001ff8:	fb00 4006 	mla	r0, r0, r6, r4
 8001ffc:	f815 4b01 	ldrb.w	r4, [r5], #1
 8002000:	e7eb      	b.n	8001fda <_strtol_l.isra.0+0x62>
 8002002:	462f      	mov	r7, r5
 8002004:	e7bf      	b.n	8001f86 <_strtol_l.isra.0+0xe>
 8002006:	2c2b      	cmp	r4, #43	; 0x2b
 8002008:	bf04      	itt	eq
 800200a:	1cbd      	addeq	r5, r7, #2
 800200c:	787c      	ldrbeq	r4, [r7, #1]
 800200e:	461a      	mov	r2, r3
 8002010:	e7c9      	b.n	8001fa6 <_strtol_l.isra.0+0x2e>
 8002012:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8002016:	2b19      	cmp	r3, #25
 8002018:	d801      	bhi.n	800201e <_strtol_l.isra.0+0xa6>
 800201a:	3c37      	subs	r4, #55	; 0x37
 800201c:	e7e2      	b.n	8001fe4 <_strtol_l.isra.0+0x6c>
 800201e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8002022:	2b19      	cmp	r3, #25
 8002024:	d804      	bhi.n	8002030 <_strtol_l.isra.0+0xb8>
 8002026:	3c57      	subs	r4, #87	; 0x57
 8002028:	e7dc      	b.n	8001fe4 <_strtol_l.isra.0+0x6c>
 800202a:	f04f 37ff 	mov.w	r7, #4294967295
 800202e:	e7e5      	b.n	8001ffc <_strtol_l.isra.0+0x84>
 8002030:	1c7b      	adds	r3, r7, #1
 8002032:	d108      	bne.n	8002046 <_strtol_l.isra.0+0xce>
 8002034:	2322      	movs	r3, #34	; 0x22
 8002036:	4608      	mov	r0, r1
 8002038:	f8c8 3000 	str.w	r3, [r8]
 800203c:	f1ba 0f00 	cmp.w	sl, #0
 8002040:	d107      	bne.n	8002052 <_strtol_l.isra.0+0xda>
 8002042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002046:	b102      	cbz	r2, 800204a <_strtol_l.isra.0+0xd2>
 8002048:	4240      	negs	r0, r0
 800204a:	f1ba 0f00 	cmp.w	sl, #0
 800204e:	d0f8      	beq.n	8002042 <_strtol_l.isra.0+0xca>
 8002050:	b10f      	cbz	r7, 8002056 <_strtol_l.isra.0+0xde>
 8002052:	f105 39ff 	add.w	r9, r5, #4294967295
 8002056:	f8ca 9000 	str.w	r9, [sl]
 800205a:	e7f2      	b.n	8002042 <_strtol_l.isra.0+0xca>
 800205c:	2430      	movs	r4, #48	; 0x30
 800205e:	2e00      	cmp	r6, #0
 8002060:	d1af      	bne.n	8001fc2 <_strtol_l.isra.0+0x4a>
 8002062:	2608      	movs	r6, #8
 8002064:	e7ad      	b.n	8001fc2 <_strtol_l.isra.0+0x4a>
 8002066:	2c30      	cmp	r4, #48	; 0x30
 8002068:	d0a3      	beq.n	8001fb2 <_strtol_l.isra.0+0x3a>
 800206a:	260a      	movs	r6, #10
 800206c:	e7a9      	b.n	8001fc2 <_strtol_l.isra.0+0x4a>
	...

08002070 <strtol>:
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <strtol+0x24>)
 8002072:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002074:	681c      	ldr	r4, [r3, #0]
 8002076:	4d08      	ldr	r5, [pc, #32]	; (8002098 <strtol+0x28>)
 8002078:	6a23      	ldr	r3, [r4, #32]
 800207a:	2b00      	cmp	r3, #0
 800207c:	bf08      	it	eq
 800207e:	462b      	moveq	r3, r5
 8002080:	9300      	str	r3, [sp, #0]
 8002082:	4613      	mov	r3, r2
 8002084:	460a      	mov	r2, r1
 8002086:	4601      	mov	r1, r0
 8002088:	4620      	mov	r0, r4
 800208a:	f7ff ff75 	bl	8001f78 <_strtol_l.isra.0>
 800208e:	b003      	add	sp, #12
 8002090:	bd30      	pop	{r4, r5, pc}
 8002092:	bf00      	nop
 8002094:	2000000c 	.word	0x2000000c
 8002098:	20000070 	.word	0x20000070

0800209c <__locale_ctype_ptr_l>:
 800209c:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 80020a0:	4770      	bx	lr

080020a2 <__ascii_mbtowc>:
 80020a2:	b082      	sub	sp, #8
 80020a4:	b901      	cbnz	r1, 80020a8 <__ascii_mbtowc+0x6>
 80020a6:	a901      	add	r1, sp, #4
 80020a8:	b142      	cbz	r2, 80020bc <__ascii_mbtowc+0x1a>
 80020aa:	b14b      	cbz	r3, 80020c0 <__ascii_mbtowc+0x1e>
 80020ac:	7813      	ldrb	r3, [r2, #0]
 80020ae:	600b      	str	r3, [r1, #0]
 80020b0:	7812      	ldrb	r2, [r2, #0]
 80020b2:	1c10      	adds	r0, r2, #0
 80020b4:	bf18      	it	ne
 80020b6:	2001      	movne	r0, #1
 80020b8:	b002      	add	sp, #8
 80020ba:	4770      	bx	lr
 80020bc:	4610      	mov	r0, r2
 80020be:	e7fb      	b.n	80020b8 <__ascii_mbtowc+0x16>
 80020c0:	f06f 0001 	mvn.w	r0, #1
 80020c4:	e7f8      	b.n	80020b8 <__ascii_mbtowc+0x16>

080020c6 <__ssputs_r>:
 80020c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020ca:	688e      	ldr	r6, [r1, #8]
 80020cc:	4682      	mov	sl, r0
 80020ce:	429e      	cmp	r6, r3
 80020d0:	460c      	mov	r4, r1
 80020d2:	4690      	mov	r8, r2
 80020d4:	4699      	mov	r9, r3
 80020d6:	d837      	bhi.n	8002148 <__ssputs_r+0x82>
 80020d8:	898a      	ldrh	r2, [r1, #12]
 80020da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80020de:	d031      	beq.n	8002144 <__ssputs_r+0x7e>
 80020e0:	2302      	movs	r3, #2
 80020e2:	6825      	ldr	r5, [r4, #0]
 80020e4:	6909      	ldr	r1, [r1, #16]
 80020e6:	1a6f      	subs	r7, r5, r1
 80020e8:	6965      	ldr	r5, [r4, #20]
 80020ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80020ee:	fb95 f5f3 	sdiv	r5, r5, r3
 80020f2:	f109 0301 	add.w	r3, r9, #1
 80020f6:	443b      	add	r3, r7
 80020f8:	429d      	cmp	r5, r3
 80020fa:	bf38      	it	cc
 80020fc:	461d      	movcc	r5, r3
 80020fe:	0553      	lsls	r3, r2, #21
 8002100:	d530      	bpl.n	8002164 <__ssputs_r+0x9e>
 8002102:	4629      	mov	r1, r5
 8002104:	f000 fb46 	bl	8002794 <_malloc_r>
 8002108:	4606      	mov	r6, r0
 800210a:	b950      	cbnz	r0, 8002122 <__ssputs_r+0x5c>
 800210c:	230c      	movs	r3, #12
 800210e:	f04f 30ff 	mov.w	r0, #4294967295
 8002112:	f8ca 3000 	str.w	r3, [sl]
 8002116:	89a3      	ldrh	r3, [r4, #12]
 8002118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800211c:	81a3      	strh	r3, [r4, #12]
 800211e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002122:	463a      	mov	r2, r7
 8002124:	6921      	ldr	r1, [r4, #16]
 8002126:	f000 fac4 	bl	80026b2 <memcpy>
 800212a:	89a3      	ldrh	r3, [r4, #12]
 800212c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002134:	81a3      	strh	r3, [r4, #12]
 8002136:	6126      	str	r6, [r4, #16]
 8002138:	443e      	add	r6, r7
 800213a:	6026      	str	r6, [r4, #0]
 800213c:	464e      	mov	r6, r9
 800213e:	6165      	str	r5, [r4, #20]
 8002140:	1bed      	subs	r5, r5, r7
 8002142:	60a5      	str	r5, [r4, #8]
 8002144:	454e      	cmp	r6, r9
 8002146:	d900      	bls.n	800214a <__ssputs_r+0x84>
 8002148:	464e      	mov	r6, r9
 800214a:	4632      	mov	r2, r6
 800214c:	4641      	mov	r1, r8
 800214e:	6820      	ldr	r0, [r4, #0]
 8002150:	f000 faba 	bl	80026c8 <memmove>
 8002154:	68a3      	ldr	r3, [r4, #8]
 8002156:	2000      	movs	r0, #0
 8002158:	1b9b      	subs	r3, r3, r6
 800215a:	60a3      	str	r3, [r4, #8]
 800215c:	6823      	ldr	r3, [r4, #0]
 800215e:	441e      	add	r6, r3
 8002160:	6026      	str	r6, [r4, #0]
 8002162:	e7dc      	b.n	800211e <__ssputs_r+0x58>
 8002164:	462a      	mov	r2, r5
 8002166:	f000 fb6f 	bl	8002848 <_realloc_r>
 800216a:	4606      	mov	r6, r0
 800216c:	2800      	cmp	r0, #0
 800216e:	d1e2      	bne.n	8002136 <__ssputs_r+0x70>
 8002170:	6921      	ldr	r1, [r4, #16]
 8002172:	4650      	mov	r0, sl
 8002174:	f000 fac2 	bl	80026fc <_free_r>
 8002178:	e7c8      	b.n	800210c <__ssputs_r+0x46>
	...

0800217c <_svfiprintf_r>:
 800217c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002180:	461d      	mov	r5, r3
 8002182:	898b      	ldrh	r3, [r1, #12]
 8002184:	b09d      	sub	sp, #116	; 0x74
 8002186:	061f      	lsls	r7, r3, #24
 8002188:	4680      	mov	r8, r0
 800218a:	460c      	mov	r4, r1
 800218c:	4616      	mov	r6, r2
 800218e:	d50f      	bpl.n	80021b0 <_svfiprintf_r+0x34>
 8002190:	690b      	ldr	r3, [r1, #16]
 8002192:	b96b      	cbnz	r3, 80021b0 <_svfiprintf_r+0x34>
 8002194:	2140      	movs	r1, #64	; 0x40
 8002196:	f000 fafd 	bl	8002794 <_malloc_r>
 800219a:	6020      	str	r0, [r4, #0]
 800219c:	6120      	str	r0, [r4, #16]
 800219e:	b928      	cbnz	r0, 80021ac <_svfiprintf_r+0x30>
 80021a0:	230c      	movs	r3, #12
 80021a2:	f8c8 3000 	str.w	r3, [r8]
 80021a6:	f04f 30ff 	mov.w	r0, #4294967295
 80021aa:	e0c8      	b.n	800233e <_svfiprintf_r+0x1c2>
 80021ac:	2340      	movs	r3, #64	; 0x40
 80021ae:	6163      	str	r3, [r4, #20]
 80021b0:	2300      	movs	r3, #0
 80021b2:	9309      	str	r3, [sp, #36]	; 0x24
 80021b4:	2320      	movs	r3, #32
 80021b6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80021ba:	2330      	movs	r3, #48	; 0x30
 80021bc:	f04f 0b01 	mov.w	fp, #1
 80021c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80021c4:	9503      	str	r5, [sp, #12]
 80021c6:	4637      	mov	r7, r6
 80021c8:	463d      	mov	r5, r7
 80021ca:	f815 3b01 	ldrb.w	r3, [r5], #1
 80021ce:	b10b      	cbz	r3, 80021d4 <_svfiprintf_r+0x58>
 80021d0:	2b25      	cmp	r3, #37	; 0x25
 80021d2:	d13e      	bne.n	8002252 <_svfiprintf_r+0xd6>
 80021d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80021d8:	d00b      	beq.n	80021f2 <_svfiprintf_r+0x76>
 80021da:	4653      	mov	r3, sl
 80021dc:	4632      	mov	r2, r6
 80021de:	4621      	mov	r1, r4
 80021e0:	4640      	mov	r0, r8
 80021e2:	f7ff ff70 	bl	80020c6 <__ssputs_r>
 80021e6:	3001      	adds	r0, #1
 80021e8:	f000 80a4 	beq.w	8002334 <_svfiprintf_r+0x1b8>
 80021ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80021ee:	4453      	add	r3, sl
 80021f0:	9309      	str	r3, [sp, #36]	; 0x24
 80021f2:	783b      	ldrb	r3, [r7, #0]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 809d 	beq.w	8002334 <_svfiprintf_r+0x1b8>
 80021fa:	2300      	movs	r3, #0
 80021fc:	f04f 32ff 	mov.w	r2, #4294967295
 8002200:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002204:	9304      	str	r3, [sp, #16]
 8002206:	9307      	str	r3, [sp, #28]
 8002208:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800220c:	931a      	str	r3, [sp, #104]	; 0x68
 800220e:	462f      	mov	r7, r5
 8002210:	2205      	movs	r2, #5
 8002212:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002216:	4850      	ldr	r0, [pc, #320]	; (8002358 <_svfiprintf_r+0x1dc>)
 8002218:	f000 fa3d 	bl	8002696 <memchr>
 800221c:	9b04      	ldr	r3, [sp, #16]
 800221e:	b9d0      	cbnz	r0, 8002256 <_svfiprintf_r+0xda>
 8002220:	06d9      	lsls	r1, r3, #27
 8002222:	bf44      	itt	mi
 8002224:	2220      	movmi	r2, #32
 8002226:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800222a:	071a      	lsls	r2, r3, #28
 800222c:	bf44      	itt	mi
 800222e:	222b      	movmi	r2, #43	; 0x2b
 8002230:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002234:	782a      	ldrb	r2, [r5, #0]
 8002236:	2a2a      	cmp	r2, #42	; 0x2a
 8002238:	d015      	beq.n	8002266 <_svfiprintf_r+0xea>
 800223a:	462f      	mov	r7, r5
 800223c:	2000      	movs	r0, #0
 800223e:	250a      	movs	r5, #10
 8002240:	9a07      	ldr	r2, [sp, #28]
 8002242:	4639      	mov	r1, r7
 8002244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002248:	3b30      	subs	r3, #48	; 0x30
 800224a:	2b09      	cmp	r3, #9
 800224c:	d94d      	bls.n	80022ea <_svfiprintf_r+0x16e>
 800224e:	b1b8      	cbz	r0, 8002280 <_svfiprintf_r+0x104>
 8002250:	e00f      	b.n	8002272 <_svfiprintf_r+0xf6>
 8002252:	462f      	mov	r7, r5
 8002254:	e7b8      	b.n	80021c8 <_svfiprintf_r+0x4c>
 8002256:	4a40      	ldr	r2, [pc, #256]	; (8002358 <_svfiprintf_r+0x1dc>)
 8002258:	463d      	mov	r5, r7
 800225a:	1a80      	subs	r0, r0, r2
 800225c:	fa0b f000 	lsl.w	r0, fp, r0
 8002260:	4318      	orrs	r0, r3
 8002262:	9004      	str	r0, [sp, #16]
 8002264:	e7d3      	b.n	800220e <_svfiprintf_r+0x92>
 8002266:	9a03      	ldr	r2, [sp, #12]
 8002268:	1d11      	adds	r1, r2, #4
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	9103      	str	r1, [sp, #12]
 800226e:	2a00      	cmp	r2, #0
 8002270:	db01      	blt.n	8002276 <_svfiprintf_r+0xfa>
 8002272:	9207      	str	r2, [sp, #28]
 8002274:	e004      	b.n	8002280 <_svfiprintf_r+0x104>
 8002276:	4252      	negs	r2, r2
 8002278:	f043 0302 	orr.w	r3, r3, #2
 800227c:	9207      	str	r2, [sp, #28]
 800227e:	9304      	str	r3, [sp, #16]
 8002280:	783b      	ldrb	r3, [r7, #0]
 8002282:	2b2e      	cmp	r3, #46	; 0x2e
 8002284:	d10c      	bne.n	80022a0 <_svfiprintf_r+0x124>
 8002286:	787b      	ldrb	r3, [r7, #1]
 8002288:	2b2a      	cmp	r3, #42	; 0x2a
 800228a:	d133      	bne.n	80022f4 <_svfiprintf_r+0x178>
 800228c:	9b03      	ldr	r3, [sp, #12]
 800228e:	3702      	adds	r7, #2
 8002290:	1d1a      	adds	r2, r3, #4
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	9203      	str	r2, [sp, #12]
 8002296:	2b00      	cmp	r3, #0
 8002298:	bfb8      	it	lt
 800229a:	f04f 33ff 	movlt.w	r3, #4294967295
 800229e:	9305      	str	r3, [sp, #20]
 80022a0:	4d2e      	ldr	r5, [pc, #184]	; (800235c <_svfiprintf_r+0x1e0>)
 80022a2:	2203      	movs	r2, #3
 80022a4:	7839      	ldrb	r1, [r7, #0]
 80022a6:	4628      	mov	r0, r5
 80022a8:	f000 f9f5 	bl	8002696 <memchr>
 80022ac:	b138      	cbz	r0, 80022be <_svfiprintf_r+0x142>
 80022ae:	2340      	movs	r3, #64	; 0x40
 80022b0:	1b40      	subs	r0, r0, r5
 80022b2:	fa03 f000 	lsl.w	r0, r3, r0
 80022b6:	9b04      	ldr	r3, [sp, #16]
 80022b8:	3701      	adds	r7, #1
 80022ba:	4303      	orrs	r3, r0
 80022bc:	9304      	str	r3, [sp, #16]
 80022be:	7839      	ldrb	r1, [r7, #0]
 80022c0:	2206      	movs	r2, #6
 80022c2:	4827      	ldr	r0, [pc, #156]	; (8002360 <_svfiprintf_r+0x1e4>)
 80022c4:	1c7e      	adds	r6, r7, #1
 80022c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80022ca:	f000 f9e4 	bl	8002696 <memchr>
 80022ce:	2800      	cmp	r0, #0
 80022d0:	d038      	beq.n	8002344 <_svfiprintf_r+0x1c8>
 80022d2:	4b24      	ldr	r3, [pc, #144]	; (8002364 <_svfiprintf_r+0x1e8>)
 80022d4:	bb13      	cbnz	r3, 800231c <_svfiprintf_r+0x1a0>
 80022d6:	9b03      	ldr	r3, [sp, #12]
 80022d8:	3307      	adds	r3, #7
 80022da:	f023 0307 	bic.w	r3, r3, #7
 80022de:	3308      	adds	r3, #8
 80022e0:	9303      	str	r3, [sp, #12]
 80022e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80022e4:	444b      	add	r3, r9
 80022e6:	9309      	str	r3, [sp, #36]	; 0x24
 80022e8:	e76d      	b.n	80021c6 <_svfiprintf_r+0x4a>
 80022ea:	fb05 3202 	mla	r2, r5, r2, r3
 80022ee:	2001      	movs	r0, #1
 80022f0:	460f      	mov	r7, r1
 80022f2:	e7a6      	b.n	8002242 <_svfiprintf_r+0xc6>
 80022f4:	2300      	movs	r3, #0
 80022f6:	250a      	movs	r5, #10
 80022f8:	4619      	mov	r1, r3
 80022fa:	3701      	adds	r7, #1
 80022fc:	9305      	str	r3, [sp, #20]
 80022fe:	4638      	mov	r0, r7
 8002300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002304:	3a30      	subs	r2, #48	; 0x30
 8002306:	2a09      	cmp	r2, #9
 8002308:	d903      	bls.n	8002312 <_svfiprintf_r+0x196>
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0c8      	beq.n	80022a0 <_svfiprintf_r+0x124>
 800230e:	9105      	str	r1, [sp, #20]
 8002310:	e7c6      	b.n	80022a0 <_svfiprintf_r+0x124>
 8002312:	fb05 2101 	mla	r1, r5, r1, r2
 8002316:	2301      	movs	r3, #1
 8002318:	4607      	mov	r7, r0
 800231a:	e7f0      	b.n	80022fe <_svfiprintf_r+0x182>
 800231c:	ab03      	add	r3, sp, #12
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	4622      	mov	r2, r4
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <_svfiprintf_r+0x1ec>)
 8002324:	a904      	add	r1, sp, #16
 8002326:	4640      	mov	r0, r8
 8002328:	f3af 8000 	nop.w
 800232c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002330:	4681      	mov	r9, r0
 8002332:	d1d6      	bne.n	80022e2 <_svfiprintf_r+0x166>
 8002334:	89a3      	ldrh	r3, [r4, #12]
 8002336:	065b      	lsls	r3, r3, #25
 8002338:	f53f af35 	bmi.w	80021a6 <_svfiprintf_r+0x2a>
 800233c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800233e:	b01d      	add	sp, #116	; 0x74
 8002340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002344:	ab03      	add	r3, sp, #12
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	4622      	mov	r2, r4
 800234a:	4b07      	ldr	r3, [pc, #28]	; (8002368 <_svfiprintf_r+0x1ec>)
 800234c:	a904      	add	r1, sp, #16
 800234e:	4640      	mov	r0, r8
 8002350:	f000 f882 	bl	8002458 <_printf_i>
 8002354:	e7ea      	b.n	800232c <_svfiprintf_r+0x1b0>
 8002356:	bf00      	nop
 8002358:	08002a1e 	.word	0x08002a1e
 800235c:	08002a24 	.word	0x08002a24
 8002360:	08002a28 	.word	0x08002a28
 8002364:	00000000 	.word	0x00000000
 8002368:	080020c7 	.word	0x080020c7

0800236c <_printf_common>:
 800236c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002370:	4691      	mov	r9, r2
 8002372:	461f      	mov	r7, r3
 8002374:	688a      	ldr	r2, [r1, #8]
 8002376:	690b      	ldr	r3, [r1, #16]
 8002378:	4606      	mov	r6, r0
 800237a:	4293      	cmp	r3, r2
 800237c:	bfb8      	it	lt
 800237e:	4613      	movlt	r3, r2
 8002380:	f8c9 3000 	str.w	r3, [r9]
 8002384:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002388:	460c      	mov	r4, r1
 800238a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800238e:	b112      	cbz	r2, 8002396 <_printf_common+0x2a>
 8002390:	3301      	adds	r3, #1
 8002392:	f8c9 3000 	str.w	r3, [r9]
 8002396:	6823      	ldr	r3, [r4, #0]
 8002398:	0699      	lsls	r1, r3, #26
 800239a:	bf42      	ittt	mi
 800239c:	f8d9 3000 	ldrmi.w	r3, [r9]
 80023a0:	3302      	addmi	r3, #2
 80023a2:	f8c9 3000 	strmi.w	r3, [r9]
 80023a6:	6825      	ldr	r5, [r4, #0]
 80023a8:	f015 0506 	ands.w	r5, r5, #6
 80023ac:	d107      	bne.n	80023be <_printf_common+0x52>
 80023ae:	f104 0a19 	add.w	sl, r4, #25
 80023b2:	68e3      	ldr	r3, [r4, #12]
 80023b4:	f8d9 2000 	ldr.w	r2, [r9]
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	42ab      	cmp	r3, r5
 80023bc:	dc29      	bgt.n	8002412 <_printf_common+0xa6>
 80023be:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80023c2:	6822      	ldr	r2, [r4, #0]
 80023c4:	3300      	adds	r3, #0
 80023c6:	bf18      	it	ne
 80023c8:	2301      	movne	r3, #1
 80023ca:	0692      	lsls	r2, r2, #26
 80023cc:	d42e      	bmi.n	800242c <_printf_common+0xc0>
 80023ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80023d2:	4639      	mov	r1, r7
 80023d4:	4630      	mov	r0, r6
 80023d6:	47c0      	blx	r8
 80023d8:	3001      	adds	r0, #1
 80023da:	d021      	beq.n	8002420 <_printf_common+0xb4>
 80023dc:	6823      	ldr	r3, [r4, #0]
 80023de:	68e5      	ldr	r5, [r4, #12]
 80023e0:	f003 0306 	and.w	r3, r3, #6
 80023e4:	2b04      	cmp	r3, #4
 80023e6:	bf18      	it	ne
 80023e8:	2500      	movne	r5, #0
 80023ea:	f8d9 2000 	ldr.w	r2, [r9]
 80023ee:	f04f 0900 	mov.w	r9, #0
 80023f2:	bf08      	it	eq
 80023f4:	1aad      	subeq	r5, r5, r2
 80023f6:	68a3      	ldr	r3, [r4, #8]
 80023f8:	6922      	ldr	r2, [r4, #16]
 80023fa:	bf08      	it	eq
 80023fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002400:	4293      	cmp	r3, r2
 8002402:	bfc4      	itt	gt
 8002404:	1a9b      	subgt	r3, r3, r2
 8002406:	18ed      	addgt	r5, r5, r3
 8002408:	341a      	adds	r4, #26
 800240a:	454d      	cmp	r5, r9
 800240c:	d11a      	bne.n	8002444 <_printf_common+0xd8>
 800240e:	2000      	movs	r0, #0
 8002410:	e008      	b.n	8002424 <_printf_common+0xb8>
 8002412:	2301      	movs	r3, #1
 8002414:	4652      	mov	r2, sl
 8002416:	4639      	mov	r1, r7
 8002418:	4630      	mov	r0, r6
 800241a:	47c0      	blx	r8
 800241c:	3001      	adds	r0, #1
 800241e:	d103      	bne.n	8002428 <_printf_common+0xbc>
 8002420:	f04f 30ff 	mov.w	r0, #4294967295
 8002424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002428:	3501      	adds	r5, #1
 800242a:	e7c2      	b.n	80023b2 <_printf_common+0x46>
 800242c:	2030      	movs	r0, #48	; 0x30
 800242e:	18e1      	adds	r1, r4, r3
 8002430:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002434:	1c5a      	adds	r2, r3, #1
 8002436:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800243a:	4422      	add	r2, r4
 800243c:	3302      	adds	r3, #2
 800243e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002442:	e7c4      	b.n	80023ce <_printf_common+0x62>
 8002444:	2301      	movs	r3, #1
 8002446:	4622      	mov	r2, r4
 8002448:	4639      	mov	r1, r7
 800244a:	4630      	mov	r0, r6
 800244c:	47c0      	blx	r8
 800244e:	3001      	adds	r0, #1
 8002450:	d0e6      	beq.n	8002420 <_printf_common+0xb4>
 8002452:	f109 0901 	add.w	r9, r9, #1
 8002456:	e7d8      	b.n	800240a <_printf_common+0x9e>

08002458 <_printf_i>:
 8002458:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800245c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002460:	460c      	mov	r4, r1
 8002462:	7e09      	ldrb	r1, [r1, #24]
 8002464:	b085      	sub	sp, #20
 8002466:	296e      	cmp	r1, #110	; 0x6e
 8002468:	4617      	mov	r7, r2
 800246a:	4606      	mov	r6, r0
 800246c:	4698      	mov	r8, r3
 800246e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002470:	f000 80b3 	beq.w	80025da <_printf_i+0x182>
 8002474:	d822      	bhi.n	80024bc <_printf_i+0x64>
 8002476:	2963      	cmp	r1, #99	; 0x63
 8002478:	d036      	beq.n	80024e8 <_printf_i+0x90>
 800247a:	d80a      	bhi.n	8002492 <_printf_i+0x3a>
 800247c:	2900      	cmp	r1, #0
 800247e:	f000 80b9 	beq.w	80025f4 <_printf_i+0x19c>
 8002482:	2958      	cmp	r1, #88	; 0x58
 8002484:	f000 8083 	beq.w	800258e <_printf_i+0x136>
 8002488:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800248c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002490:	e032      	b.n	80024f8 <_printf_i+0xa0>
 8002492:	2964      	cmp	r1, #100	; 0x64
 8002494:	d001      	beq.n	800249a <_printf_i+0x42>
 8002496:	2969      	cmp	r1, #105	; 0x69
 8002498:	d1f6      	bne.n	8002488 <_printf_i+0x30>
 800249a:	6820      	ldr	r0, [r4, #0]
 800249c:	6813      	ldr	r3, [r2, #0]
 800249e:	0605      	lsls	r5, r0, #24
 80024a0:	f103 0104 	add.w	r1, r3, #4
 80024a4:	d52a      	bpl.n	80024fc <_printf_i+0xa4>
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6011      	str	r1, [r2, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	da03      	bge.n	80024b6 <_printf_i+0x5e>
 80024ae:	222d      	movs	r2, #45	; 0x2d
 80024b0:	425b      	negs	r3, r3
 80024b2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80024b6:	486f      	ldr	r0, [pc, #444]	; (8002674 <_printf_i+0x21c>)
 80024b8:	220a      	movs	r2, #10
 80024ba:	e039      	b.n	8002530 <_printf_i+0xd8>
 80024bc:	2973      	cmp	r1, #115	; 0x73
 80024be:	f000 809d 	beq.w	80025fc <_printf_i+0x1a4>
 80024c2:	d808      	bhi.n	80024d6 <_printf_i+0x7e>
 80024c4:	296f      	cmp	r1, #111	; 0x6f
 80024c6:	d020      	beq.n	800250a <_printf_i+0xb2>
 80024c8:	2970      	cmp	r1, #112	; 0x70
 80024ca:	d1dd      	bne.n	8002488 <_printf_i+0x30>
 80024cc:	6823      	ldr	r3, [r4, #0]
 80024ce:	f043 0320 	orr.w	r3, r3, #32
 80024d2:	6023      	str	r3, [r4, #0]
 80024d4:	e003      	b.n	80024de <_printf_i+0x86>
 80024d6:	2975      	cmp	r1, #117	; 0x75
 80024d8:	d017      	beq.n	800250a <_printf_i+0xb2>
 80024da:	2978      	cmp	r1, #120	; 0x78
 80024dc:	d1d4      	bne.n	8002488 <_printf_i+0x30>
 80024de:	2378      	movs	r3, #120	; 0x78
 80024e0:	4865      	ldr	r0, [pc, #404]	; (8002678 <_printf_i+0x220>)
 80024e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80024e6:	e055      	b.n	8002594 <_printf_i+0x13c>
 80024e8:	6813      	ldr	r3, [r2, #0]
 80024ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80024ee:	1d19      	adds	r1, r3, #4
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	6011      	str	r1, [r2, #0]
 80024f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80024f8:	2301      	movs	r3, #1
 80024fa:	e08c      	b.n	8002616 <_printf_i+0x1be>
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002502:	6011      	str	r1, [r2, #0]
 8002504:	bf18      	it	ne
 8002506:	b21b      	sxthne	r3, r3
 8002508:	e7cf      	b.n	80024aa <_printf_i+0x52>
 800250a:	6813      	ldr	r3, [r2, #0]
 800250c:	6825      	ldr	r5, [r4, #0]
 800250e:	1d18      	adds	r0, r3, #4
 8002510:	6010      	str	r0, [r2, #0]
 8002512:	0628      	lsls	r0, r5, #24
 8002514:	d501      	bpl.n	800251a <_printf_i+0xc2>
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	e002      	b.n	8002520 <_printf_i+0xc8>
 800251a:	0668      	lsls	r0, r5, #25
 800251c:	d5fb      	bpl.n	8002516 <_printf_i+0xbe>
 800251e:	881b      	ldrh	r3, [r3, #0]
 8002520:	296f      	cmp	r1, #111	; 0x6f
 8002522:	bf14      	ite	ne
 8002524:	220a      	movne	r2, #10
 8002526:	2208      	moveq	r2, #8
 8002528:	4852      	ldr	r0, [pc, #328]	; (8002674 <_printf_i+0x21c>)
 800252a:	2100      	movs	r1, #0
 800252c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002530:	6865      	ldr	r5, [r4, #4]
 8002532:	2d00      	cmp	r5, #0
 8002534:	60a5      	str	r5, [r4, #8]
 8002536:	f2c0 8095 	blt.w	8002664 <_printf_i+0x20c>
 800253a:	6821      	ldr	r1, [r4, #0]
 800253c:	f021 0104 	bic.w	r1, r1, #4
 8002540:	6021      	str	r1, [r4, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d13d      	bne.n	80025c2 <_printf_i+0x16a>
 8002546:	2d00      	cmp	r5, #0
 8002548:	f040 808e 	bne.w	8002668 <_printf_i+0x210>
 800254c:	4665      	mov	r5, ip
 800254e:	2a08      	cmp	r2, #8
 8002550:	d10b      	bne.n	800256a <_printf_i+0x112>
 8002552:	6823      	ldr	r3, [r4, #0]
 8002554:	07db      	lsls	r3, r3, #31
 8002556:	d508      	bpl.n	800256a <_printf_i+0x112>
 8002558:	6923      	ldr	r3, [r4, #16]
 800255a:	6862      	ldr	r2, [r4, #4]
 800255c:	429a      	cmp	r2, r3
 800255e:	bfde      	ittt	le
 8002560:	2330      	movle	r3, #48	; 0x30
 8002562:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002566:	f105 35ff 	addle.w	r5, r5, #4294967295
 800256a:	ebac 0305 	sub.w	r3, ip, r5
 800256e:	6123      	str	r3, [r4, #16]
 8002570:	f8cd 8000 	str.w	r8, [sp]
 8002574:	463b      	mov	r3, r7
 8002576:	aa03      	add	r2, sp, #12
 8002578:	4621      	mov	r1, r4
 800257a:	4630      	mov	r0, r6
 800257c:	f7ff fef6 	bl	800236c <_printf_common>
 8002580:	3001      	adds	r0, #1
 8002582:	d14d      	bne.n	8002620 <_printf_i+0x1c8>
 8002584:	f04f 30ff 	mov.w	r0, #4294967295
 8002588:	b005      	add	sp, #20
 800258a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800258e:	4839      	ldr	r0, [pc, #228]	; (8002674 <_printf_i+0x21c>)
 8002590:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002594:	6813      	ldr	r3, [r2, #0]
 8002596:	6821      	ldr	r1, [r4, #0]
 8002598:	1d1d      	adds	r5, r3, #4
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6015      	str	r5, [r2, #0]
 800259e:	060a      	lsls	r2, r1, #24
 80025a0:	d50b      	bpl.n	80025ba <_printf_i+0x162>
 80025a2:	07ca      	lsls	r2, r1, #31
 80025a4:	bf44      	itt	mi
 80025a6:	f041 0120 	orrmi.w	r1, r1, #32
 80025aa:	6021      	strmi	r1, [r4, #0]
 80025ac:	b91b      	cbnz	r3, 80025b6 <_printf_i+0x15e>
 80025ae:	6822      	ldr	r2, [r4, #0]
 80025b0:	f022 0220 	bic.w	r2, r2, #32
 80025b4:	6022      	str	r2, [r4, #0]
 80025b6:	2210      	movs	r2, #16
 80025b8:	e7b7      	b.n	800252a <_printf_i+0xd2>
 80025ba:	064d      	lsls	r5, r1, #25
 80025bc:	bf48      	it	mi
 80025be:	b29b      	uxthmi	r3, r3
 80025c0:	e7ef      	b.n	80025a2 <_printf_i+0x14a>
 80025c2:	4665      	mov	r5, ip
 80025c4:	fbb3 f1f2 	udiv	r1, r3, r2
 80025c8:	fb02 3311 	mls	r3, r2, r1, r3
 80025cc:	5cc3      	ldrb	r3, [r0, r3]
 80025ce:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80025d2:	460b      	mov	r3, r1
 80025d4:	2900      	cmp	r1, #0
 80025d6:	d1f5      	bne.n	80025c4 <_printf_i+0x16c>
 80025d8:	e7b9      	b.n	800254e <_printf_i+0xf6>
 80025da:	6813      	ldr	r3, [r2, #0]
 80025dc:	6825      	ldr	r5, [r4, #0]
 80025de:	1d18      	adds	r0, r3, #4
 80025e0:	6961      	ldr	r1, [r4, #20]
 80025e2:	6010      	str	r0, [r2, #0]
 80025e4:	0628      	lsls	r0, r5, #24
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	d501      	bpl.n	80025ee <_printf_i+0x196>
 80025ea:	6019      	str	r1, [r3, #0]
 80025ec:	e002      	b.n	80025f4 <_printf_i+0x19c>
 80025ee:	066a      	lsls	r2, r5, #25
 80025f0:	d5fb      	bpl.n	80025ea <_printf_i+0x192>
 80025f2:	8019      	strh	r1, [r3, #0]
 80025f4:	2300      	movs	r3, #0
 80025f6:	4665      	mov	r5, ip
 80025f8:	6123      	str	r3, [r4, #16]
 80025fa:	e7b9      	b.n	8002570 <_printf_i+0x118>
 80025fc:	6813      	ldr	r3, [r2, #0]
 80025fe:	1d19      	adds	r1, r3, #4
 8002600:	6011      	str	r1, [r2, #0]
 8002602:	681d      	ldr	r5, [r3, #0]
 8002604:	6862      	ldr	r2, [r4, #4]
 8002606:	2100      	movs	r1, #0
 8002608:	4628      	mov	r0, r5
 800260a:	f000 f844 	bl	8002696 <memchr>
 800260e:	b108      	cbz	r0, 8002614 <_printf_i+0x1bc>
 8002610:	1b40      	subs	r0, r0, r5
 8002612:	6060      	str	r0, [r4, #4]
 8002614:	6863      	ldr	r3, [r4, #4]
 8002616:	6123      	str	r3, [r4, #16]
 8002618:	2300      	movs	r3, #0
 800261a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800261e:	e7a7      	b.n	8002570 <_printf_i+0x118>
 8002620:	6923      	ldr	r3, [r4, #16]
 8002622:	462a      	mov	r2, r5
 8002624:	4639      	mov	r1, r7
 8002626:	4630      	mov	r0, r6
 8002628:	47c0      	blx	r8
 800262a:	3001      	adds	r0, #1
 800262c:	d0aa      	beq.n	8002584 <_printf_i+0x12c>
 800262e:	6823      	ldr	r3, [r4, #0]
 8002630:	079b      	lsls	r3, r3, #30
 8002632:	d413      	bmi.n	800265c <_printf_i+0x204>
 8002634:	68e0      	ldr	r0, [r4, #12]
 8002636:	9b03      	ldr	r3, [sp, #12]
 8002638:	4298      	cmp	r0, r3
 800263a:	bfb8      	it	lt
 800263c:	4618      	movlt	r0, r3
 800263e:	e7a3      	b.n	8002588 <_printf_i+0x130>
 8002640:	2301      	movs	r3, #1
 8002642:	464a      	mov	r2, r9
 8002644:	4639      	mov	r1, r7
 8002646:	4630      	mov	r0, r6
 8002648:	47c0      	blx	r8
 800264a:	3001      	adds	r0, #1
 800264c:	d09a      	beq.n	8002584 <_printf_i+0x12c>
 800264e:	3501      	adds	r5, #1
 8002650:	68e3      	ldr	r3, [r4, #12]
 8002652:	9a03      	ldr	r2, [sp, #12]
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	42ab      	cmp	r3, r5
 8002658:	dcf2      	bgt.n	8002640 <_printf_i+0x1e8>
 800265a:	e7eb      	b.n	8002634 <_printf_i+0x1dc>
 800265c:	2500      	movs	r5, #0
 800265e:	f104 0919 	add.w	r9, r4, #25
 8002662:	e7f5      	b.n	8002650 <_printf_i+0x1f8>
 8002664:	2b00      	cmp	r3, #0
 8002666:	d1ac      	bne.n	80025c2 <_printf_i+0x16a>
 8002668:	7803      	ldrb	r3, [r0, #0]
 800266a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800266e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002672:	e76c      	b.n	800254e <_printf_i+0xf6>
 8002674:	08002a2f 	.word	0x08002a2f
 8002678:	08002a40 	.word	0x08002a40

0800267c <__ascii_wctomb>:
 800267c:	b149      	cbz	r1, 8002692 <__ascii_wctomb+0x16>
 800267e:	2aff      	cmp	r2, #255	; 0xff
 8002680:	bf8b      	itete	hi
 8002682:	238a      	movhi	r3, #138	; 0x8a
 8002684:	700a      	strbls	r2, [r1, #0]
 8002686:	6003      	strhi	r3, [r0, #0]
 8002688:	2001      	movls	r0, #1
 800268a:	bf88      	it	hi
 800268c:	f04f 30ff 	movhi.w	r0, #4294967295
 8002690:	4770      	bx	lr
 8002692:	4608      	mov	r0, r1
 8002694:	4770      	bx	lr

08002696 <memchr>:
 8002696:	b510      	push	{r4, lr}
 8002698:	b2c9      	uxtb	r1, r1
 800269a:	4402      	add	r2, r0
 800269c:	4290      	cmp	r0, r2
 800269e:	4603      	mov	r3, r0
 80026a0:	d101      	bne.n	80026a6 <memchr+0x10>
 80026a2:	2300      	movs	r3, #0
 80026a4:	e003      	b.n	80026ae <memchr+0x18>
 80026a6:	781c      	ldrb	r4, [r3, #0]
 80026a8:	3001      	adds	r0, #1
 80026aa:	428c      	cmp	r4, r1
 80026ac:	d1f6      	bne.n	800269c <memchr+0x6>
 80026ae:	4618      	mov	r0, r3
 80026b0:	bd10      	pop	{r4, pc}

080026b2 <memcpy>:
 80026b2:	b510      	push	{r4, lr}
 80026b4:	1e43      	subs	r3, r0, #1
 80026b6:	440a      	add	r2, r1
 80026b8:	4291      	cmp	r1, r2
 80026ba:	d100      	bne.n	80026be <memcpy+0xc>
 80026bc:	bd10      	pop	{r4, pc}
 80026be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80026c6:	e7f7      	b.n	80026b8 <memcpy+0x6>

080026c8 <memmove>:
 80026c8:	4288      	cmp	r0, r1
 80026ca:	b510      	push	{r4, lr}
 80026cc:	eb01 0302 	add.w	r3, r1, r2
 80026d0:	d807      	bhi.n	80026e2 <memmove+0x1a>
 80026d2:	1e42      	subs	r2, r0, #1
 80026d4:	4299      	cmp	r1, r3
 80026d6:	d00a      	beq.n	80026ee <memmove+0x26>
 80026d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80026dc:	f802 4f01 	strb.w	r4, [r2, #1]!
 80026e0:	e7f8      	b.n	80026d4 <memmove+0xc>
 80026e2:	4283      	cmp	r3, r0
 80026e4:	d9f5      	bls.n	80026d2 <memmove+0xa>
 80026e6:	1881      	adds	r1, r0, r2
 80026e8:	1ad2      	subs	r2, r2, r3
 80026ea:	42d3      	cmn	r3, r2
 80026ec:	d100      	bne.n	80026f0 <memmove+0x28>
 80026ee:	bd10      	pop	{r4, pc}
 80026f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80026f4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80026f8:	e7f7      	b.n	80026ea <memmove+0x22>
	...

080026fc <_free_r>:
 80026fc:	b538      	push	{r3, r4, r5, lr}
 80026fe:	4605      	mov	r5, r0
 8002700:	2900      	cmp	r1, #0
 8002702:	d043      	beq.n	800278c <_free_r+0x90>
 8002704:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002708:	1f0c      	subs	r4, r1, #4
 800270a:	2b00      	cmp	r3, #0
 800270c:	bfb8      	it	lt
 800270e:	18e4      	addlt	r4, r4, r3
 8002710:	f000 f8d0 	bl	80028b4 <__malloc_lock>
 8002714:	4a1e      	ldr	r2, [pc, #120]	; (8002790 <_free_r+0x94>)
 8002716:	6813      	ldr	r3, [r2, #0]
 8002718:	4610      	mov	r0, r2
 800271a:	b933      	cbnz	r3, 800272a <_free_r+0x2e>
 800271c:	6063      	str	r3, [r4, #4]
 800271e:	6014      	str	r4, [r2, #0]
 8002720:	4628      	mov	r0, r5
 8002722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002726:	f000 b8c6 	b.w	80028b6 <__malloc_unlock>
 800272a:	42a3      	cmp	r3, r4
 800272c:	d90b      	bls.n	8002746 <_free_r+0x4a>
 800272e:	6821      	ldr	r1, [r4, #0]
 8002730:	1862      	adds	r2, r4, r1
 8002732:	4293      	cmp	r3, r2
 8002734:	bf01      	itttt	eq
 8002736:	681a      	ldreq	r2, [r3, #0]
 8002738:	685b      	ldreq	r3, [r3, #4]
 800273a:	1852      	addeq	r2, r2, r1
 800273c:	6022      	streq	r2, [r4, #0]
 800273e:	6063      	str	r3, [r4, #4]
 8002740:	6004      	str	r4, [r0, #0]
 8002742:	e7ed      	b.n	8002720 <_free_r+0x24>
 8002744:	4613      	mov	r3, r2
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	b10a      	cbz	r2, 800274e <_free_r+0x52>
 800274a:	42a2      	cmp	r2, r4
 800274c:	d9fa      	bls.n	8002744 <_free_r+0x48>
 800274e:	6819      	ldr	r1, [r3, #0]
 8002750:	1858      	adds	r0, r3, r1
 8002752:	42a0      	cmp	r0, r4
 8002754:	d10b      	bne.n	800276e <_free_r+0x72>
 8002756:	6820      	ldr	r0, [r4, #0]
 8002758:	4401      	add	r1, r0
 800275a:	1858      	adds	r0, r3, r1
 800275c:	4282      	cmp	r2, r0
 800275e:	6019      	str	r1, [r3, #0]
 8002760:	d1de      	bne.n	8002720 <_free_r+0x24>
 8002762:	6810      	ldr	r0, [r2, #0]
 8002764:	6852      	ldr	r2, [r2, #4]
 8002766:	4401      	add	r1, r0
 8002768:	6019      	str	r1, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
 800276c:	e7d8      	b.n	8002720 <_free_r+0x24>
 800276e:	d902      	bls.n	8002776 <_free_r+0x7a>
 8002770:	230c      	movs	r3, #12
 8002772:	602b      	str	r3, [r5, #0]
 8002774:	e7d4      	b.n	8002720 <_free_r+0x24>
 8002776:	6820      	ldr	r0, [r4, #0]
 8002778:	1821      	adds	r1, r4, r0
 800277a:	428a      	cmp	r2, r1
 800277c:	bf01      	itttt	eq
 800277e:	6811      	ldreq	r1, [r2, #0]
 8002780:	6852      	ldreq	r2, [r2, #4]
 8002782:	1809      	addeq	r1, r1, r0
 8002784:	6021      	streq	r1, [r4, #0]
 8002786:	6062      	str	r2, [r4, #4]
 8002788:	605c      	str	r4, [r3, #4]
 800278a:	e7c9      	b.n	8002720 <_free_r+0x24>
 800278c:	bd38      	pop	{r3, r4, r5, pc}
 800278e:	bf00      	nop
 8002790:	200001fc 	.word	0x200001fc

08002794 <_malloc_r>:
 8002794:	b570      	push	{r4, r5, r6, lr}
 8002796:	1ccd      	adds	r5, r1, #3
 8002798:	f025 0503 	bic.w	r5, r5, #3
 800279c:	3508      	adds	r5, #8
 800279e:	2d0c      	cmp	r5, #12
 80027a0:	bf38      	it	cc
 80027a2:	250c      	movcc	r5, #12
 80027a4:	2d00      	cmp	r5, #0
 80027a6:	4606      	mov	r6, r0
 80027a8:	db01      	blt.n	80027ae <_malloc_r+0x1a>
 80027aa:	42a9      	cmp	r1, r5
 80027ac:	d903      	bls.n	80027b6 <_malloc_r+0x22>
 80027ae:	230c      	movs	r3, #12
 80027b0:	6033      	str	r3, [r6, #0]
 80027b2:	2000      	movs	r0, #0
 80027b4:	bd70      	pop	{r4, r5, r6, pc}
 80027b6:	f000 f87d 	bl	80028b4 <__malloc_lock>
 80027ba:	4a21      	ldr	r2, [pc, #132]	; (8002840 <_malloc_r+0xac>)
 80027bc:	6814      	ldr	r4, [r2, #0]
 80027be:	4621      	mov	r1, r4
 80027c0:	b991      	cbnz	r1, 80027e8 <_malloc_r+0x54>
 80027c2:	4c20      	ldr	r4, [pc, #128]	; (8002844 <_malloc_r+0xb0>)
 80027c4:	6823      	ldr	r3, [r4, #0]
 80027c6:	b91b      	cbnz	r3, 80027d0 <_malloc_r+0x3c>
 80027c8:	4630      	mov	r0, r6
 80027ca:	f000 f863 	bl	8002894 <_sbrk_r>
 80027ce:	6020      	str	r0, [r4, #0]
 80027d0:	4629      	mov	r1, r5
 80027d2:	4630      	mov	r0, r6
 80027d4:	f000 f85e 	bl	8002894 <_sbrk_r>
 80027d8:	1c43      	adds	r3, r0, #1
 80027da:	d124      	bne.n	8002826 <_malloc_r+0x92>
 80027dc:	230c      	movs	r3, #12
 80027de:	4630      	mov	r0, r6
 80027e0:	6033      	str	r3, [r6, #0]
 80027e2:	f000 f868 	bl	80028b6 <__malloc_unlock>
 80027e6:	e7e4      	b.n	80027b2 <_malloc_r+0x1e>
 80027e8:	680b      	ldr	r3, [r1, #0]
 80027ea:	1b5b      	subs	r3, r3, r5
 80027ec:	d418      	bmi.n	8002820 <_malloc_r+0x8c>
 80027ee:	2b0b      	cmp	r3, #11
 80027f0:	d90f      	bls.n	8002812 <_malloc_r+0x7e>
 80027f2:	600b      	str	r3, [r1, #0]
 80027f4:	18cc      	adds	r4, r1, r3
 80027f6:	50cd      	str	r5, [r1, r3]
 80027f8:	4630      	mov	r0, r6
 80027fa:	f000 f85c 	bl	80028b6 <__malloc_unlock>
 80027fe:	f104 000b 	add.w	r0, r4, #11
 8002802:	1d23      	adds	r3, r4, #4
 8002804:	f020 0007 	bic.w	r0, r0, #7
 8002808:	1ac3      	subs	r3, r0, r3
 800280a:	d0d3      	beq.n	80027b4 <_malloc_r+0x20>
 800280c:	425a      	negs	r2, r3
 800280e:	50e2      	str	r2, [r4, r3]
 8002810:	e7d0      	b.n	80027b4 <_malloc_r+0x20>
 8002812:	684b      	ldr	r3, [r1, #4]
 8002814:	428c      	cmp	r4, r1
 8002816:	bf16      	itet	ne
 8002818:	6063      	strne	r3, [r4, #4]
 800281a:	6013      	streq	r3, [r2, #0]
 800281c:	460c      	movne	r4, r1
 800281e:	e7eb      	b.n	80027f8 <_malloc_r+0x64>
 8002820:	460c      	mov	r4, r1
 8002822:	6849      	ldr	r1, [r1, #4]
 8002824:	e7cc      	b.n	80027c0 <_malloc_r+0x2c>
 8002826:	1cc4      	adds	r4, r0, #3
 8002828:	f024 0403 	bic.w	r4, r4, #3
 800282c:	42a0      	cmp	r0, r4
 800282e:	d005      	beq.n	800283c <_malloc_r+0xa8>
 8002830:	1a21      	subs	r1, r4, r0
 8002832:	4630      	mov	r0, r6
 8002834:	f000 f82e 	bl	8002894 <_sbrk_r>
 8002838:	3001      	adds	r0, #1
 800283a:	d0cf      	beq.n	80027dc <_malloc_r+0x48>
 800283c:	6025      	str	r5, [r4, #0]
 800283e:	e7db      	b.n	80027f8 <_malloc_r+0x64>
 8002840:	200001fc 	.word	0x200001fc
 8002844:	20000200 	.word	0x20000200

08002848 <_realloc_r>:
 8002848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800284a:	4607      	mov	r7, r0
 800284c:	4614      	mov	r4, r2
 800284e:	460e      	mov	r6, r1
 8002850:	b921      	cbnz	r1, 800285c <_realloc_r+0x14>
 8002852:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002856:	4611      	mov	r1, r2
 8002858:	f7ff bf9c 	b.w	8002794 <_malloc_r>
 800285c:	b922      	cbnz	r2, 8002868 <_realloc_r+0x20>
 800285e:	f7ff ff4d 	bl	80026fc <_free_r>
 8002862:	4625      	mov	r5, r4
 8002864:	4628      	mov	r0, r5
 8002866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002868:	f000 f826 	bl	80028b8 <_malloc_usable_size_r>
 800286c:	42a0      	cmp	r0, r4
 800286e:	d20f      	bcs.n	8002890 <_realloc_r+0x48>
 8002870:	4621      	mov	r1, r4
 8002872:	4638      	mov	r0, r7
 8002874:	f7ff ff8e 	bl	8002794 <_malloc_r>
 8002878:	4605      	mov	r5, r0
 800287a:	2800      	cmp	r0, #0
 800287c:	d0f2      	beq.n	8002864 <_realloc_r+0x1c>
 800287e:	4631      	mov	r1, r6
 8002880:	4622      	mov	r2, r4
 8002882:	f7ff ff16 	bl	80026b2 <memcpy>
 8002886:	4631      	mov	r1, r6
 8002888:	4638      	mov	r0, r7
 800288a:	f7ff ff37 	bl	80026fc <_free_r>
 800288e:	e7e9      	b.n	8002864 <_realloc_r+0x1c>
 8002890:	4635      	mov	r5, r6
 8002892:	e7e7      	b.n	8002864 <_realloc_r+0x1c>

08002894 <_sbrk_r>:
 8002894:	b538      	push	{r3, r4, r5, lr}
 8002896:	2300      	movs	r3, #0
 8002898:	4c05      	ldr	r4, [pc, #20]	; (80028b0 <_sbrk_r+0x1c>)
 800289a:	4605      	mov	r5, r0
 800289c:	4608      	mov	r0, r1
 800289e:	6023      	str	r3, [r4, #0]
 80028a0:	f7fd fe58 	bl	8000554 <_sbrk>
 80028a4:	1c43      	adds	r3, r0, #1
 80028a6:	d102      	bne.n	80028ae <_sbrk_r+0x1a>
 80028a8:	6823      	ldr	r3, [r4, #0]
 80028aa:	b103      	cbz	r3, 80028ae <_sbrk_r+0x1a>
 80028ac:	602b      	str	r3, [r5, #0]
 80028ae:	bd38      	pop	{r3, r4, r5, pc}
 80028b0:	20000248 	.word	0x20000248

080028b4 <__malloc_lock>:
 80028b4:	4770      	bx	lr

080028b6 <__malloc_unlock>:
 80028b6:	4770      	bx	lr

080028b8 <_malloc_usable_size_r>:
 80028b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80028bc:	1f18      	subs	r0, r3, #4
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bfbc      	itt	lt
 80028c2:	580b      	ldrlt	r3, [r1, r0]
 80028c4:	18c0      	addlt	r0, r0, r3
 80028c6:	4770      	bx	lr

080028c8 <_init>:
 80028c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ca:	bf00      	nop
 80028cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028ce:	bc08      	pop	{r3}
 80028d0:	469e      	mov	lr, r3
 80028d2:	4770      	bx	lr

080028d4 <_fini>:
 80028d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028d6:	bf00      	nop
 80028d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028da:	bc08      	pop	{r3}
 80028dc:	469e      	mov	lr, r3
 80028de:	4770      	bx	lr
